/*! For license information please see user_dashboard.bundle.js.LICENSE.txt */
(()=>{var t={84:(t,e,n)=>{const r=n(96).J,o=Math.PI/180,i={archimedean:m,rectangular:function(t){var e=4*t[0]/t[1],n=0,r=0;return function(t){var o=t<0?-1:1;switch(Math.sqrt(1+4*o*t)-o&3){case 0:n+=e;break;case 1:r+=4;break;case 2:n-=e;break;default:r-=4}return[n,r]}}},a=2048;function s(t){return t.text}function c(){return"serif"}function u(){return"normal"}function l(t){return Math.sqrt(t.value)}function h(){return 30*(~~(6*random())-3)}function f(){return 1}function p(t,e,n,r){if(!e.sprite){var i=t.context,s=t.ratio;i.clearRect(0,0,2048/s,a/s);var c=0,u=0,l=0,h=n.length;for(--r;++r<h;){e=n[r],i.save(),i.font=e.style+" "+e.weight+" "+~~((e.size+1)/s)+"px "+e.font;const t=i.measureText(e.text),h=-Math.floor(t.width/2);let v=(t.width+1)*s,w=e.size<<1;if(e.rotate){var f=Math.sin(e.rotate*o),p=Math.cos(e.rotate*o),d=v*p,y=v*f,m=w*p,g=w*f;v=Math.max(Math.abs(d+g),Math.abs(d-g))+31>>5<<5,w=~~Math.max(Math.abs(y+m),Math.abs(y-m))}else v=v+31>>5<<5;if(w>l&&(l=w),c+v>=2048&&(c=0,u+=l,l=0),u+w>=a)break;i.translate((c+(v>>1))/s,(u+(w>>1))/s),e.rotate&&i.rotate(e.rotate*o),i.fillText(e.text,h,0),e.padding&&(i.lineWidth=2*e.padding,i.strokeText(e.text,h,0)),i.restore(),e.width=v,e.height=w,e.xoff=c,e.yoff=u,e.x1=v>>1,e.y1=w>>1,e.x0=-e.x1,e.y0=-e.y1,e.hasText=!0,c+=v}for(var v=i.getImageData(0,0,2048/s,a/s).data,w=[];--r>=0;)if((e=n[r]).hasText){for(var b=e.width,x=b>>5,k=e.y1-e.y0,_=0;_<k*x;_++)w[_]=0;if(null==(c=e.xoff))return;u=e.yoff;for(var E=0,L=-1,S=0;S<k;S++){for(_=0;_<b;_++){var T=x*S+(_>>5),O=v[2048*(u+S)+(c+_)<<2]?1<<31-_%32:0;w[T]|=O,E|=O}E?L=S:(e.y0++,k--,S--,u++)}e.y1=e.y0+L,e.sprite=w.slice(0,(e.y1-e.y0)*x)}}}function d(t,e,n){n>>=5;for(var r,o=t.sprite,i=t.width>>5,a=t.x-(i<<4),s=127&a,c=32-s,u=t.y1-t.y0,l=(t.y+t.y0)*n+(a>>5),h=0;h<u;h++){r=0;for(var f=0;f<=i;f++)if((r<<c|(f<i?(r=o[h*i+f])>>>s:0))&e[l+f])return!0;l+=n}return!1}function y(t,e){var n=t[0],r=t[1];e.x+e.x0<n.x&&(n.x=e.x+e.x0),e.y+e.y0<n.y&&(n.y=e.y+e.y0),e.x+e.x1>r.x&&(r.x=e.x+e.x1),e.y+e.y1>r.y&&(r.y=e.y+e.y1)}function m(t){var e=t[0]/t[1];return function(t){return[e*(t*=.1)*Math.cos(t),t*Math.sin(t)]}}function g(){return document.createElement("canvas")}function v(t){return"function"==typeof t?t:function(){return t}}t.exports=function(){var t=[256,256],e=s,n=c,o=l,w=u,b=u,x=h,k=f,_=m,E=[],L=1/0,S=r("word","end"),T=null,O=Math.random,A={},C=g;function P(e,n,r){t[0],t[1];for(var o,i,a,s,c,u=n.x,l=n.y,h=Math.sqrt(t[0]*t[0]+t[1]*t[1]),f=_(t),p=O()<.5?1:-1,y=-p;(o=f(y+=p))&&(i=~~o[0],a=~~o[1],!(Math.min(Math.abs(i),Math.abs(a))>=h));)if(n.x=u+i,n.y=l+a,!(n.x+n.x0<0||n.y+n.y0<0||n.x+n.x1>t[0]||n.y+n.y1>t[1]||r&&(c=r,!((s=n).x+s.x1>c[0].x&&s.x+s.x0<c[1].x&&s.y+s.y1>c[0].y&&s.y+s.y0<c[1].y))||d(n,e,t[0]))){for(var m,g=n.sprite,v=n.width>>5,w=t[0]>>5,b=n.x-(v<<4),x=127&b,k=32-x,E=n.y1-n.y0,L=(n.y+n.y0)*w+(b>>5),S=0;S<E;S++){m=0;for(var T=0;T<=v;T++)e[L+T]|=m<<k|(T<v?(m=g[S*v+T])>>>x:0);L+=w}return!0}return!1}return A.canvas=function(t){return arguments.length?(C=v(t),A):C},A.start=function(){var r=function(t){const e=t.getContext("2d",{willReadFrequently:!0});t.width=t.height=1;const n=Math.sqrt(e.getImageData(0,0,1,1).data.length>>2);return t.width=2048/n,t.height=a/n,e.fillStyle=e.strokeStyle="red",{context:e,ratio:n}}(C()),i=function(t){for(var e=[],n=-1;++n<t;)e[n]=0;return e}((t[0]>>5)*t[1]),s=null,c=E.length,u=-1,l=[],h=E.map((function(t,r){return t.text=e.call(this,t,r),t.font=n.call(this,t,r),t.style=w.call(this,t,r),t.weight=b.call(this,t,r),t.rotate=x.call(this,t,r),t.size=~~o.call(this,t,r),t.padding=k.call(this,t,r),t})).sort((function(t,e){return e.size-t.size}));return T&&clearInterval(T),T=setInterval(f,0),f(),A;function f(){for(var e=Date.now();Date.now()-e<L&&++u<c&&T;){var n=h[u];n.x=t[0]*(O()+.5)>>1,n.y=t[1]*(O()+.5)>>1,p(r,n,h,u),n.hasText&&P(i,n,s)&&(l.push(n),S.call("word",A,n),s?y(s,n):s=[{x:n.x+n.x0,y:n.y+n.y0},{x:n.x+n.x1,y:n.y+n.y1}],n.x-=t[0]>>1,n.y-=t[1]>>1)}u>=c&&(A.stop(),S.call("end",A,l,s))}},A.stop=function(){T&&(clearInterval(T),T=null);for(const t of E)delete t.sprite;return A},A.timeInterval=function(t){return arguments.length?(L=null==t?1/0:t,A):L},A.words=function(t){return arguments.length?(E=t,A):E},A.size=function(e){return arguments.length?(t=[+e[0],+e[1]],A):t},A.font=function(t){return arguments.length?(n=v(t),A):n},A.fontStyle=function(t){return arguments.length?(w=v(t),A):w},A.fontWeight=function(t){return arguments.length?(b=v(t),A):b},A.rotate=function(t){return arguments.length?(x=v(t),A):x},A.text=function(t){return arguments.length?(e=v(t),A):e},A.spiral=function(t){return arguments.length?(_=i[t]||t,A):_},A.fontSize=function(t){return arguments.length?(o=v(t),A):o},A.padding=function(t){return arguments.length?(k=v(t),A):k},A.random=function(t){return arguments.length?(O=t,A):O},A.on=function(){var t=S.on.apply(S,arguments);return t===S?A:t},A}},96:(t,e,n)=>{"use strict";n.d(e,{J:()=>c});var r={value:function(){}};function o(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new i(r)}function i(t){this._=t}function a(t,e){for(var n,r=0,o=t.length;r<o;++r)if((n=t[r]).name===e)return n.value}function s(t,e,n){for(var o=0,i=t.length;o<i;++o)if(t[o].name===e){t[o]=r,t=t.slice(0,o).concat(t.slice(o+1));break}return null!=n&&t.push({name:e,value:n}),t}i.prototype=o.prototype={constructor:i,on:function(t,e){var n,r,o=this._,i=(r=o,(t+"").trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))),c=-1,u=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++c<u;)if(n=(t=i[c]).type)o[n]=s(o[n],t.name,e);else if(null==e)for(n in o)o[n]=s(o[n],t.name,null);return this}for(;++c<u;)if((n=(t=i[c]).type)&&(n=a(o[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new i(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,o=new Array(n),i=0;i<n;++i)o[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(r=this._[t]).length;i<n;++i)r[i].value.apply(e,o)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],o=0,i=r.length;o<i;++o)r[o].value.apply(e,n)}};const c=o},786:(t,e,n)=>{var r,o;!function(i,a){"use strict";void 0===(o="function"==typeof(r=a)?r.call(e,n,e,t):r)||(t.exports=o)}(window,(function(){"use strict";var t=function(){var t=window.Element.prototype;if(t.matches)return"matches";if(t.matchesSelector)return"matchesSelector";for(var e=["webkit","moz","ms","o"],n=0;n<e.length;n++){var r=e[n]+"MatchesSelector";if(t[r])return r}}();return function(e,n){return e[t](n)}}))},137:function(t,e,n){var r,o;"undefined"!=typeof window&&window,void 0===(o="function"==typeof(r=function(){"use strict";function t(){}var e=t.prototype;return e.on=function(t,e){if(t&&e){var n=this._events=this._events||{},r=n[t]=n[t]||[];return-1==r.indexOf(e)&&r.push(e),this}},e.once=function(t,e){if(t&&e){this.on(t,e);var n=this._onceEvents=this._onceEvents||{};return(n[t]=n[t]||{})[e]=!0,this}},e.off=function(t,e){var n=this._events&&this._events[t];if(n&&n.length){var r=n.indexOf(e);return-1!=r&&n.splice(r,1),this}},e.emitEvent=function(t,e){var n=this._events&&this._events[t];if(n&&n.length){n=n.slice(0),e=e||[];for(var r=this._onceEvents&&this._onceEvents[t],o=0;o<n.length;o++){var i=n[o];r&&r[i]&&(this.off(t,i),delete r[i]),i.apply(this,e)}return this}},e.allOff=function(){delete this._events,delete this._onceEvents},t})?r.call(e,n,e,t):r)||(t.exports=o)},977:(t,e,n)=>{var r,o;!function(i){r=[n(786)],o=function(t){return function(t,e){"use strict";var n={extend:function(t,e){for(var n in e)t[n]=e[n];return t},modulo:function(t,e){return(t%e+e)%e}},r=Array.prototype.slice;n.makeArray=function(t){return Array.isArray(t)?t:null==t?[]:"object"==typeof t&&"number"==typeof t.length?r.call(t):[t]},n.removeFrom=function(t,e){var n=t.indexOf(e);-1!=n&&t.splice(n,1)},n.getParent=function(t,n){for(;t.parentNode&&t!=document.body;)if(t=t.parentNode,e(t,n))return t},n.getQueryElement=function(t){return"string"==typeof t?document.querySelector(t):t},n.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},n.filterFindElements=function(t,r){t=n.makeArray(t);var o=[];return t.forEach((function(t){if(t instanceof HTMLElement)if(r){e(t,r)&&o.push(t);for(var n=t.querySelectorAll(r),i=0;i<n.length;i++)o.push(n[i])}else o.push(t)})),o},n.debounceMethod=function(t,e,n){n=n||100;var r=t.prototype[e],o=e+"Timeout";t.prototype[e]=function(){var t=this[o];clearTimeout(t);var e=arguments,i=this;this[o]=setTimeout((function(){r.apply(i,e),delete i[o]}),n)}},n.docReady=function(t){var e=document.readyState;"complete"==e||"interactive"==e?setTimeout(t):document.addEventListener("DOMContentLoaded",t)},n.toDashed=function(t){return t.replace(/(.)([A-Z])/g,(function(t,e,n){return e+"-"+n})).toLowerCase()};var o=t.console;return n.htmlInit=function(e,r){n.docReady((function(){var i=n.toDashed(r),a="data-"+i,s=document.querySelectorAll("["+a+"]"),c=document.querySelectorAll(".js-"+i),u=n.makeArray(s).concat(n.makeArray(c)),l=a+"-options",h=t.jQuery;u.forEach((function(t){var n,i=t.getAttribute(a)||t.getAttribute(l);try{n=i&&JSON.parse(i)}catch(e){return void(o&&o.error("Error parsing "+a+" on "+t.className+": "+e))}var s=new e(t,n);h&&h.data(t,r,s)}))}))},n}(i,t)}.apply(e,r),void 0===o||(t.exports=o)}(window)},485:(t,e,n)=>{var r,o;window,void 0===(o="function"==typeof(r=function(){"use strict";function t(t){var e=parseFloat(t);return-1==t.indexOf("%")&&!isNaN(e)&&e}var e="undefined"==typeof console?function(){}:function(t){console.error(t)},n=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],r=n.length;function o(t){var n=getComputedStyle(t);return n||e("Style returned "+n+". Are you running this code in a hidden iframe on Firefox? See https://bit.ly/getsizebug1"),n}var i,a=!1;function s(e){if(function(){if(!a){a=!0;var e=document.createElement("div");e.style.width="200px",e.style.padding="1px 2px 3px 4px",e.style.borderStyle="solid",e.style.borderWidth="1px 2px 3px 4px",e.style.boxSizing="border-box";var n=document.body||document.documentElement;n.appendChild(e);var r=o(e);i=200==Math.round(t(r.width)),s.isBoxSizeOuter=i,n.removeChild(e)}}(),"string"==typeof e&&(e=document.querySelector(e)),e&&"object"==typeof e&&e.nodeType){var c=o(e);if("none"==c.display)return function(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},e=0;e<r;e++)t[n[e]]=0;return t}();var u={};u.width=e.offsetWidth,u.height=e.offsetHeight;for(var l=u.isBorderBox="border-box"==c.boxSizing,h=0;h<r;h++){var f=n[h],p=c[f],d=parseFloat(p);u[f]=isNaN(d)?0:d}var y=u.paddingLeft+u.paddingRight,m=u.paddingTop+u.paddingBottom,g=u.marginLeft+u.marginRight,v=u.marginTop+u.marginBottom,w=u.borderLeftWidth+u.borderRightWidth,b=u.borderTopWidth+u.borderBottomWidth,x=l&&i,k=t(c.width);!1!==k&&(u.width=k+(x?0:y+w));var _=t(c.height);return!1!==_&&(u.height=_+(x?0:m+b)),u.innerWidth=u.width-(y+w),u.innerHeight=u.height-(m+b),u.outerWidth=u.width+g,u.outerHeight=u.height+v,u}}return s})?r.call(e,n,e,t):r)||(t.exports=o)},994:(t,e,n)=>{var r,o,i;window,o=[n(831),n(485)],void 0===(i="function"==typeof(r=function(t,e){"use strict";var n=t.create("masonry");n.compatOptions.fitWidth="isFitWidth";var r=n.prototype;return r._resetLayout=function(){this.getSize(),this._getMeasurement("columnWidth","outerWidth"),this._getMeasurement("gutter","outerWidth"),this.measureColumns(),this.colYs=[];for(var t=0;t<this.cols;t++)this.colYs.push(0);this.maxY=0,this.horizontalColIndex=0},r.measureColumns=function(){if(this.getContainerWidth(),!this.columnWidth){var t=this.items[0],n=t&&t.element;this.columnWidth=n&&e(n).outerWidth||this.containerWidth}var r=this.columnWidth+=this.gutter,o=this.containerWidth+this.gutter,i=o/r,a=r-o%r;i=Math[a&&a<1?"round":"floor"](i),this.cols=Math.max(i,1)},r.getContainerWidth=function(){var t=this._getOption("fitWidth")?this.element.parentNode:this.element,n=e(t);this.containerWidth=n&&n.innerWidth},r._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth%this.columnWidth,n=Math[e&&e<1?"round":"ceil"](t.size.outerWidth/this.columnWidth);n=Math.min(n,this.cols);for(var r=this[this.options.horizontalOrder?"_getHorizontalColPosition":"_getTopColPosition"](n,t),o={x:this.columnWidth*r.col,y:r.y},i=r.y+t.size.outerHeight,a=n+r.col,s=r.col;s<a;s++)this.colYs[s]=i;return o},r._getTopColPosition=function(t){var e=this._getTopColGroup(t),n=Math.min.apply(Math,e);return{col:e.indexOf(n),y:n}},r._getTopColGroup=function(t){if(t<2)return this.colYs;for(var e=[],n=this.cols+1-t,r=0;r<n;r++)e[r]=this._getColGroupY(r,t);return e},r._getColGroupY=function(t,e){if(e<2)return this.colYs[t];var n=this.colYs.slice(t,t+e);return Math.max.apply(Math,n)},r._getHorizontalColPosition=function(t,e){var n=this.horizontalColIndex%this.cols;n=t>1&&n+t>this.cols?0:n;var r=e.size.outerWidth&&e.size.outerHeight;return this.horizontalColIndex=r?n+t:this.horizontalColIndex,{col:n,y:this._getColGroupY(n,t)}},r._manageStamp=function(t){var n=e(t),r=this._getElementOffset(t),o=this._getOption("originLeft")?r.left:r.right,i=o+n.outerWidth,a=Math.floor(o/this.columnWidth);a=Math.max(0,a);var s=Math.floor(i/this.columnWidth);s-=i%this.columnWidth?0:1,s=Math.min(this.cols-1,s);for(var c=(this._getOption("originTop")?r.top:r.bottom)+n.outerHeight,u=a;u<=s;u++)this.colYs[u]=Math.max(c,this.colYs[u])},r._getContainerSize=function(){this.maxY=Math.max.apply(Math,this.colYs);var t={height:this.maxY};return this._getOption("fitWidth")&&(t.width=this._getContainerFitWidth()),t},r._getContainerFitWidth=function(){for(var t=0,e=this.cols;--e&&0===this.colYs[e];)t++;return(this.cols-t)*this.columnWidth-this.gutter},r.needsResizeLayout=function(){var t=this.containerWidth;return this.getContainerWidth(),t!=this.containerWidth},n})?r.apply(e,o):r)||(t.exports=i)},169:(t,e,n)=>{var r,o,i;window,o=[n(137),n(485)],void 0===(i="function"==typeof(r=function(t,e){"use strict";var n=document.documentElement.style,r="string"==typeof n.transition?"transition":"WebkitTransition",o="string"==typeof n.transform?"transform":"WebkitTransform",i={WebkitTransition:"webkitTransitionEnd",transition:"transitionend"}[r],a={transform:o,transition:r,transitionDuration:r+"Duration",transitionProperty:r+"Property",transitionDelay:r+"Delay"};function s(t,e){t&&(this.element=t,this.layout=e,this.position={x:0,y:0},this._create())}var c=s.prototype=Object.create(t.prototype);c.constructor=s,c._create=function(){this._transn={ingProperties:{},clean:{},onEnd:{}},this.css({position:"absolute"})},c.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},c.getSize=function(){this.size=e(this.element)},c.css=function(t){var e=this.element.style;for(var n in t)e[a[n]||n]=t[n]},c.getPosition=function(){var t=getComputedStyle(this.element),e=this.layout._getOption("originLeft"),n=this.layout._getOption("originTop"),r=t[e?"left":"right"],o=t[n?"top":"bottom"],i=parseFloat(r),a=parseFloat(o),s=this.layout.size;-1!=r.indexOf("%")&&(i=i/100*s.width),-1!=o.indexOf("%")&&(a=a/100*s.height),i=isNaN(i)?0:i,a=isNaN(a)?0:a,i-=e?s.paddingLeft:s.paddingRight,a-=n?s.paddingTop:s.paddingBottom,this.position.x=i,this.position.y=a},c.layoutPosition=function(){var t=this.layout.size,e={},n=this.layout._getOption("originLeft"),r=this.layout._getOption("originTop"),o=n?"paddingLeft":"paddingRight",i=n?"left":"right",a=n?"right":"left",s=this.position.x+t[o];e[i]=this.getXValue(s),e[a]="";var c=r?"paddingTop":"paddingBottom",u=r?"top":"bottom",l=r?"bottom":"top",h=this.position.y+t[c];e[u]=this.getYValue(h),e[l]="",this.css(e),this.emitEvent("layout",[this])},c.getXValue=function(t){var e=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&!e?t/this.layout.size.width*100+"%":t+"px"},c.getYValue=function(t){var e=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&e?t/this.layout.size.height*100+"%":t+"px"},c._transitionTo=function(t,e){this.getPosition();var n=this.position.x,r=this.position.y,o=t==this.position.x&&e==this.position.y;if(this.setPosition(t,e),!o||this.isTransitioning){var i=t-n,a=e-r,s={};s.transform=this.getTranslate(i,a),this.transition({to:s,onTransitionEnd:{transform:this.layoutPosition},isCleaning:!0})}else this.layoutPosition()},c.getTranslate=function(t,e){return"translate3d("+(t=this.layout._getOption("originLeft")?t:-t)+"px, "+(e=this.layout._getOption("originTop")?e:-e)+"px, 0)"},c.goTo=function(t,e){this.setPosition(t,e),this.layoutPosition()},c.moveTo=c._transitionTo,c.setPosition=function(t,e){this.position.x=parseFloat(t),this.position.y=parseFloat(e)},c._nonTransition=function(t){for(var e in this.css(t.to),t.isCleaning&&this._removeStyles(t.to),t.onTransitionEnd)t.onTransitionEnd[e].call(this)},c.transition=function(t){if(parseFloat(this.layout.options.transitionDuration)){var e=this._transn;for(var n in t.onTransitionEnd)e.onEnd[n]=t.onTransitionEnd[n];for(n in t.to)e.ingProperties[n]=!0,t.isCleaning&&(e.clean[n]=!0);t.from&&(this.css(t.from),this.element.offsetHeight),this.enableTransition(t.to),this.css(t.to),this.isTransitioning=!0}else this._nonTransition(t)};var u="opacity,"+o.replace(/([A-Z])/g,(function(t){return"-"+t.toLowerCase()}));c.enableTransition=function(){if(!this.isTransitioning){var t=this.layout.options.transitionDuration;t="number"==typeof t?t+"ms":t,this.css({transitionProperty:u,transitionDuration:t,transitionDelay:this.staggerDelay||0}),this.element.addEventListener(i,this,!1)}},c.onwebkitTransitionEnd=function(t){this.ontransitionend(t)},c.onotransitionend=function(t){this.ontransitionend(t)};var l={"-webkit-transform":"transform"};c.ontransitionend=function(t){if(t.target===this.element){var e=this._transn,n=l[t.propertyName]||t.propertyName;delete e.ingProperties[n],function(t){for(var e in t)return!1;return!0}(e.ingProperties)&&this.disableTransition(),n in e.clean&&(this.element.style[t.propertyName]="",delete e.clean[n]),n in e.onEnd&&(e.onEnd[n].call(this),delete e.onEnd[n]),this.emitEvent("transitionEnd",[this])}},c.disableTransition=function(){this.removeTransitionStyles(),this.element.removeEventListener(i,this,!1),this.isTransitioning=!1},c._removeStyles=function(t){var e={};for(var n in t)e[n]="";this.css(e)};var h={transitionProperty:"",transitionDuration:"",transitionDelay:""};return c.removeTransitionStyles=function(){this.css(h)},c.stagger=function(t){t=isNaN(t)?0:t,this.staggerDelay=t+"ms"},c.removeElem=function(){this.element.parentNode.removeChild(this.element),this.css({display:""}),this.emitEvent("remove",[this])},c.remove=function(){r&&parseFloat(this.layout.options.transitionDuration)?(this.once("transitionEnd",(function(){this.removeElem()})),this.hide()):this.removeElem()},c.reveal=function(){delete this.isHidden,this.css({display:""});var t=this.layout.options,e={};e[this.getHideRevealTransitionEndProperty("visibleStyle")]=this.onRevealTransitionEnd,this.transition({from:t.hiddenStyle,to:t.visibleStyle,isCleaning:!0,onTransitionEnd:e})},c.onRevealTransitionEnd=function(){this.isHidden||this.emitEvent("reveal")},c.getHideRevealTransitionEndProperty=function(t){var e=this.layout.options[t];if(e.opacity)return"opacity";for(var n in e)return n},c.hide=function(){this.isHidden=!0,this.css({display:""});var t=this.layout.options,e={};e[this.getHideRevealTransitionEndProperty("hiddenStyle")]=this.onHideTransitionEnd,this.transition({from:t.visibleStyle,to:t.hiddenStyle,isCleaning:!0,onTransitionEnd:e})},c.onHideTransitionEnd=function(){this.isHidden&&(this.css({display:"none"}),this.emitEvent("hide"))},c.destroy=function(){this.css({position:"",left:"",right:"",top:"",bottom:"",transition:"",transform:""})},s})?r.apply(e,o):r)||(t.exports=i)},831:(t,e,n)=>{var r,o;!function(i){"use strict";r=[n(137),n(485),n(977),n(169)],o=function(t,e,n,r){return function(t,e,n,r,o){var i=t.console,a=t.jQuery,s=function(){},c=0,u={};function l(t,e){var n=r.getQueryElement(t);if(n){this.element=n,a&&(this.$element=a(this.element)),this.options=r.extend({},this.constructor.defaults),this.option(e);var o=++c;this.element.outlayerGUID=o,u[o]=this,this._create(),this._getOption("initLayout")&&this.layout()}else i&&i.error("Bad element for "+this.constructor.namespace+": "+(n||t))}l.namespace="outlayer",l.Item=o,l.defaults={containerStyle:{position:"relative"},initLayout:!0,originLeft:!0,originTop:!0,resize:!0,resizeContainer:!0,transitionDuration:"0.4s",hiddenStyle:{opacity:0,transform:"scale(0.001)"},visibleStyle:{opacity:1,transform:"scale(1)"}};var h=l.prototype;function f(t){function e(){t.apply(this,arguments)}return e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e}r.extend(h,e.prototype),h.option=function(t){r.extend(this.options,t)},h._getOption=function(t){var e=this.constructor.compatOptions[t];return e&&void 0!==this.options[e]?this.options[e]:this.options[t]},l.compatOptions={initLayout:"isInitLayout",horizontal:"isHorizontal",layoutInstant:"isLayoutInstant",originLeft:"isOriginLeft",originTop:"isOriginTop",resize:"isResizeBound",resizeContainer:"isResizingContainer"},h._create=function(){this.reloadItems(),this.stamps=[],this.stamp(this.options.stamp),r.extend(this.element.style,this.options.containerStyle),this._getOption("resize")&&this.bindResize()},h.reloadItems=function(){this.items=this._itemize(this.element.children)},h._itemize=function(t){for(var e=this._filterFindItemElements(t),n=this.constructor.Item,r=[],o=0;o<e.length;o++){var i=new n(e[o],this);r.push(i)}return r},h._filterFindItemElements=function(t){return r.filterFindElements(t,this.options.itemSelector)},h.getItemElements=function(){return this.items.map((function(t){return t.element}))},h.layout=function(){this._resetLayout(),this._manageStamps();var t=this._getOption("layoutInstant"),e=void 0!==t?t:!this._isLayoutInited;this.layoutItems(this.items,e),this._isLayoutInited=!0},h._init=h.layout,h._resetLayout=function(){this.getSize()},h.getSize=function(){this.size=n(this.element)},h._getMeasurement=function(t,e){var r,o=this.options[t];o?("string"==typeof o?r=this.element.querySelector(o):o instanceof HTMLElement&&(r=o),this[t]=r?n(r)[e]:o):this[t]=0},h.layoutItems=function(t,e){t=this._getItemsForLayout(t),this._layoutItems(t,e),this._postLayout()},h._getItemsForLayout=function(t){return t.filter((function(t){return!t.isIgnored}))},h._layoutItems=function(t,e){if(this._emitCompleteOnItems("layout",t),t&&t.length){var n=[];t.forEach((function(t){var r=this._getItemLayoutPosition(t);r.item=t,r.isInstant=e||t.isLayoutInstant,n.push(r)}),this),this._processLayoutQueue(n)}},h._getItemLayoutPosition=function(){return{x:0,y:0}},h._processLayoutQueue=function(t){this.updateStagger(),t.forEach((function(t,e){this._positionItem(t.item,t.x,t.y,t.isInstant,e)}),this)},h.updateStagger=function(){var t=this.options.stagger;if(null!=t)return this.stagger=function(t){if("number"==typeof t)return t;var e=t.match(/(^\d*\.?\d*)(\w*)/),n=e&&e[1],r=e&&e[2];return n.length?(n=parseFloat(n))*(p[r]||1):0}(t),this.stagger;this.stagger=0},h._positionItem=function(t,e,n,r,o){r?t.goTo(e,n):(t.stagger(o*this.stagger),t.moveTo(e,n))},h._postLayout=function(){this.resizeContainer()},h.resizeContainer=function(){if(this._getOption("resizeContainer")){var t=this._getContainerSize();t&&(this._setContainerMeasure(t.width,!0),this._setContainerMeasure(t.height,!1))}},h._getContainerSize=s,h._setContainerMeasure=function(t,e){if(void 0!==t){var n=this.size;n.isBorderBox&&(t+=e?n.paddingLeft+n.paddingRight+n.borderLeftWidth+n.borderRightWidth:n.paddingBottom+n.paddingTop+n.borderTopWidth+n.borderBottomWidth),t=Math.max(t,0),this.element.style[e?"width":"height"]=t+"px"}},h._emitCompleteOnItems=function(t,e){var n=this;function r(){n.dispatchEvent(t+"Complete",null,[e])}var o=e.length;if(e&&o){var i=0;e.forEach((function(e){e.once(t,a)}))}else r();function a(){++i==o&&r()}},h.dispatchEvent=function(t,e,n){var r=e?[e].concat(n):n;if(this.emitEvent(t,r),a)if(this.$element=this.$element||a(this.element),e){var o=a.Event(e);o.type=t,this.$element.trigger(o,n)}else this.$element.trigger(t,n)},h.ignore=function(t){var e=this.getItem(t);e&&(e.isIgnored=!0)},h.unignore=function(t){var e=this.getItem(t);e&&delete e.isIgnored},h.stamp=function(t){(t=this._find(t))&&(this.stamps=this.stamps.concat(t),t.forEach(this.ignore,this))},h.unstamp=function(t){(t=this._find(t))&&t.forEach((function(t){r.removeFrom(this.stamps,t),this.unignore(t)}),this)},h._find=function(t){if(t)return"string"==typeof t&&(t=this.element.querySelectorAll(t)),r.makeArray(t)},h._manageStamps=function(){this.stamps&&this.stamps.length&&(this._getBoundingRect(),this.stamps.forEach(this._manageStamp,this))},h._getBoundingRect=function(){var t=this.element.getBoundingClientRect(),e=this.size;this._boundingRect={left:t.left+e.paddingLeft+e.borderLeftWidth,top:t.top+e.paddingTop+e.borderTopWidth,right:t.right-(e.paddingRight+e.borderRightWidth),bottom:t.bottom-(e.paddingBottom+e.borderBottomWidth)}},h._manageStamp=s,h._getElementOffset=function(t){var e=t.getBoundingClientRect(),r=this._boundingRect,o=n(t);return{left:e.left-r.left-o.marginLeft,top:e.top-r.top-o.marginTop,right:r.right-e.right-o.marginRight,bottom:r.bottom-e.bottom-o.marginBottom}},h.handleEvent=r.handleEvent,h.bindResize=function(){t.addEventListener("resize",this),this.isResizeBound=!0},h.unbindResize=function(){t.removeEventListener("resize",this),this.isResizeBound=!1},h.onresize=function(){this.resize()},r.debounceMethod(l,"onresize",100),h.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&this.layout()},h.needsResizeLayout=function(){var t=n(this.element);return this.size&&t&&t.innerWidth!==this.size.innerWidth},h.addItems=function(t){var e=this._itemize(t);return e.length&&(this.items=this.items.concat(e)),e},h.appended=function(t){var e=this.addItems(t);e.length&&(this.layoutItems(e,!0),this.reveal(e))},h.prepended=function(t){var e=this._itemize(t);if(e.length){var n=this.items.slice(0);this.items=e.concat(n),this._resetLayout(),this._manageStamps(),this.layoutItems(e,!0),this.reveal(e),this.layoutItems(n)}},h.reveal=function(t){if(this._emitCompleteOnItems("reveal",t),t&&t.length){var e=this.updateStagger();t.forEach((function(t,n){t.stagger(n*e),t.reveal()}))}},h.hide=function(t){if(this._emitCompleteOnItems("hide",t),t&&t.length){var e=this.updateStagger();t.forEach((function(t,n){t.stagger(n*e),t.hide()}))}},h.revealItemElements=function(t){var e=this.getItems(t);this.reveal(e)},h.hideItemElements=function(t){var e=this.getItems(t);this.hide(e)},h.getItem=function(t){for(var e=0;e<this.items.length;e++){var n=this.items[e];if(n.element==t)return n}},h.getItems=function(t){t=r.makeArray(t);var e=[];return t.forEach((function(t){var n=this.getItem(t);n&&e.push(n)}),this),e},h.remove=function(t){var e=this.getItems(t);this._emitCompleteOnItems("remove",e),e&&e.length&&e.forEach((function(t){t.remove(),r.removeFrom(this.items,t)}),this)},h.destroy=function(){var t=this.element.style;t.height="",t.position="",t.width="",this.items.forEach((function(t){t.destroy()})),this.unbindResize();var e=this.element.outlayerGUID;delete u[e],delete this.element.outlayerGUID,a&&a.removeData(this.element,this.constructor.namespace)},l.data=function(t){var e=(t=r.getQueryElement(t))&&t.outlayerGUID;return e&&u[e]},l.create=function(t,e){var n=f(l);return n.defaults=r.extend({},l.defaults),r.extend(n.defaults,e),n.compatOptions=r.extend({},l.compatOptions),n.namespace=t,n.data=l.data,n.Item=f(o),r.htmlInit(n,t),a&&a.bridget&&a.bridget(t,n),n};var p={ms:1,s:1e3};return l.Item=o,l}(i,t,e,n,r)}.apply(e,r),void 0===o||(t.exports=o)}(window)}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t(e)}function e(){e=function(){return r};var n,r={},o=Object.prototype,i=o.hasOwnProperty,a=Object.defineProperty||function(t,e,n){t[e]=n.value},s="function"==typeof Symbol?Symbol:{},c=s.iterator||"@@iterator",u=s.asyncIterator||"@@asyncIterator",l=s.toStringTag||"@@toStringTag";function h(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{h({},"")}catch(n){h=function(t,e,n){return t[e]=n}}function f(t,e,n,r){var o=e&&e.prototype instanceof w?e:w,i=Object.create(o.prototype),s=new I(r||[]);return a(i,"_invoke",{value:O(t,n,s)}),i}function p(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}r.wrap=f;var d="suspendedStart",y="suspendedYield",m="executing",g="completed",v={};function w(){}function b(){}function x(){}var k={};h(k,c,(function(){return this}));var _=Object.getPrototypeOf,E=_&&_(_(z([])));E&&E!==o&&i.call(E,c)&&(k=E);var L=x.prototype=w.prototype=Object.create(k);function S(t){["next","throw","return"].forEach((function(e){h(t,e,(function(t){return this._invoke(e,t)}))}))}function T(e,n){function r(o,a,s,c){var u=p(e[o],e,a);if("throw"!==u.type){var l=u.arg,h=l.value;return h&&"object"==t(h)&&i.call(h,"__await")?n.resolve(h.__await).then((function(t){r("next",t,s,c)}),(function(t){r("throw",t,s,c)})):n.resolve(h).then((function(t){l.value=t,s(l)}),(function(t){return r("throw",t,s,c)}))}c(u.arg)}var o;a(this,"_invoke",{value:function(t,e){function i(){return new n((function(n,o){r(t,e,n,o)}))}return o=o?o.then(i,i):i()}})}function O(t,e,r){var o=d;return function(i,a){if(o===m)throw Error("Generator is already running");if(o===g){if("throw"===i)throw a;return{value:n,done:!0}}for(r.method=i,r.arg=a;;){var s=r.delegate;if(s){var c=A(s,r);if(c){if(c===v)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=g,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=m;var u=p(t,e,r);if("normal"===u.type){if(o=r.done?g:y,u.arg===v)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=g,r.method="throw",r.arg=u.arg)}}}function A(t,e){var r=e.method,o=t.iterator[r];if(o===n)return e.delegate=null,"throw"===r&&t.iterator.return&&(e.method="return",e.arg=n,A(t,e),"throw"===e.method)||"return"!==r&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+r+"' method")),v;var i=p(o,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,v;var a=i.arg;return a?a.done?(e[t.resultName]=a.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,v):a:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,v)}function C(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function P(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function I(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(C,this),this.reset(!0)}function z(e){if(e||""===e){var r=e[c];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,a=function t(){for(;++o<e.length;)if(i.call(e,o))return t.value=e[o],t.done=!1,t;return t.value=n,t.done=!0,t};return a.next=a}}throw new TypeError(t(e)+" is not iterable")}return b.prototype=x,a(L,"constructor",{value:x,configurable:!0}),a(x,"constructor",{value:b,configurable:!0}),b.displayName=h(x,l,"GeneratorFunction"),r.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===b||"GeneratorFunction"===(e.displayName||e.name))},r.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,x):(t.__proto__=x,h(t,l,"GeneratorFunction")),t.prototype=Object.create(L),t},r.awrap=function(t){return{__await:t}},S(T.prototype),h(T.prototype,u,(function(){return this})),r.AsyncIterator=T,r.async=function(t,e,n,o,i){void 0===i&&(i=Promise);var a=new T(f(t,e,n,o),i);return r.isGeneratorFunction(e)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},S(L),h(L,l,"Generator"),h(L,c,(function(){return this})),h(L,"toString",(function(){return"[object Generator]"})),r.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},r.values=z,I.prototype={constructor:I,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(P),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,o){return s.type="throw",s.arg=t,e.next=r,o&&(e.method="next",e.arg=n),!!o}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],s=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var c=i.call(a,"catchLoc"),u=i.call(a,"finallyLoc");if(c&&u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),P(n),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;P(n)}return o}}throw Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:z(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),v}},r}function r(t,e,n,r,o,i,a){try{var s=t[i](a),c=s.value}catch(t){return void n(t)}s.done?e(c):Promise.resolve(c).then(r,o)}function o(t){return function(){var e=this,n=arguments;return new Promise((function(o,i){var a=t.apply(e,n);function s(t){r(a,o,i,s,c,"next",t)}function c(t){r(a,o,i,s,c,"throw",t)}s(void 0)}))}}var i;function a(){return s.apply(this,arguments)}function s(){return(s=o(e().mark((function t(){return e().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",new Promise((function(t,e){if(i)t(i);else{var n=indexedDB.open("HistoryIndexerDB",1);n.onerror=function(t){console.error("Database error:",t.target.errorCode),e(t.target.errorCode)},n.onupgradeneeded=function(t){var e=(i=t.target.result).createObjectStore("history",{keyPath:"id"});e.createIndex("url","url",{unique:!1}),e.createIndex("title","title",{unique:!1}),e.createIndex("tags","tags",{unique:!1,multiEntry:!0}),e.createIndex("summary","summary",{unique:!1}),e.createIndex("lastVisitTime","lastVisitTime",{unique:!0}),console.log("Database upgraded")},n.onsuccess=function(e){i=e.target.result,t(i)}}})));case 1:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function c(t){return new Promise((function(e,n){t.onsuccess=function(){return e(t.result)},t.onerror=function(){return n(t.error)}}))}function u(t,e){return l.apply(this,arguments)}function l(){return(l=o(e().mark((function t(n,r){var o,s,u,l,h,f;return e().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,a();case 2:return o=i.transaction(["history"],"readonly"),s=o.objectStore("history"),u=s.index("lastVisitTime"),l=IDBKeyRange.bound(n,r),h=u.getAll(l),t.next=9,c(h);case 9:return f=t.sent,t.abrupt("return",f);case 11:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function h(t,e,n){var r=t;if(e&&e.length>0){var o=e.map((function(t){return t.toLowerCase()}));r=r.filter((function(t){var e=t.title?t.title.toLowerCase():"",n=t.summary?t.summary.toLowerCase():"",r=t.tags?t.tags.map((function(t){return t.toLowerCase()})):[],i=t.url?t.url.toLowerCase():"";return o.some((function(t){return e.includes(t)||n.includes(t)||r.includes(t)||i.includes(t)}))}))}if(n&&n.length>0){var i=n.map((function(t){return t.toLowerCase()}));r=r.filter((function(t){var e=t.title?t.title.toLowerCase():"",n=t.summary?t.summary.toLowerCase():"",r=t.tags?t.tags.map((function(t){return t.toLowerCase()})):[],o=t.url?t.url.toLowerCase():"";return!i.some((function(t){return e.includes(t)||n.includes(t)||r.includes(t)||o.includes(t)}))}))}return r}function f(t){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},f(t)}function p(){p=function(){return e};var t,e={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(t,e,n){t[e]=n.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",s=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag";function u(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,n){return t[e]=n}}function l(t,e,n,r){var i=e&&e.prototype instanceof w?e:w,a=Object.create(i.prototype),s=new I(r||[]);return o(a,"_invoke",{value:O(t,n,s)}),a}function h(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}e.wrap=l;var d="suspendedStart",y="suspendedYield",m="executing",g="completed",v={};function w(){}function b(){}function x(){}var k={};u(k,a,(function(){return this}));var _=Object.getPrototypeOf,E=_&&_(_(z([])));E&&E!==n&&r.call(E,a)&&(k=E);var L=x.prototype=w.prototype=Object.create(k);function S(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function T(t,e){function n(o,i,a,s){var c=h(t[o],t,i);if("throw"!==c.type){var u=c.arg,l=u.value;return l&&"object"==f(l)&&r.call(l,"__await")?e.resolve(l.__await).then((function(t){n("next",t,a,s)}),(function(t){n("throw",t,a,s)})):e.resolve(l).then((function(t){u.value=t,a(u)}),(function(t){return n("throw",t,a,s)}))}s(c.arg)}var i;o(this,"_invoke",{value:function(t,r){function o(){return new e((function(e,o){n(t,r,e,o)}))}return i=i?i.then(o,o):o()}})}function O(e,n,r){var o=d;return function(i,a){if(o===m)throw Error("Generator is already running");if(o===g){if("throw"===i)throw a;return{value:t,done:!0}}for(r.method=i,r.arg=a;;){var s=r.delegate;if(s){var c=A(s,r);if(c){if(c===v)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=g,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=m;var u=h(e,n,r);if("normal"===u.type){if(o=r.done?g:y,u.arg===v)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=g,r.method="throw",r.arg=u.arg)}}}function A(e,n){var r=n.method,o=e.iterator[r];if(o===t)return n.delegate=null,"throw"===r&&e.iterator.return&&(n.method="return",n.arg=t,A(e,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),v;var i=h(o,e.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,v;var a=i.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,v):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function C(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function P(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function I(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(C,this),this.reset(!0)}function z(e){if(e||""===e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}throw new TypeError(f(e)+" is not iterable")}return b.prototype=x,o(L,"constructor",{value:x,configurable:!0}),o(x,"constructor",{value:b,configurable:!0}),b.displayName=u(x,c,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===b||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,x):(t.__proto__=x,u(t,c,"GeneratorFunction")),t.prototype=Object.create(L),t},e.awrap=function(t){return{__await:t}},S(T.prototype),u(T.prototype,s,(function(){return this})),e.AsyncIterator=T,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new T(l(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},S(L),u(L,c,"Generator"),u(L,a,(function(){return this})),u(L,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},e.values=z,I.prototype={constructor:I,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(P),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return s.type="throw",s.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var c=r.call(a,"catchLoc"),u=r.call(a,"finallyLoc");if(c&&u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),P(n),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;P(n)}return o}}throw Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:z(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),v}},e}function d(t,e,n,r,o,i,a){try{var s=t[i](a),c=s.value}catch(t){return void n(t)}s.done?e(c):Promise.resolve(c).then(r,o)}function y(t,e,n,r,o){return m.apply(this,arguments)}function m(){return(t=p().mark((function t(e,n,r,o,i){var a,s,c,l,f,d,y,m;return p().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,u(e.getTime(),n.getTime());case 2:return a=t.sent,s=h(a,o,i),c=s.map((function(t){return g(t.url,t.title)})),l=v(c),f=w(c),d=Array.from(l.entries()).sort((function(t,e){return e[1]-t[1]})),y=d.slice(0,r),m=y.map((function(t){return{hostname:t[0],titles:f.get(t[0]),count:t[1]}})),t.abrupt("return",{topNHostnamesWithTitles:m,filteredHistoryItems:s});case 11:case"end":return t.stop()}}),t)})),m=function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(t){d(i,r,o,a,s,"next",t)}function s(t){d(i,r,o,a,s,"throw",t)}a(void 0)}))}).apply(this,arguments);var t}function g(t,e){try{var n=new URL(t),r=n.protocol.replace(":",""),o=n.hostname.split("."),i="",a="",s="";o.length>2?(i=o.slice(0,o.length-2).join("."),a=o[o.length-2],s=o[o.length-1]):2===o.length?(a=o[0],s=o[1]):(a=n.hostname,s="");var c=n.pathname,u={};n.searchParams.forEach((function(t,e){u[e]?Array.isArray(u[e])?u[e].push(t):u[e]=[u[e],t]:u[e]=t}));var l=n.hash.replace("#",""),h=n.port;return h||(h="http"===r?"80":"https"===r?"443":""),{protocol:r,subdomain:i,domain:a,tld:s,path:c,queryParams:u,fragment:l,port:h,host:n.host,hostname:n.hostname,href:n.href,origin:n.origin,title:e}}catch(e){return console.error("Invalid URL: ".concat(t),e),null}}function v(t){var e=new Map;return t.forEach((function(t){var n=t.hostname;n&&(e.has(n)?e.set(n,e.get(n)+1):e.set(n,1))})),e}function w(t){var e=new Map;return t.forEach((function(t){var n=t.hostname,r=t.title,o=t.href;r||(r=n),e.has(n)?e.get(n).some((function(t){return t.title===r}))||e.get(n).push({title:r,url:o}):e.set(n,[{title:r,url:o}])})),e}var b=n(994),x=n.n(b);function k(t,e){if(document.getElementById(t))return document.getElementById(t);var n=document.querySelector(".widget-container"),r=document.createElement("div");return r.className="widget",r.id=t,r.innerHTML='\n        <div class="widget-header">\n            <h2>'.concat(e,'</h2>\n            <div class="resize-handle"></div>\n        </div>\n    '),n.appendChild(r),window.masonryInstance&&(console.log("adding new widget to masonry"),window.masonryInstance.appended(r),window.masonryInstance.layout()),r}function _(t,e,n){var r=0;e.forEach((function(e){t.querySelectorAll(e).forEach((function(t){r+=t.offsetHeight}))})),t.style.height="".concat(r+n,"px"),window.masonryInstance&&window.masonryInstance.layout()}var E=[{feature:"Detailed Summary",context:"Summarize user behaviour from the titles. Return a concise summary about different points in markdown format. For each part of summary, use format: heading, description, keywords. Dont talk about the same thing in multiple parts. Dont talk about very generic things.",model:"summarizer",seed_prompt:""},{feature:"Brief Summary",context:"Summarize user history from the titles. Return a concise summary about different points in markdown format. For each part of summary, use format: heading, description, keywords. Dont talk about the same thing in multiple parts. Dont talk about very generic things.",model:"summarizer",seed_prompt:""},{feature:"Write a Funny Poem from My History",context:"Create a humorous poem that creatively incorporates the user's browsing history titles, blending them seamlessly into the narrative.",model:"prompt",seed_prompt:"Generate a funny poem that includes elements from the user's browsing history titles. Use a rhyming scheme and format the poem with line breaks using \\n. Always remember to use \\n to separate the lines at the rhyming points. Below is a list of titles to inspire the poem:\n"},{feature:"Write 5 Personalized Jokes",context:"Create 5 humorous jokes that cleverly reference the user's browsing history titles in a personalized manner.",model:"prompt",seed_prompt:"Generate 5 funny jokes that incorporate elements from the user's browsing history titles. Present the jokes as a numbered list. Below is the list of titles to inspire the jokes:\n"},{feature:"Summary of My Research to Share with Colleagues",context:"Provide a concise and structured summary of the user's research based on browsing history titles, formatted in Markdown with clear sections.",model:"prompt",seed_prompt:"Summarize the user's research based on their browsing history titles. Present the summary in Markdown format, with each section containing a heading, a brief description, and relevant keywords. Ensure each section covers unique aspects without redundancy or overly generic information. Below is the list of titles to inspire the summary:\n"}];function L(t){return L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},L(t)}function S(){S=function(){return e};var t,e={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(t,e,n){t[e]=n.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",s=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag";function u(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,n){return t[e]=n}}function l(t,e,n,r){var i=e&&e.prototype instanceof g?e:g,a=Object.create(i.prototype),s=new I(r||[]);return o(a,"_invoke",{value:O(t,n,s)}),a}function h(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}e.wrap=l;var f="suspendedStart",p="suspendedYield",d="executing",y="completed",m={};function g(){}function v(){}function w(){}var b={};u(b,a,(function(){return this}));var x=Object.getPrototypeOf,k=x&&x(x(z([])));k&&k!==n&&r.call(k,a)&&(b=k);var _=w.prototype=g.prototype=Object.create(b);function E(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function T(t,e){function n(o,i,a,s){var c=h(t[o],t,i);if("throw"!==c.type){var u=c.arg,l=u.value;return l&&"object"==L(l)&&r.call(l,"__await")?e.resolve(l.__await).then((function(t){n("next",t,a,s)}),(function(t){n("throw",t,a,s)})):e.resolve(l).then((function(t){u.value=t,a(u)}),(function(t){return n("throw",t,a,s)}))}s(c.arg)}var i;o(this,"_invoke",{value:function(t,r){function o(){return new e((function(e,o){n(t,r,e,o)}))}return i=i?i.then(o,o):o()}})}function O(e,n,r){var o=f;return function(i,a){if(o===d)throw Error("Generator is already running");if(o===y){if("throw"===i)throw a;return{value:t,done:!0}}for(r.method=i,r.arg=a;;){var s=r.delegate;if(s){var c=A(s,r);if(c){if(c===m)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===f)throw o=y,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=d;var u=h(e,n,r);if("normal"===u.type){if(o=r.done?y:p,u.arg===m)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=y,r.method="throw",r.arg=u.arg)}}}function A(e,n){var r=n.method,o=e.iterator[r];if(o===t)return n.delegate=null,"throw"===r&&e.iterator.return&&(n.method="return",n.arg=t,A(e,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),m;var i=h(o,e.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,m;var a=i.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,m):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function C(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function P(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function I(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(C,this),this.reset(!0)}function z(e){if(e||""===e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}throw new TypeError(L(e)+" is not iterable")}return v.prototype=w,o(_,"constructor",{value:w,configurable:!0}),o(w,"constructor",{value:v,configurable:!0}),v.displayName=u(w,c,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===v||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,w):(t.__proto__=w,u(t,c,"GeneratorFunction")),t.prototype=Object.create(_),t},e.awrap=function(t){return{__await:t}},E(T.prototype),u(T.prototype,s,(function(){return this})),e.AsyncIterator=T,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new T(l(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},E(_),u(_,c,"Generator"),u(_,a,(function(){return this})),u(_,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},e.values=z,I.prototype={constructor:I,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(P),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return s.type="throw",s.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var c=r.call(a,"catchLoc"),u=r.call(a,"finallyLoc");if(c&&u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,m):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),m},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),P(n),m}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;P(n)}return o}}throw Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:z(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),m}},e}function T(t,e,n,r,o,i,a){try{var s=t[i](a),c=s.value}catch(t){return void n(t)}s.done?e(c):Promise.resolve(c).then(r,o)}function O(t,e){var n=document.createElement("div");n.className="dropdown";var r=document.createElement("button");r.className="dropdown-button",r.innerHTML='<i class="fas fa-chevron-down"></i>',n.appendChild(r);var o=document.createElement("div");o.className="dropdown-content",E.forEach((function(n){var r=document.createElement("a");r.href="#",r.textContent=n.feature,r.addEventListener("click",function(){var r,i=(r=S().mark((function r(i){return S().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return i.preventDefault(),r.next=3,chrome.storage.local.set({selectedFeature:n},(function(){console.log("Selected Feature set to: ".concat(n.feature))}));case 3:e(n),o.style.display="none",t.querySelector("h2").textContent=n.feature;case 6:case"end":return r.stop()}}),r)})),function(){var t=this,e=arguments;return new Promise((function(n,o){var i=r.apply(t,e);function a(t){T(i,n,o,a,s,"next",t)}function s(t){T(i,n,o,a,s,"throw",t)}a(void 0)}))});return function(t){return i.apply(this,arguments)}}()),o.appendChild(r)})),n.appendChild(o),t.appendChild(n),r.addEventListener("click",(function(){o.style.display="block"===o.style.display?"none":"block"})),window.addEventListener("click",(function(t){n.contains(t.target)||(o.style.display="none")}))}function A(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:4e3;t=(t=t.replace(/[\x00-\x1F\x7F]/g,"")).normalize("NFC");try{decodeURIComponent(escape(t))}catch(e){t=t.replace(/�/g,"")}if((t=(t=(t=(t=t.replace(/[\\`{}\[\]()<>;|&]/g,"\\$&")).replace(/(.)\1{3,}/g,"$1$1$1")).replace(/[^a-zA-Z0-9 .,!?'-]/g,"")).replace(/\s+/g," ").trim()).length>e)throw new Error("Input exceeds maximum allowed length of ".concat(e," characters."));return t}function C(t){for(var e=t.length-1;e>0;e--){var n=Math.floor(Math.random()*(e+1)),r=[t[n],t[e]];t[e]=r[0],t[n]=r[1]}return t}function P(t){return P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},P(t)}function I(){I=function(){return e};var t,e={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(t,e,n){t[e]=n.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",s=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag";function u(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,n){return t[e]=n}}function l(t,e,n,r){var i=e&&e.prototype instanceof g?e:g,a=Object.create(i.prototype),s=new C(r||[]);return o(a,"_invoke",{value:S(t,n,s)}),a}function h(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}e.wrap=l;var f="suspendedStart",p="suspendedYield",d="executing",y="completed",m={};function g(){}function v(){}function w(){}var b={};u(b,a,(function(){return this}));var x=Object.getPrototypeOf,k=x&&x(x(z([])));k&&k!==n&&r.call(k,a)&&(b=k);var _=w.prototype=g.prototype=Object.create(b);function E(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function L(t,e){function n(o,i,a,s){var c=h(t[o],t,i);if("throw"!==c.type){var u=c.arg,l=u.value;return l&&"object"==P(l)&&r.call(l,"__await")?e.resolve(l.__await).then((function(t){n("next",t,a,s)}),(function(t){n("throw",t,a,s)})):e.resolve(l).then((function(t){u.value=t,a(u)}),(function(t){return n("throw",t,a,s)}))}s(c.arg)}var i;o(this,"_invoke",{value:function(t,r){function o(){return new e((function(e,o){n(t,r,e,o)}))}return i=i?i.then(o,o):o()}})}function S(e,n,r){var o=f;return function(i,a){if(o===d)throw Error("Generator is already running");if(o===y){if("throw"===i)throw a;return{value:t,done:!0}}for(r.method=i,r.arg=a;;){var s=r.delegate;if(s){var c=T(s,r);if(c){if(c===m)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===f)throw o=y,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=d;var u=h(e,n,r);if("normal"===u.type){if(o=r.done?y:p,u.arg===m)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=y,r.method="throw",r.arg=u.arg)}}}function T(e,n){var r=n.method,o=e.iterator[r];if(o===t)return n.delegate=null,"throw"===r&&e.iterator.return&&(n.method="return",n.arg=t,T(e,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),m;var i=h(o,e.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,m;var a=i.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,m):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function O(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function A(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function C(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(O,this),this.reset(!0)}function z(e){if(e||""===e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}throw new TypeError(P(e)+" is not iterable")}return v.prototype=w,o(_,"constructor",{value:w,configurable:!0}),o(w,"constructor",{value:v,configurable:!0}),v.displayName=u(w,c,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===v||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,w):(t.__proto__=w,u(t,c,"GeneratorFunction")),t.prototype=Object.create(_),t},e.awrap=function(t){return{__await:t}},E(L.prototype),u(L.prototype,s,(function(){return this})),e.AsyncIterator=L,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new L(l(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},E(_),u(_,c,"Generator"),u(_,a,(function(){return this})),u(_,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},e.values=z,C.prototype={constructor:C,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(A),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return s.type="throw",s.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var c=r.call(a,"catchLoc"),u=r.call(a,"finallyLoc");if(c&&u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,m):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),m},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),A(n),m}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;A(n)}return o}}throw Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:z(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),m}},e}function z(t,e,n,r,o,i,a){try{var s=t[i](a),c=s.value}catch(t){return void n(t)}s.done?e(c):Promise.resolve(c).then(r,o)}function j(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(t){z(i,r,o,a,s,"next",t)}function s(t){z(i,r,o,a,s,"throw",t)}a(void 0)}))}}function N(t){return new F(t,0)}function $(t){var e,n;function r(e,n){try{var i=t[e](n),a=i.value,s=a instanceof F;Promise.resolve(s?a.v:a).then((function(n){if(s){var c="return"===e?"return":"next";if(!a.k||n.done)return r(c,n);n=t[c](n).value}o(i.done?"return":"normal",n)}),(function(t){r("throw",t)}))}catch(t){o("throw",t)}}function o(t,o){switch(t){case"return":e.resolve({value:o,done:!0});break;case"throw":e.reject(o);break;default:e.resolve({value:o,done:!1})}(e=e.next)?r(e.key,e.arg):n=null}this._invoke=function(t,o){return new Promise((function(i,a){var s={key:t,arg:o,resolve:i,reject:a,next:null};n?n=n.next=s:(e=n=s,r(t,o))}))},"function"!=typeof t.return&&(this.return=void 0)}function F(t,e){this.v=t,this.k=e}function R(t){var e,n,r,o=2;for("undefined"!=typeof Symbol&&(n=Symbol.asyncIterator,r=Symbol.iterator);o--;){if(n&&null!=(e=t[n]))return e.call(t);if(r&&null!=(e=t[r]))return new M(e.call(t));n="@@asyncIterator",r="@@iterator"}throw new TypeError("Object is not async iterable")}function M(t){function e(t){if(Object(t)!==t)return Promise.reject(new TypeError(t+" is not an object."));var e=t.done;return Promise.resolve(t.value).then((function(t){return{value:t,done:e}}))}return M=function(t){this.s=t,this.n=t.next},M.prototype={s:null,n:null,next:function(){return e(this.n.apply(this.s,arguments))},return:function(t){var n=this.s.return;return void 0===n?Promise.resolve({value:t,done:!0}):e(n.apply(this.s,arguments))},throw:function(t){var n=this.s.return;return void 0===n?Promise.reject(t):e(n.apply(this.s,arguments))}},new M(t)}function D(){return G.apply(this,arguments)}function G(){return(G=j(I().mark((function t(){var e,n,r;return I().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e={sharedContext:"This is a list of titles visited by the user",type:"key-points",format:"markdown",length:"medium"},t.next=3,self.ai.summarizer.capabilities();case 3:if("no"!==(n=t.sent.available)){t.next=6;break}throw new Error("Summarizer API is not available");case 6:if("readily"!==n){t.next=13;break}return t.next=9,self.ai.summarizer.create(e);case 9:return r=t.sent,t.abrupt("return",r);case 13:return t.next=15,self.ai.summarizer.create(e);case 15:return(r=t.sent).addEventListener("downloadprogress",(function(t){console.log(t.loaded,t.total)})),t.next=19,r.ready;case 19:return t.abrupt("return",r);case 20:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function B(t,e,n){return q.apply(this,arguments)}function q(){return q=j(I().mark((function t(e,n,r){var o,i,a,s,c;return I().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(t.prev=0,o=function(){return i.apply(this,arguments)},i=function(){var t;return t=I().mark((function t(){var e,n,o,i,s,u;return I().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:t.prev=0,e=!1,n=!1,t.prev=3,i=R(c);case 5:return t.next=7,N(i.next());case 7:if(!(e=!(s=t.sent).done)){t.next=14;break}return u=s.value,t.next=11,u;case 11:e=!1,t.next=5;break;case 14:t.next=20;break;case 16:t.prev=16,t.t0=t.catch(3),n=!0,o=t.t0;case 20:if(t.prev=20,t.prev=21,!e||null==i.return){t.next=25;break}return t.next=25,N(i.return());case 25:if(t.prev=25,!n){t.next=28;break}throw o;case 28:return t.finish(25);case 29:return t.finish(20);case 30:return t.prev=30,console.log("Stream consumption complete. Destroying summarizer."),t.next=34,N(a.destroy());case 34:return r.removeEventListener("abort",(function(){})),t.finish(30);case 36:case"end":return t.stop()}}),t,null,[[0,,30,36],[3,16,20,30],[21,,25,29]])})),i=function(){return new $(t.apply(this,arguments))},i.apply(this,arguments)},!r.aborted){t.next=5;break}throw new DOMException("Operation aborted","AbortError");case 5:return t.next=7,D();case 7:return a=t.sent,s=new Promise(function(){var t=j(I().mark((function t(o,i){var s,c;return I().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return s=function(){console.log("Abort signal received. Destroying summarizer."),a.destroy(),i(new DOMException("Operation aborted","AbortError"))},r.addEventListener("abort",s),t.prev=2,t.next=5,a.summarizeStreaming(e,{context:n});case 5:c=t.sent,o(c),t.next=14;break;case 9:return t.prev=9,t.t0=t.catch(2),t.next=13,a.destroy();case 13:i(t.t0);case 14:case"end":return t.stop()}}),t,null,[[2,9]])})));return function(e,n){return t.apply(this,arguments)}}()),t.next=11,s;case 11:return c=t.sent,t.abrupt("return",o());case 15:throw t.prev=15,t.t0=t.catch(0),console.log("Error during summarization:",t.t0),t.t0;case 19:case"end":return t.stop()}}),t,null,[[0,15]])}))),q.apply(this,arguments)}function W(t){return W="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},W(t)}function H(){H=function(){return e};var t,e={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(t,e,n){t[e]=n.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",s=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag";function u(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,n){return t[e]=n}}function l(t,e,n,r){var i=e&&e.prototype instanceof g?e:g,a=Object.create(i.prototype),s=new C(r||[]);return o(a,"_invoke",{value:S(t,n,s)}),a}function h(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}e.wrap=l;var f="suspendedStart",p="suspendedYield",d="executing",y="completed",m={};function g(){}function v(){}function w(){}var b={};u(b,a,(function(){return this}));var x=Object.getPrototypeOf,k=x&&x(x(P([])));k&&k!==n&&r.call(k,a)&&(b=k);var _=w.prototype=g.prototype=Object.create(b);function E(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function L(t,e){function n(o,i,a,s){var c=h(t[o],t,i);if("throw"!==c.type){var u=c.arg,l=u.value;return l&&"object"==W(l)&&r.call(l,"__await")?e.resolve(l.__await).then((function(t){n("next",t,a,s)}),(function(t){n("throw",t,a,s)})):e.resolve(l).then((function(t){u.value=t,a(u)}),(function(t){return n("throw",t,a,s)}))}s(c.arg)}var i;o(this,"_invoke",{value:function(t,r){function o(){return new e((function(e,o){n(t,r,e,o)}))}return i=i?i.then(o,o):o()}})}function S(e,n,r){var o=f;return function(i,a){if(o===d)throw Error("Generator is already running");if(o===y){if("throw"===i)throw a;return{value:t,done:!0}}for(r.method=i,r.arg=a;;){var s=r.delegate;if(s){var c=T(s,r);if(c){if(c===m)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===f)throw o=y,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=d;var u=h(e,n,r);if("normal"===u.type){if(o=r.done?y:p,u.arg===m)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=y,r.method="throw",r.arg=u.arg)}}}function T(e,n){var r=n.method,o=e.iterator[r];if(o===t)return n.delegate=null,"throw"===r&&e.iterator.return&&(n.method="return",n.arg=t,T(e,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),m;var i=h(o,e.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,m;var a=i.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,m):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function O(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function A(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function C(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(O,this),this.reset(!0)}function P(e){if(e||""===e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}throw new TypeError(W(e)+" is not iterable")}return v.prototype=w,o(_,"constructor",{value:w,configurable:!0}),o(w,"constructor",{value:v,configurable:!0}),v.displayName=u(w,c,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===v||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,w):(t.__proto__=w,u(t,c,"GeneratorFunction")),t.prototype=Object.create(_),t},e.awrap=function(t){return{__await:t}},E(L.prototype),u(L.prototype,s,(function(){return this})),e.AsyncIterator=L,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new L(l(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},E(_),u(_,c,"Generator"),u(_,a,(function(){return this})),u(_,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},e.values=P,C.prototype={constructor:C,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(A),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return s.type="throw",s.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var c=r.call(a,"catchLoc"),u=r.call(a,"finallyLoc");if(c&&u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,m):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),m},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),A(n),m}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;A(n)}return o}}throw Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:P(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),m}},e}function Y(t,e,n,r,o,i,a){try{var s=t[i](a),c=s.value}catch(t){return void n(t)}s.done?e(c):Promise.resolve(c).then(r,o)}function Z(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(t){Y(i,r,o,a,s,"next",t)}function s(t){Y(i,r,o,a,s,"throw",t)}a(void 0)}))}}function X(t){return new U(t,0)}function Q(t){var e,n;function r(e,n){try{var i=t[e](n),a=i.value,s=a instanceof U;Promise.resolve(s?a.v:a).then((function(n){if(s){var c="return"===e?"return":"next";if(!a.k||n.done)return r(c,n);n=t[c](n).value}o(i.done?"return":"normal",n)}),(function(t){r("throw",t)}))}catch(t){o("throw",t)}}function o(t,o){switch(t){case"return":e.resolve({value:o,done:!0});break;case"throw":e.reject(o);break;default:e.resolve({value:o,done:!1})}(e=e.next)?r(e.key,e.arg):n=null}this._invoke=function(t,o){return new Promise((function(i,a){var s={key:t,arg:o,resolve:i,reject:a,next:null};n?n=n.next=s:(e=n=s,r(t,o))}))},"function"!=typeof t.return&&(this.return=void 0)}function U(t,e){this.v=t,this.k=e}function V(t){var e,n,r,o=2;for("undefined"!=typeof Symbol&&(n=Symbol.asyncIterator,r=Symbol.iterator);o--;){if(n&&null!=(e=t[n]))return e.call(t);if(r&&null!=(e=t[r]))return new J(e.call(t));n="@@asyncIterator",r="@@iterator"}throw new TypeError("Object is not async iterable")}function J(t){function e(t){if(Object(t)!==t)return Promise.reject(new TypeError(t+" is not an object."));var e=t.done;return Promise.resolve(t.value).then((function(t){return{value:t,done:e}}))}return J=function(t){this.s=t,this.n=t.next},J.prototype={s:null,n:null,next:function(){return e(this.n.apply(this.s,arguments))},return:function(t){var n=this.s.return;return void 0===n?Promise.resolve({value:t,done:!0}):e(n.apply(this.s,arguments))},throw:function(t){var n=this.s.return;return void 0===n?Promise.reject(t):e(n.apply(this.s,arguments))}},new J(t)}function K(){return tt.apply(this,arguments)}function tt(){return(tt=Z(H().mark((function t(){var e,n;return H().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e={sharedContext:"This is a list of titles visited by the user",tone:"funny"},t.next=3,ai.writer.create(e);case 3:return n=t.sent,t.abrupt("return",n);case 5:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function et(t,e,n){return nt.apply(this,arguments)}function nt(){return nt=Z(H().mark((function t(e,n,r){var o,i,a,s,c;return H().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(t.prev=0,o=function(){return i.apply(this,arguments)},i=function(){var t;return t=H().mark((function t(){var e,n,o,i,s,u;return H().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:t.prev=0,e=!1,n=!1,t.prev=3,i=V(c);case 5:return t.next=7,X(i.next());case 7:if(!(e=!(s=t.sent).done)){t.next=14;break}return u=s.value,t.next=11,u;case 11:e=!1,t.next=5;break;case 14:t.next=20;break;case 16:t.prev=16,t.t0=t.catch(3),n=!0,o=t.t0;case 20:if(t.prev=20,t.prev=21,!e||null==i.return){t.next=25;break}return t.next=25,X(i.return());case 25:if(t.prev=25,!n){t.next=28;break}throw o;case 28:return t.finish(25);case 29:return t.finish(20);case 30:return t.prev=30,console.log("Stream consumption complete. Destroying writer."),t.next=34,X(a.destroy());case 34:return r.removeEventListener("abort",(function(){})),t.finish(30);case 36:case"end":return t.stop()}}),t,null,[[0,,30,36],[3,16,20,30],[21,,25,29]])})),i=function(){return new Q(t.apply(this,arguments))},i.apply(this,arguments)},!r.aborted){t.next=5;break}throw new DOMException("Operation aborted","AbortError");case 5:return t.next=7,K();case 7:return a=t.sent,s=new Promise(function(){var t=Z(H().mark((function t(o,i){var s,c;return H().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return s=function(){console.log("Abort signal received. Destroying writer."),a.destroy(),i(new DOMException("Operation aborted","AbortError"))},r.addEventListener("abort",s),t.prev=2,t.next=5,a.writeStreaming(e,{context:n});case 5:c=t.sent,o(c),t.next=14;break;case 9:return t.prev=9,t.t0=t.catch(2),t.next=13,a.destroy();case 13:i(t.t0);case 14:case"end":return t.stop()}}),t,null,[[2,9]])})));return function(e,n){return t.apply(this,arguments)}}()),t.next=11,s;case 11:return c=t.sent,t.abrupt("return",o());case 15:throw t.prev=15,t.t0=t.catch(0),console.log("Error during summarization:",t.t0),t.t0;case 19:case"end":return t.stop()}}),t,null,[[0,15]])}))),nt.apply(this,arguments)}function rt(t){return rt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},rt(t)}function ot(){ot=function(){return e};var t,e={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(t,e,n){t[e]=n.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",s=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag";function u(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,n){return t[e]=n}}function l(t,e,n,r){var i=e&&e.prototype instanceof g?e:g,a=Object.create(i.prototype),s=new C(r||[]);return o(a,"_invoke",{value:S(t,n,s)}),a}function h(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}e.wrap=l;var f="suspendedStart",p="suspendedYield",d="executing",y="completed",m={};function g(){}function v(){}function w(){}var b={};u(b,a,(function(){return this}));var x=Object.getPrototypeOf,k=x&&x(x(P([])));k&&k!==n&&r.call(k,a)&&(b=k);var _=w.prototype=g.prototype=Object.create(b);function E(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function L(t,e){function n(o,i,a,s){var c=h(t[o],t,i);if("throw"!==c.type){var u=c.arg,l=u.value;return l&&"object"==rt(l)&&r.call(l,"__await")?e.resolve(l.__await).then((function(t){n("next",t,a,s)}),(function(t){n("throw",t,a,s)})):e.resolve(l).then((function(t){u.value=t,a(u)}),(function(t){return n("throw",t,a,s)}))}s(c.arg)}var i;o(this,"_invoke",{value:function(t,r){function o(){return new e((function(e,o){n(t,r,e,o)}))}return i=i?i.then(o,o):o()}})}function S(e,n,r){var o=f;return function(i,a){if(o===d)throw Error("Generator is already running");if(o===y){if("throw"===i)throw a;return{value:t,done:!0}}for(r.method=i,r.arg=a;;){var s=r.delegate;if(s){var c=T(s,r);if(c){if(c===m)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===f)throw o=y,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=d;var u=h(e,n,r);if("normal"===u.type){if(o=r.done?y:p,u.arg===m)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=y,r.method="throw",r.arg=u.arg)}}}function T(e,n){var r=n.method,o=e.iterator[r];if(o===t)return n.delegate=null,"throw"===r&&e.iterator.return&&(n.method="return",n.arg=t,T(e,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),m;var i=h(o,e.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,m;var a=i.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,m):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function O(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function A(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function C(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(O,this),this.reset(!0)}function P(e){if(e||""===e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}throw new TypeError(rt(e)+" is not iterable")}return v.prototype=w,o(_,"constructor",{value:w,configurable:!0}),o(w,"constructor",{value:v,configurable:!0}),v.displayName=u(w,c,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===v||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,w):(t.__proto__=w,u(t,c,"GeneratorFunction")),t.prototype=Object.create(_),t},e.awrap=function(t){return{__await:t}},E(L.prototype),u(L.prototype,s,(function(){return this})),e.AsyncIterator=L,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new L(l(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},E(_),u(_,c,"Generator"),u(_,a,(function(){return this})),u(_,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},e.values=P,C.prototype={constructor:C,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(A),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return s.type="throw",s.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var c=r.call(a,"catchLoc"),u=r.call(a,"finallyLoc");if(c&&u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,m):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),m},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),A(n),m}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;A(n)}return o}}throw Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:P(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),m}},e}function it(t,e,n,r,o,i,a){try{var s=t[i](a),c=s.value}catch(t){return void n(t)}s.done?e(c):Promise.resolve(c).then(r,o)}function at(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(t){it(i,r,o,a,s,"next",t)}function s(t){it(i,r,o,a,s,"throw",t)}a(void 0)}))}}function st(t){return new ut(t,0)}function ct(t){var e,n;function r(e,n){try{var i=t[e](n),a=i.value,s=a instanceof ut;Promise.resolve(s?a.v:a).then((function(n){if(s){var c="return"===e?"return":"next";if(!a.k||n.done)return r(c,n);n=t[c](n).value}o(i.done?"return":"normal",n)}),(function(t){r("throw",t)}))}catch(t){o("throw",t)}}function o(t,o){switch(t){case"return":e.resolve({value:o,done:!0});break;case"throw":e.reject(o);break;default:e.resolve({value:o,done:!1})}(e=e.next)?r(e.key,e.arg):n=null}this._invoke=function(t,o){return new Promise((function(i,a){var s={key:t,arg:o,resolve:i,reject:a,next:null};n?n=n.next=s:(e=n=s,r(t,o))}))},"function"!=typeof t.return&&(this.return=void 0)}function ut(t,e){this.v=t,this.k=e}function lt(t){var e,n,r,o=2;for("undefined"!=typeof Symbol&&(n=Symbol.asyncIterator,r=Symbol.iterator);o--;){if(n&&null!=(e=t[n]))return e.call(t);if(r&&null!=(e=t[r]))return new ht(e.call(t));n="@@asyncIterator",r="@@iterator"}throw new TypeError("Object is not async iterable")}function ht(t){function e(t){if(Object(t)!==t)return Promise.reject(new TypeError(t+" is not an object."));var e=t.done;return Promise.resolve(t.value).then((function(t){return{value:t,done:e}}))}return ht=function(t){this.s=t,this.n=t.next},ht.prototype={s:null,n:null,next:function(){return e(this.n.apply(this.s,arguments))},return:function(t){var n=this.s.return;return void 0===n?Promise.resolve({value:t,done:!0}):e(n.apply(this.s,arguments))},throw:function(t){var n=this.s.return;return void 0===n?Promise.reject(t):e(n.apply(this.s,arguments))}},new ht(t)}function ft(){return pt.apply(this,arguments)}function pt(){return(pt=at(ot().mark((function t(){var e,n,r;return ot().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,ai.languageModel.capabilities();case 2:if(e=t.sent,n=e.available,e.defaultTemperature,e.defaultTopK,e.maxTopK,"no"===n){t.next=14;break}return t.next=10,ai.languageModel.create();case 10:return r=t.sent,t.abrupt("return",r);case 14:throw new Error("Prompt model is not available");case 15:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function dt(t,e,n){return yt.apply(this,arguments)}function yt(){return yt=at(ot().mark((function t(e,n,r){var o,i,a,s,c;return ot().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(t.prev=0,o=function(){return i.apply(this,arguments)},i=function(){var t;return t=ot().mark((function t(){var e,n,o,i,s,u;return ot().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:t.prev=0,e=!1,n=!1,t.prev=3,i=lt(c);case 5:return t.next=7,st(i.next());case 7:if(!(e=!(s=t.sent).done)){t.next=14;break}return u=s.value,t.next=11,u;case 11:e=!1,t.next=5;break;case 14:t.next=20;break;case 16:t.prev=16,t.t0=t.catch(3),n=!0,o=t.t0;case 20:if(t.prev=20,t.prev=21,!e||null==i.return){t.next=25;break}return t.next=25,st(i.return());case 25:if(t.prev=25,!n){t.next=28;break}throw o;case 28:return t.finish(25);case 29:return t.finish(20);case 30:return t.prev=30,console.log("Stream consumption complete. Destroying prompt session."),t.next=34,st(a.destroy());case 34:return r.removeEventListener("abort",(function(){})),t.finish(30);case 36:case"end":return t.stop()}}),t,null,[[0,,30,36],[3,16,20,30],[21,,25,29]])})),i=function(){return new ct(t.apply(this,arguments))},i.apply(this,arguments)},!r.aborted){t.next=5;break}throw new DOMException("Operation aborted","AbortError");case 5:return t.next=7,ft();case 7:return a=t.sent,s=new Promise(function(){var t=at(ot().mark((function t(o,i){var s,c;return ot().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return s=function(){console.log("Abort signal received. Destroying prompt session."),a.destroy(),i(new DOMException("Operation aborted","AbortError"))},r.addEventListener("abort",s),t.prev=2,t.next=5,a.promptStreaming(e,{context:n});case 5:c=t.sent,o(c),t.next=14;break;case 9:return t.prev=9,t.t0=t.catch(2),t.next=13,a.destroy();case 13:i(t.t0);case 14:case"end":return t.stop()}}),t,null,[[2,9]])})));return function(e,n){return t.apply(this,arguments)}}()),t.next=11,s;case 11:return c=t.sent,t.abrupt("return",o());case 15:throw t.prev=15,t.t0=t.catch(0),console.log("Error during summarization:",t.t0),t.t0;case 19:case"end":return t.stop()}}),t,null,[[0,15]])}))),yt.apply(this,arguments)}$.prototype["function"==typeof Symbol&&Symbol.asyncIterator||"@@asyncIterator"]=function(){return this},$.prototype.next=function(t){return this._invoke("next",t)},$.prototype.throw=function(t){return this._invoke("throw",t)},$.prototype.return=function(t){return this._invoke("return",t)},Q.prototype["function"==typeof Symbol&&Symbol.asyncIterator||"@@asyncIterator"]=function(){return this},Q.prototype.next=function(t){return this._invoke("next",t)},Q.prototype.throw=function(t){return this._invoke("throw",t)},Q.prototype.return=function(t){return this._invoke("return",t)},ct.prototype["function"==typeof Symbol&&Symbol.asyncIterator||"@@asyncIterator"]=function(){return this},ct.prototype.next=function(t){return this._invoke("next",t)},ct.prototype.throw=function(t){return this._invoke("throw",t)},ct.prototype.return=function(t){return this._invoke("return",t)};let mt={async:!1,breaks:!1,extensions:null,gfm:!0,hooks:null,pedantic:!1,renderer:null,silent:!1,tokenizer:null,walkTokens:null};function gt(t){mt=t}const vt={exec:()=>null};function wt(t,e=""){let n="string"==typeof t?t:t.source;const r={replace:(t,e)=>{let o="string"==typeof e?e:e.source;return o=o.replace(bt.caret,"$1"),n=n.replace(t,o),r},getRegex:()=>new RegExp(n,e)};return r}const bt={codeRemoveIndent:/^(?: {1,4}| {0,3}\t)/gm,outputLinkReplace:/\\([\[\]])/g,indentCodeCompensation:/^(\s+)(?:```)/,beginningSpace:/^\s+/,endingHash:/#$/,startingSpaceChar:/^ /,endingSpaceChar:/ $/,nonSpaceChar:/[^ ]/,newLineCharGlobal:/\n/g,tabCharGlobal:/\t/g,multipleSpaceGlobal:/\s+/g,blankLine:/^[ \t]*$/,doubleBlankLine:/\n[ \t]*\n[ \t]*$/,blockquoteStart:/^ {0,3}>/,blockquoteSetextReplace:/\n {0,3}((?:=+|-+) *)(?=\n|$)/g,blockquoteSetextReplace2:/^ {0,3}>[ \t]?/gm,listReplaceTabs:/^\t+/,listReplaceNesting:/^ {1,4}(?=( {4})*[^ ])/g,listIsTask:/^\[[ xX]\] /,listReplaceTask:/^\[[ xX]\] +/,anyLine:/\n.*\n/,hrefBrackets:/^<(.*)>$/,tableDelimiter:/[:|]/,tableAlignChars:/^\||\| *$/g,tableRowBlankLine:/\n[ \t]*$/,tableAlignRight:/^ *-+: *$/,tableAlignCenter:/^ *:-+: *$/,tableAlignLeft:/^ *:-+ *$/,startATag:/^<a /i,endATag:/^<\/a>/i,startPreScriptTag:/^<(pre|code|kbd|script)(\s|>)/i,endPreScriptTag:/^<\/(pre|code|kbd|script)(\s|>)/i,startAngleBracket:/^</,endAngleBracket:/>$/,pedanticHrefTitle:/^([^'"]*[^\s])\s+(['"])(.*)\2/,unicodeAlphaNumeric:/[\p{L}\p{N}]/u,escapeTest:/[&<>"']/,escapeReplace:/[&<>"']/g,escapeTestNoEncode:/[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/,escapeReplaceNoEncode:/[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/g,unescapeTest:/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi,caret:/(^|[^\[])\^/g,percentDecode:/%25/g,findPipe:/\|/g,splitPipe:/ \|/,slashPipe:/\\\|/g,carriageReturn:/\r\n|\r/g,spaceLine:/^ +$/gm,notSpaceStart:/^\S*/,endingNewline:/\n$/,listItemRegex:t=>new RegExp(`^( {0,3}${t})((?:[\t ][^\\n]*)?(?:\\n|$))`),nextBulletRegex:t=>new RegExp(`^ {0,${Math.min(3,t-1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ \t][^\\n]*)?(?:\\n|$))`),hrRegex:t=>new RegExp(`^ {0,${Math.min(3,t-1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`),fencesBeginRegex:t=>new RegExp(`^ {0,${Math.min(3,t-1)}}(?:\`\`\`|~~~)`),headingBeginRegex:t=>new RegExp(`^ {0,${Math.min(3,t-1)}}#`),htmlBeginRegex:t=>new RegExp(`^ {0,${Math.min(3,t-1)}}<(?:[a-z].*>|!--)`,"i")},xt=/^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/,kt=/(?:[*+-]|\d{1,9}[.)])/,_t=wt(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\n(?!\s*?\n|bull |blockCode|fences|blockquote|heading|html))+?)\n {0,3}(=+|-+) *(?:\n+|$)/).replace(/bull/g,kt).replace(/blockCode/g,/(?: {4}| {0,3}\t)/).replace(/fences/g,/ {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g,/ {0,3}>/).replace(/heading/g,/ {0,3}#{1,6}/).replace(/html/g,/ {0,3}<[^\n>]+>\n/).getRegex(),Et=/^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,Lt=/(?!\s*\])(?:\\.|[^\[\]\\])+/,St=wt(/^ {0,3}\[(label)\]: *(?:\n[ \t]*)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n[ \t]*)?| *\n[ \t]*)(title))? *(?:\n+|$)/).replace("label",Lt).replace("title",/(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/).getRegex(),Tt=wt(/^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/).replace(/bull/g,kt).getRegex(),Ot="address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul",At=/<!--(?:-?>|[\s\S]*?(?:-->|$))/,Ct=wt("^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n[ \t]*)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n[ \t]*)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n[ \t]*)+\\n|$))","i").replace("comment",At).replace("tag",Ot).replace("attribute",/ +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex(),Pt=wt(Et).replace("hr",xt).replace("heading"," {0,3}#{1,6}(?:\\s|$)").replace("|lheading","").replace("|table","").replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",Ot).getRegex(),It={blockquote:wt(/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/).replace("paragraph",Pt).getRegex(),code:/^((?: {4}| {0,3}\t)[^\n]+(?:\n(?:[ \t]*(?:\n|$))*)?)+/,def:St,fences:/^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/,heading:/^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,hr:xt,html:Ct,lheading:_t,list:Tt,newline:/^(?:[ \t]*(?:\n|$))+/,paragraph:Pt,table:vt,text:/^[^\n]+/},zt=wt("^ *([^\\n ].*)\\n {0,3}((?:\\| *)?:?-+:? *(?:\\| *:?-+:? *)*(?:\\| *)?)(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)").replace("hr",xt).replace("heading"," {0,3}#{1,6}(?:\\s|$)").replace("blockquote"," {0,3}>").replace("code","(?: {4}| {0,3}\t)[^\\n]").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",Ot).getRegex(),jt={...It,table:zt,paragraph:wt(Et).replace("hr",xt).replace("heading"," {0,3}#{1,6}(?:\\s|$)").replace("|lheading","").replace("table",zt).replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",Ot).getRegex()},Nt={...It,html:wt("^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))").replace("comment",At).replace(/tag/g,"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,heading:/^(#{1,6})(.*)(?:\n+|$)/,fences:vt,lheading:/^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,paragraph:wt(Et).replace("hr",xt).replace("heading"," *#{1,6} *[^\n]").replace("lheading",_t).replace("|table","").replace("blockquote"," {0,3}>").replace("|fences","").replace("|list","").replace("|html","").replace("|tag","").getRegex()},$t=/^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,Ft=/^( {2,}|\\)\n(?!\s*$)/,Rt=/[\p{P}\p{S}]/u,Mt=/[\s\p{P}\p{S}]/u,Dt=/[^\s\p{P}\p{S}]/u,Gt=wt(/^((?![*_])punctSpace)/,"u").replace(/punctSpace/g,Mt).getRegex(),Bt=wt(/^(?:\*+(?:((?!\*)punct)|[^\s*]))|^_+(?:((?!_)punct)|([^\s_]))/,"u").replace(/punct/g,Rt).getRegex(),qt=wt("^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)punct(\\*+)(?=[\\s]|$)|notPunctSpace(\\*+)(?!\\*)(?=punctSpace|$)|(?!\\*)punctSpace(\\*+)(?=notPunctSpace)|[\\s](\\*+)(?!\\*)(?=punct)|(?!\\*)punct(\\*+)(?!\\*)(?=punct)|notPunctSpace(\\*+)(?=notPunctSpace)","gu").replace(/notPunctSpace/g,Dt).replace(/punctSpace/g,Mt).replace(/punct/g,Rt).getRegex(),Wt=wt("^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)punct(_+)(?=[\\s]|$)|notPunctSpace(_+)(?!_)(?=punctSpace|$)|(?!_)punctSpace(_+)(?=notPunctSpace)|[\\s](_+)(?!_)(?=punct)|(?!_)punct(_+)(?!_)(?=punct)","gu").replace(/notPunctSpace/g,Dt).replace(/punctSpace/g,Mt).replace(/punct/g,Rt).getRegex(),Ht=wt(/\\(punct)/,"gu").replace(/punct/g,Rt).getRegex(),Yt=wt(/^<(scheme:[^\s\x00-\x1f<>]*|email)>/).replace("scheme",/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace("email",/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex(),Zt=wt(At).replace("(?:--\x3e|$)","--\x3e").getRegex(),Xt=wt("^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>").replace("comment",Zt).replace("attribute",/\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/).getRegex(),Qt=/(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/,Ut=wt(/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/).replace("label",Qt).replace("href",/<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/).replace("title",/"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/).getRegex(),Vt=wt(/^!?\[(label)\]\[(ref)\]/).replace("label",Qt).replace("ref",Lt).getRegex(),Jt=wt(/^!?\[(ref)\](?:\[\])?/).replace("ref",Lt).getRegex(),Kt={_backpedal:vt,anyPunctuation:Ht,autolink:Yt,blockSkip:/\[[^[\]]*?\]\((?:\\.|[^\\\(\)]|\((?:\\.|[^\\\(\)])*\))*\)|`[^`]*?`|<[^<>]*?>/g,br:Ft,code:/^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,del:vt,emStrongLDelim:Bt,emStrongRDelimAst:qt,emStrongRDelimUnd:Wt,escape:$t,link:Ut,nolink:Jt,punctuation:Gt,reflink:Vt,reflinkSearch:wt("reflink|nolink(?!\\()","g").replace("reflink",Vt).replace("nolink",Jt).getRegex(),tag:Xt,text:/^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,url:vt},te={...Kt,link:wt(/^!?\[(label)\]\((.*?)\)/).replace("label",Qt).getRegex(),reflink:wt(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label",Qt).getRegex()},ee={...Kt,escape:wt($t).replace("])","~|])").getRegex(),url:wt(/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,"i").replace("email",/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(),_backpedal:/(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,del:/^(~~?)(?=[^\s~])((?:\\.|[^\\])*?(?:\\.|[^\s~\\]))\1(?=[^~]|$)/,text:/^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/},ne={...ee,br:wt(Ft).replace("{2,}","*").getRegex(),text:wt(ee.text).replace("\\b_","\\b_| {2,}\\n").replace(/\{2,\}/g,"*").getRegex()},re={normal:It,gfm:jt,pedantic:Nt},oe={normal:Kt,gfm:ee,breaks:ne,pedantic:te},ie={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},ae=t=>ie[t];function se(t,e){if(e){if(bt.escapeTest.test(t))return t.replace(bt.escapeReplace,ae)}else if(bt.escapeTestNoEncode.test(t))return t.replace(bt.escapeReplaceNoEncode,ae);return t}function ce(t){try{t=encodeURI(t).replace(bt.percentDecode,"%")}catch{return null}return t}function ue(t,e){const n=t.replace(bt.findPipe,((t,e,n)=>{let r=!1,o=e;for(;--o>=0&&"\\"===n[o];)r=!r;return r?"|":" |"})).split(bt.splitPipe);let r=0;if(n[0].trim()||n.shift(),n.length>0&&!n.at(-1)?.trim()&&n.pop(),e)if(n.length>e)n.splice(e);else for(;n.length<e;)n.push("");for(;r<n.length;r++)n[r]=n[r].trim().replace(bt.slashPipe,"|");return n}function le(t,e,n){const r=t.length;if(0===r)return"";let o=0;for(;o<r;){const i=t.charAt(r-o-1);if(i!==e||n){if(i===e||!n)break;o++}else o++}return t.slice(0,r-o)}function he(t,e,n,r,o){const i=e.href,a=e.title||null,s=t[1].replace(o.other.outputLinkReplace,"$1");if("!"!==t[0].charAt(0)){r.state.inLink=!0;const t={type:"link",raw:n,href:i,title:a,text:s,tokens:r.inlineTokens(s)};return r.state.inLink=!1,t}return{type:"image",raw:n,href:i,title:a,text:s}}class fe{options;rules;lexer;constructor(t){this.options=t||mt}space(t){const e=this.rules.block.newline.exec(t);if(e&&e[0].length>0)return{type:"space",raw:e[0]}}code(t){const e=this.rules.block.code.exec(t);if(e){const t=e[0].replace(this.rules.other.codeRemoveIndent,"");return{type:"code",raw:e[0],codeBlockStyle:"indented",text:this.options.pedantic?t:le(t,"\n")}}}fences(t){const e=this.rules.block.fences.exec(t);if(e){const t=e[0],n=function(t,e,n){const r=t.match(n.other.indentCodeCompensation);if(null===r)return e;const o=r[1];return e.split("\n").map((t=>{const e=t.match(n.other.beginningSpace);if(null===e)return t;const[r]=e;return r.length>=o.length?t.slice(o.length):t})).join("\n")}(t,e[3]||"",this.rules);return{type:"code",raw:t,lang:e[2]?e[2].trim().replace(this.rules.inline.anyPunctuation,"$1"):e[2],text:n}}}heading(t){const e=this.rules.block.heading.exec(t);if(e){let t=e[2].trim();if(this.rules.other.endingHash.test(t)){const e=le(t,"#");this.options.pedantic?t=e.trim():e&&!this.rules.other.endingSpaceChar.test(e)||(t=e.trim())}return{type:"heading",raw:e[0],depth:e[1].length,text:t,tokens:this.lexer.inline(t)}}}hr(t){const e=this.rules.block.hr.exec(t);if(e)return{type:"hr",raw:le(e[0],"\n")}}blockquote(t){const e=this.rules.block.blockquote.exec(t);if(e){let t=le(e[0],"\n").split("\n"),n="",r="";const o=[];for(;t.length>0;){let e=!1;const i=[];let a;for(a=0;a<t.length;a++)if(this.rules.other.blockquoteStart.test(t[a]))i.push(t[a]),e=!0;else{if(e)break;i.push(t[a])}t=t.slice(a);const s=i.join("\n"),c=s.replace(this.rules.other.blockquoteSetextReplace,"\n    $1").replace(this.rules.other.blockquoteSetextReplace2,"");n=n?`${n}\n${s}`:s,r=r?`${r}\n${c}`:c;const u=this.lexer.state.top;if(this.lexer.state.top=!0,this.lexer.blockTokens(c,o,!0),this.lexer.state.top=u,0===t.length)break;const l=o.at(-1);if("code"===l?.type)break;if("blockquote"===l?.type){const e=l,i=e.raw+"\n"+t.join("\n"),a=this.blockquote(i);o[o.length-1]=a,n=n.substring(0,n.length-e.raw.length)+a.raw,r=r.substring(0,r.length-e.text.length)+a.text;break}if("list"!==l?.type);else{const e=l,i=e.raw+"\n"+t.join("\n"),a=this.list(i);o[o.length-1]=a,n=n.substring(0,n.length-l.raw.length)+a.raw,r=r.substring(0,r.length-e.raw.length)+a.raw,t=i.substring(o.at(-1).raw.length).split("\n")}}return{type:"blockquote",raw:n,tokens:o,text:r}}}list(t){let e=this.rules.block.list.exec(t);if(e){let n=e[1].trim();const r=n.length>1,o={type:"list",raw:"",ordered:r,start:r?+n.slice(0,-1):"",loose:!1,items:[]};n=r?`\\d{1,9}\\${n.slice(-1)}`:`\\${n}`,this.options.pedantic&&(n=r?n:"[*+-]");const i=this.rules.other.listItemRegex(n);let a=!1;for(;t;){let n=!1,r="",s="";if(!(e=i.exec(t)))break;if(this.rules.block.hr.test(t))break;r=e[0],t=t.substring(r.length);let c=e[2].split("\n",1)[0].replace(this.rules.other.listReplaceTabs,(t=>" ".repeat(3*t.length))),u=t.split("\n",1)[0],l=!c.trim(),h=0;if(this.options.pedantic?(h=2,s=c.trimStart()):l?h=e[1].length+1:(h=e[2].search(this.rules.other.nonSpaceChar),h=h>4?1:h,s=c.slice(h),h+=e[1].length),l&&this.rules.other.blankLine.test(u)&&(r+=u+"\n",t=t.substring(u.length+1),n=!0),!n){const e=this.rules.other.nextBulletRegex(h),n=this.rules.other.hrRegex(h),o=this.rules.other.fencesBeginRegex(h),i=this.rules.other.headingBeginRegex(h),a=this.rules.other.htmlBeginRegex(h);for(;t;){const f=t.split("\n",1)[0];let p;if(u=f,this.options.pedantic?(u=u.replace(this.rules.other.listReplaceNesting,"  "),p=u):p=u.replace(this.rules.other.tabCharGlobal,"    "),o.test(u))break;if(i.test(u))break;if(a.test(u))break;if(e.test(u))break;if(n.test(u))break;if(p.search(this.rules.other.nonSpaceChar)>=h||!u.trim())s+="\n"+p.slice(h);else{if(l)break;if(c.replace(this.rules.other.tabCharGlobal,"    ").search(this.rules.other.nonSpaceChar)>=4)break;if(o.test(c))break;if(i.test(c))break;if(n.test(c))break;s+="\n"+u}l||u.trim()||(l=!0),r+=f+"\n",t=t.substring(f.length+1),c=p.slice(h)}}o.loose||(a?o.loose=!0:this.rules.other.doubleBlankLine.test(r)&&(a=!0));let f,p=null;this.options.gfm&&(p=this.rules.other.listIsTask.exec(s),p&&(f="[ ] "!==p[0],s=s.replace(this.rules.other.listReplaceTask,""))),o.items.push({type:"list_item",raw:r,task:!!p,checked:f,loose:!1,text:s,tokens:[]}),o.raw+=r}const s=o.items.at(-1);s&&(s.raw=s.raw.trimEnd(),s.text=s.text.trimEnd()),o.raw=o.raw.trimEnd();for(let t=0;t<o.items.length;t++)if(this.lexer.state.top=!1,o.items[t].tokens=this.lexer.blockTokens(o.items[t].text,[]),!o.loose){const e=o.items[t].tokens.filter((t=>"space"===t.type)),n=e.length>0&&e.some((t=>this.rules.other.anyLine.test(t.raw)));o.loose=n}if(o.loose)for(let t=0;t<o.items.length;t++)o.items[t].loose=!0;return o}}html(t){const e=this.rules.block.html.exec(t);if(e)return{type:"html",block:!0,raw:e[0],pre:"pre"===e[1]||"script"===e[1]||"style"===e[1],text:e[0]}}def(t){const e=this.rules.block.def.exec(t);if(e){const t=e[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal," "),n=e[2]?e[2].replace(this.rules.other.hrefBrackets,"$1").replace(this.rules.inline.anyPunctuation,"$1"):"",r=e[3]?e[3].substring(1,e[3].length-1).replace(this.rules.inline.anyPunctuation,"$1"):e[3];return{type:"def",tag:t,raw:e[0],href:n,title:r}}}table(t){const e=this.rules.block.table.exec(t);if(!e)return;if(!this.rules.other.tableDelimiter.test(e[2]))return;const n=ue(e[1]),r=e[2].replace(this.rules.other.tableAlignChars,"").split("|"),o=e[3]?.trim()?e[3].replace(this.rules.other.tableRowBlankLine,"").split("\n"):[],i={type:"table",raw:e[0],header:[],align:[],rows:[]};if(n.length===r.length){for(const t of r)this.rules.other.tableAlignRight.test(t)?i.align.push("right"):this.rules.other.tableAlignCenter.test(t)?i.align.push("center"):this.rules.other.tableAlignLeft.test(t)?i.align.push("left"):i.align.push(null);for(let t=0;t<n.length;t++)i.header.push({text:n[t],tokens:this.lexer.inline(n[t]),header:!0,align:i.align[t]});for(const t of o)i.rows.push(ue(t,i.header.length).map(((t,e)=>({text:t,tokens:this.lexer.inline(t),header:!1,align:i.align[e]}))));return i}}lheading(t){const e=this.rules.block.lheading.exec(t);if(e)return{type:"heading",raw:e[0],depth:"="===e[2].charAt(0)?1:2,text:e[1],tokens:this.lexer.inline(e[1])}}paragraph(t){const e=this.rules.block.paragraph.exec(t);if(e){const t="\n"===e[1].charAt(e[1].length-1)?e[1].slice(0,-1):e[1];return{type:"paragraph",raw:e[0],text:t,tokens:this.lexer.inline(t)}}}text(t){const e=this.rules.block.text.exec(t);if(e)return{type:"text",raw:e[0],text:e[0],tokens:this.lexer.inline(e[0])}}escape(t){const e=this.rules.inline.escape.exec(t);if(e)return{type:"escape",raw:e[0],text:e[1]}}tag(t){const e=this.rules.inline.tag.exec(t);if(e)return!this.lexer.state.inLink&&this.rules.other.startATag.test(e[0])?this.lexer.state.inLink=!0:this.lexer.state.inLink&&this.rules.other.endATag.test(e[0])&&(this.lexer.state.inLink=!1),!this.lexer.state.inRawBlock&&this.rules.other.startPreScriptTag.test(e[0])?this.lexer.state.inRawBlock=!0:this.lexer.state.inRawBlock&&this.rules.other.endPreScriptTag.test(e[0])&&(this.lexer.state.inRawBlock=!1),{type:"html",raw:e[0],inLink:this.lexer.state.inLink,inRawBlock:this.lexer.state.inRawBlock,block:!1,text:e[0]}}link(t){const e=this.rules.inline.link.exec(t);if(e){const t=e[2].trim();if(!this.options.pedantic&&this.rules.other.startAngleBracket.test(t)){if(!this.rules.other.endAngleBracket.test(t))return;const e=le(t.slice(0,-1),"\\");if((t.length-e.length)%2==0)return}else{const t=function(t,e){if(-1===t.indexOf(e[1]))return-1;let n=0;for(let r=0;r<t.length;r++)if("\\"===t[r])r++;else if(t[r]===e[0])n++;else if(t[r]===e[1]&&(n--,n<0))return r;return-1}(e[2],"()");if(t>-1){const n=(0===e[0].indexOf("!")?5:4)+e[1].length+t;e[2]=e[2].substring(0,t),e[0]=e[0].substring(0,n).trim(),e[3]=""}}let n=e[2],r="";if(this.options.pedantic){const t=this.rules.other.pedanticHrefTitle.exec(n);t&&(n=t[1],r=t[3])}else r=e[3]?e[3].slice(1,-1):"";return n=n.trim(),this.rules.other.startAngleBracket.test(n)&&(n=this.options.pedantic&&!this.rules.other.endAngleBracket.test(t)?n.slice(1):n.slice(1,-1)),he(e,{href:n?n.replace(this.rules.inline.anyPunctuation,"$1"):n,title:r?r.replace(this.rules.inline.anyPunctuation,"$1"):r},e[0],this.lexer,this.rules)}}reflink(t,e){let n;if((n=this.rules.inline.reflink.exec(t))||(n=this.rules.inline.nolink.exec(t))){const t=e[(n[2]||n[1]).replace(this.rules.other.multipleSpaceGlobal," ").toLowerCase()];if(!t){const t=n[0].charAt(0);return{type:"text",raw:t,text:t}}return he(n,t,n[0],this.lexer,this.rules)}}emStrong(t,e,n=""){let r=this.rules.inline.emStrongLDelim.exec(t);if(r&&(!r[3]||!n.match(this.rules.other.unicodeAlphaNumeric))&&(!r[1]&&!r[2]||!n||this.rules.inline.punctuation.exec(n))){const n=[...r[0]].length-1;let o,i,a=n,s=0;const c="*"===r[0][0]?this.rules.inline.emStrongRDelimAst:this.rules.inline.emStrongRDelimUnd;for(c.lastIndex=0,e=e.slice(-1*t.length+n);null!=(r=c.exec(e));){if(o=r[1]||r[2]||r[3]||r[4]||r[5]||r[6],!o)continue;if(i=[...o].length,r[3]||r[4]){a+=i;continue}if((r[5]||r[6])&&n%3&&!((n+i)%3)){s+=i;continue}if(a-=i,a>0)continue;i=Math.min(i,i+a+s);const e=[...r[0]][0].length,c=t.slice(0,n+r.index+e+i);if(Math.min(n,i)%2){const t=c.slice(1,-1);return{type:"em",raw:c,text:t,tokens:this.lexer.inlineTokens(t)}}const u=c.slice(2,-2);return{type:"strong",raw:c,text:u,tokens:this.lexer.inlineTokens(u)}}}}codespan(t){const e=this.rules.inline.code.exec(t);if(e){let t=e[2].replace(this.rules.other.newLineCharGlobal," ");const n=this.rules.other.nonSpaceChar.test(t),r=this.rules.other.startingSpaceChar.test(t)&&this.rules.other.endingSpaceChar.test(t);return n&&r&&(t=t.substring(1,t.length-1)),{type:"codespan",raw:e[0],text:t}}}br(t){const e=this.rules.inline.br.exec(t);if(e)return{type:"br",raw:e[0]}}del(t){const e=this.rules.inline.del.exec(t);if(e)return{type:"del",raw:e[0],text:e[2],tokens:this.lexer.inlineTokens(e[2])}}autolink(t){const e=this.rules.inline.autolink.exec(t);if(e){let t,n;return"@"===e[2]?(t=e[1],n="mailto:"+t):(t=e[1],n=t),{type:"link",raw:e[0],text:t,href:n,tokens:[{type:"text",raw:t,text:t}]}}}url(t){let e;if(e=this.rules.inline.url.exec(t)){let t,n;if("@"===e[2])t=e[0],n="mailto:"+t;else{let r;do{r=e[0],e[0]=this.rules.inline._backpedal.exec(e[0])?.[0]??""}while(r!==e[0]);t=e[0],n="www."===e[1]?"http://"+e[0]:e[0]}return{type:"link",raw:e[0],text:t,href:n,tokens:[{type:"text",raw:t,text:t}]}}}inlineText(t){const e=this.rules.inline.text.exec(t);if(e){const t=this.lexer.state.inRawBlock;return{type:"text",raw:e[0],text:e[0],escaped:t}}}}class pe{tokens;options;state;tokenizer;inlineQueue;constructor(t){this.tokens=[],this.tokens.links=Object.create(null),this.options=t||mt,this.options.tokenizer=this.options.tokenizer||new fe,this.tokenizer=this.options.tokenizer,this.tokenizer.options=this.options,this.tokenizer.lexer=this,this.inlineQueue=[],this.state={inLink:!1,inRawBlock:!1,top:!0};const e={other:bt,block:re.normal,inline:oe.normal};this.options.pedantic?(e.block=re.pedantic,e.inline=oe.pedantic):this.options.gfm&&(e.block=re.gfm,this.options.breaks?e.inline=oe.breaks:e.inline=oe.gfm),this.tokenizer.rules=e}static get rules(){return{block:re,inline:oe}}static lex(t,e){return new pe(e).lex(t)}static lexInline(t,e){return new pe(e).inlineTokens(t)}lex(t){t=t.replace(bt.carriageReturn,"\n"),this.blockTokens(t,this.tokens);for(let t=0;t<this.inlineQueue.length;t++){const e=this.inlineQueue[t];this.inlineTokens(e.src,e.tokens)}return this.inlineQueue=[],this.tokens}blockTokens(t,e=[],n=!1){for(this.options.pedantic&&(t=t.replace(bt.tabCharGlobal,"    ").replace(bt.spaceLine,""));t;){let r;if(this.options.extensions?.block?.some((n=>!!(r=n.call({lexer:this},t,e))&&(t=t.substring(r.raw.length),e.push(r),!0))))continue;if(r=this.tokenizer.space(t)){t=t.substring(r.raw.length);const n=e.at(-1);1===r.raw.length&&void 0!==n?n.raw+="\n":e.push(r);continue}if(r=this.tokenizer.code(t)){t=t.substring(r.raw.length);const n=e.at(-1);"paragraph"===n?.type||"text"===n?.type?(n.raw+="\n"+r.raw,n.text+="\n"+r.text,this.inlineQueue.at(-1).src=n.text):e.push(r);continue}if(r=this.tokenizer.fences(t)){t=t.substring(r.raw.length),e.push(r);continue}if(r=this.tokenizer.heading(t)){t=t.substring(r.raw.length),e.push(r);continue}if(r=this.tokenizer.hr(t)){t=t.substring(r.raw.length),e.push(r);continue}if(r=this.tokenizer.blockquote(t)){t=t.substring(r.raw.length),e.push(r);continue}if(r=this.tokenizer.list(t)){t=t.substring(r.raw.length),e.push(r);continue}if(r=this.tokenizer.html(t)){t=t.substring(r.raw.length),e.push(r);continue}if(r=this.tokenizer.def(t)){t=t.substring(r.raw.length);const n=e.at(-1);"paragraph"===n?.type||"text"===n?.type?(n.raw+="\n"+r.raw,n.text+="\n"+r.raw,this.inlineQueue.at(-1).src=n.text):this.tokens.links[r.tag]||(this.tokens.links[r.tag]={href:r.href,title:r.title});continue}if(r=this.tokenizer.table(t)){t=t.substring(r.raw.length),e.push(r);continue}if(r=this.tokenizer.lheading(t)){t=t.substring(r.raw.length),e.push(r);continue}let o=t;if(this.options.extensions?.startBlock){let e=1/0;const n=t.slice(1);let r;this.options.extensions.startBlock.forEach((t=>{r=t.call({lexer:this},n),"number"==typeof r&&r>=0&&(e=Math.min(e,r))})),e<1/0&&e>=0&&(o=t.substring(0,e+1))}if(this.state.top&&(r=this.tokenizer.paragraph(o))){const i=e.at(-1);n&&"paragraph"===i?.type?(i.raw+="\n"+r.raw,i.text+="\n"+r.text,this.inlineQueue.pop(),this.inlineQueue.at(-1).src=i.text):e.push(r),n=o.length!==t.length,t=t.substring(r.raw.length)}else if(r=this.tokenizer.text(t)){t=t.substring(r.raw.length);const n=e.at(-1);"text"===n?.type?(n.raw+="\n"+r.raw,n.text+="\n"+r.text,this.inlineQueue.pop(),this.inlineQueue.at(-1).src=n.text):e.push(r)}else if(t){const e="Infinite loop on byte: "+t.charCodeAt(0);if(this.options.silent){console.error(e);break}throw new Error(e)}}return this.state.top=!0,e}inline(t,e=[]){return this.inlineQueue.push({src:t,tokens:e}),e}inlineTokens(t,e=[]){let n=t,r=null;if(this.tokens.links){const t=Object.keys(this.tokens.links);if(t.length>0)for(;null!=(r=this.tokenizer.rules.inline.reflinkSearch.exec(n));)t.includes(r[0].slice(r[0].lastIndexOf("[")+1,-1))&&(n=n.slice(0,r.index)+"["+"a".repeat(r[0].length-2)+"]"+n.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex))}for(;null!=(r=this.tokenizer.rules.inline.blockSkip.exec(n));)n=n.slice(0,r.index)+"["+"a".repeat(r[0].length-2)+"]"+n.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);for(;null!=(r=this.tokenizer.rules.inline.anyPunctuation.exec(n));)n=n.slice(0,r.index)+"++"+n.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);let o=!1,i="";for(;t;){let r;if(o||(i=""),o=!1,this.options.extensions?.inline?.some((n=>!!(r=n.call({lexer:this},t,e))&&(t=t.substring(r.raw.length),e.push(r),!0))))continue;if(r=this.tokenizer.escape(t)){t=t.substring(r.raw.length),e.push(r);continue}if(r=this.tokenizer.tag(t)){t=t.substring(r.raw.length),e.push(r);continue}if(r=this.tokenizer.link(t)){t=t.substring(r.raw.length),e.push(r);continue}if(r=this.tokenizer.reflink(t,this.tokens.links)){t=t.substring(r.raw.length);const n=e.at(-1);"text"===r.type&&"text"===n?.type?(n.raw+=r.raw,n.text+=r.text):e.push(r);continue}if(r=this.tokenizer.emStrong(t,n,i)){t=t.substring(r.raw.length),e.push(r);continue}if(r=this.tokenizer.codespan(t)){t=t.substring(r.raw.length),e.push(r);continue}if(r=this.tokenizer.br(t)){t=t.substring(r.raw.length),e.push(r);continue}if(r=this.tokenizer.del(t)){t=t.substring(r.raw.length),e.push(r);continue}if(r=this.tokenizer.autolink(t)){t=t.substring(r.raw.length),e.push(r);continue}if(!this.state.inLink&&(r=this.tokenizer.url(t))){t=t.substring(r.raw.length),e.push(r);continue}let a=t;if(this.options.extensions?.startInline){let e=1/0;const n=t.slice(1);let r;this.options.extensions.startInline.forEach((t=>{r=t.call({lexer:this},n),"number"==typeof r&&r>=0&&(e=Math.min(e,r))})),e<1/0&&e>=0&&(a=t.substring(0,e+1))}if(r=this.tokenizer.inlineText(a)){t=t.substring(r.raw.length),"_"!==r.raw.slice(-1)&&(i=r.raw.slice(-1)),o=!0;const n=e.at(-1);"text"===n?.type?(n.raw+=r.raw,n.text+=r.text):e.push(r)}else if(t){const e="Infinite loop on byte: "+t.charCodeAt(0);if(this.options.silent){console.error(e);break}throw new Error(e)}}return e}}class de{options;parser;constructor(t){this.options=t||mt}space(t){return""}code({text:t,lang:e,escaped:n}){const r=(e||"").match(bt.notSpaceStart)?.[0],o=t.replace(bt.endingNewline,"")+"\n";return r?'<pre><code class="language-'+se(r)+'">'+(n?o:se(o,!0))+"</code></pre>\n":"<pre><code>"+(n?o:se(o,!0))+"</code></pre>\n"}blockquote({tokens:t}){return`<blockquote>\n${this.parser.parse(t)}</blockquote>\n`}html({text:t}){return t}heading({tokens:t,depth:e}){return`<h${e}>${this.parser.parseInline(t)}</h${e}>\n`}hr(t){return"<hr>\n"}list(t){const e=t.ordered,n=t.start;let r="";for(let e=0;e<t.items.length;e++){const n=t.items[e];r+=this.listitem(n)}const o=e?"ol":"ul";return"<"+o+(e&&1!==n?' start="'+n+'"':"")+">\n"+r+"</"+o+">\n"}listitem(t){let e="";if(t.task){const n=this.checkbox({checked:!!t.checked});t.loose?"paragraph"===t.tokens[0]?.type?(t.tokens[0].text=n+" "+t.tokens[0].text,t.tokens[0].tokens&&t.tokens[0].tokens.length>0&&"text"===t.tokens[0].tokens[0].type&&(t.tokens[0].tokens[0].text=n+" "+se(t.tokens[0].tokens[0].text),t.tokens[0].tokens[0].escaped=!0)):t.tokens.unshift({type:"text",raw:n+" ",text:n+" ",escaped:!0}):e+=n+" "}return e+=this.parser.parse(t.tokens,!!t.loose),`<li>${e}</li>\n`}checkbox({checked:t}){return"<input "+(t?'checked="" ':"")+'disabled="" type="checkbox">'}paragraph({tokens:t}){return`<p>${this.parser.parseInline(t)}</p>\n`}table(t){let e="",n="";for(let e=0;e<t.header.length;e++)n+=this.tablecell(t.header[e]);e+=this.tablerow({text:n});let r="";for(let e=0;e<t.rows.length;e++){const o=t.rows[e];n="";for(let t=0;t<o.length;t++)n+=this.tablecell(o[t]);r+=this.tablerow({text:n})}return r&&(r=`<tbody>${r}</tbody>`),"<table>\n<thead>\n"+e+"</thead>\n"+r+"</table>\n"}tablerow({text:t}){return`<tr>\n${t}</tr>\n`}tablecell(t){const e=this.parser.parseInline(t.tokens),n=t.header?"th":"td";return(t.align?`<${n} align="${t.align}">`:`<${n}>`)+e+`</${n}>\n`}strong({tokens:t}){return`<strong>${this.parser.parseInline(t)}</strong>`}em({tokens:t}){return`<em>${this.parser.parseInline(t)}</em>`}codespan({text:t}){return`<code>${se(t,!0)}</code>`}br(t){return"<br>"}del({tokens:t}){return`<del>${this.parser.parseInline(t)}</del>`}link({href:t,title:e,tokens:n}){const r=this.parser.parseInline(n),o=ce(t);if(null===o)return r;let i='<a href="'+(t=o)+'"';return e&&(i+=' title="'+se(e)+'"'),i+=">"+r+"</a>",i}image({href:t,title:e,text:n}){const r=ce(t);if(null===r)return se(n);let o=`<img src="${t=r}" alt="${n}"`;return e&&(o+=` title="${se(e)}"`),o+=">",o}text(t){return"tokens"in t&&t.tokens?this.parser.parseInline(t.tokens):"escaped"in t&&t.escaped?t.text:se(t.text)}}class ye{strong({text:t}){return t}em({text:t}){return t}codespan({text:t}){return t}del({text:t}){return t}html({text:t}){return t}text({text:t}){return t}link({text:t}){return""+t}image({text:t}){return""+t}br(){return""}}class me{options;renderer;textRenderer;constructor(t){this.options=t||mt,this.options.renderer=this.options.renderer||new de,this.renderer=this.options.renderer,this.renderer.options=this.options,this.renderer.parser=this,this.textRenderer=new ye}static parse(t,e){return new me(e).parse(t)}static parseInline(t,e){return new me(e).parseInline(t)}parse(t,e=!0){let n="";for(let r=0;r<t.length;r++){const o=t[r];if(this.options.extensions?.renderers?.[o.type]){const t=o,e=this.options.extensions.renderers[t.type].call({parser:this},t);if(!1!==e||!["space","hr","heading","code","table","blockquote","list","html","paragraph","text"].includes(t.type)){n+=e||"";continue}}const i=o;switch(i.type){case"space":n+=this.renderer.space(i);continue;case"hr":n+=this.renderer.hr(i);continue;case"heading":n+=this.renderer.heading(i);continue;case"code":n+=this.renderer.code(i);continue;case"table":n+=this.renderer.table(i);continue;case"blockquote":n+=this.renderer.blockquote(i);continue;case"list":n+=this.renderer.list(i);continue;case"html":n+=this.renderer.html(i);continue;case"paragraph":n+=this.renderer.paragraph(i);continue;case"text":{let o=i,a=this.renderer.text(o);for(;r+1<t.length&&"text"===t[r+1].type;)o=t[++r],a+="\n"+this.renderer.text(o);n+=e?this.renderer.paragraph({type:"paragraph",raw:a,text:a,tokens:[{type:"text",raw:a,text:a,escaped:!0}]}):a;continue}default:{const t='Token with "'+i.type+'" type was not found.';if(this.options.silent)return console.error(t),"";throw new Error(t)}}}return n}parseInline(t,e=this.renderer){let n="";for(let r=0;r<t.length;r++){const o=t[r];if(this.options.extensions?.renderers?.[o.type]){const t=this.options.extensions.renderers[o.type].call({parser:this},o);if(!1!==t||!["escape","html","link","image","strong","em","codespan","br","del","text"].includes(o.type)){n+=t||"";continue}}const i=o;switch(i.type){case"escape":case"text":n+=e.text(i);break;case"html":n+=e.html(i);break;case"link":n+=e.link(i);break;case"image":n+=e.image(i);break;case"strong":n+=e.strong(i);break;case"em":n+=e.em(i);break;case"codespan":n+=e.codespan(i);break;case"br":n+=e.br(i);break;case"del":n+=e.del(i);break;default:{const t='Token with "'+i.type+'" type was not found.';if(this.options.silent)return console.error(t),"";throw new Error(t)}}}return n}}class ge{options;block;constructor(t){this.options=t||mt}static passThroughHooks=new Set(["preprocess","postprocess","processAllTokens"]);preprocess(t){return t}postprocess(t){return t}processAllTokens(t){return t}provideLexer(){return this.block?pe.lex:pe.lexInline}provideParser(){return this.block?me.parse:me.parseInline}}const ve=new class{defaults={async:!1,breaks:!1,extensions:null,gfm:!0,hooks:null,pedantic:!1,renderer:null,silent:!1,tokenizer:null,walkTokens:null};options=this.setOptions;parse=this.parseMarkdown(!0);parseInline=this.parseMarkdown(!1);Parser=me;Renderer=de;TextRenderer=ye;Lexer=pe;Tokenizer=fe;Hooks=ge;constructor(...t){this.use(...t)}walkTokens(t,e){let n=[];for(const r of t)switch(n=n.concat(e.call(this,r)),r.type){case"table":{const t=r;for(const r of t.header)n=n.concat(this.walkTokens(r.tokens,e));for(const r of t.rows)for(const t of r)n=n.concat(this.walkTokens(t.tokens,e));break}case"list":{const t=r;n=n.concat(this.walkTokens(t.items,e));break}default:{const t=r;this.defaults.extensions?.childTokens?.[t.type]?this.defaults.extensions.childTokens[t.type].forEach((r=>{const o=t[r].flat(1/0);n=n.concat(this.walkTokens(o,e))})):t.tokens&&(n=n.concat(this.walkTokens(t.tokens,e)))}}return n}use(...t){const e=this.defaults.extensions||{renderers:{},childTokens:{}};return t.forEach((t=>{const n={...t};if(n.async=this.defaults.async||n.async||!1,t.extensions&&(t.extensions.forEach((t=>{if(!t.name)throw new Error("extension name required");if("renderer"in t){const n=e.renderers[t.name];e.renderers[t.name]=n?function(...e){let r=t.renderer.apply(this,e);return!1===r&&(r=n.apply(this,e)),r}:t.renderer}if("tokenizer"in t){if(!t.level||"block"!==t.level&&"inline"!==t.level)throw new Error("extension level must be 'block' or 'inline'");const n=e[t.level];n?n.unshift(t.tokenizer):e[t.level]=[t.tokenizer],t.start&&("block"===t.level?e.startBlock?e.startBlock.push(t.start):e.startBlock=[t.start]:"inline"===t.level&&(e.startInline?e.startInline.push(t.start):e.startInline=[t.start]))}"childTokens"in t&&t.childTokens&&(e.childTokens[t.name]=t.childTokens)})),n.extensions=e),t.renderer){const e=this.defaults.renderer||new de(this.defaults);for(const n in t.renderer){if(!(n in e))throw new Error(`renderer '${n}' does not exist`);if(["options","parser"].includes(n))continue;const r=n,o=t.renderer[r],i=e[r];e[r]=(...t)=>{let n=o.apply(e,t);return!1===n&&(n=i.apply(e,t)),n||""}}n.renderer=e}if(t.tokenizer){const e=this.defaults.tokenizer||new fe(this.defaults);for(const n in t.tokenizer){if(!(n in e))throw new Error(`tokenizer '${n}' does not exist`);if(["options","rules","lexer"].includes(n))continue;const r=n,o=t.tokenizer[r],i=e[r];e[r]=(...t)=>{let n=o.apply(e,t);return!1===n&&(n=i.apply(e,t)),n}}n.tokenizer=e}if(t.hooks){const e=this.defaults.hooks||new ge;for(const n in t.hooks){if(!(n in e))throw new Error(`hook '${n}' does not exist`);if(["options","block"].includes(n))continue;const r=n,o=t.hooks[r],i=e[r];ge.passThroughHooks.has(n)?e[r]=t=>{if(this.defaults.async)return Promise.resolve(o.call(e,t)).then((t=>i.call(e,t)));const n=o.call(e,t);return i.call(e,n)}:e[r]=(...t)=>{let n=o.apply(e,t);return!1===n&&(n=i.apply(e,t)),n}}n.hooks=e}if(t.walkTokens){const e=this.defaults.walkTokens,r=t.walkTokens;n.walkTokens=function(t){let n=[];return n.push(r.call(this,t)),e&&(n=n.concat(e.call(this,t))),n}}this.defaults={...this.defaults,...n}})),this}setOptions(t){return this.defaults={...this.defaults,...t},this}lexer(t,e){return pe.lex(t,e??this.defaults)}parser(t,e){return me.parse(t,e??this.defaults)}parseMarkdown(t){return(e,n)=>{const r={...n},o={...this.defaults,...r},i=this.onError(!!o.silent,!!o.async);if(!0===this.defaults.async&&!1===r.async)return i(new Error("marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise."));if(null==e)return i(new Error("marked(): input parameter is undefined or null"));if("string"!=typeof e)return i(new Error("marked(): input parameter is of type "+Object.prototype.toString.call(e)+", string expected"));o.hooks&&(o.hooks.options=o,o.hooks.block=t);const a=o.hooks?o.hooks.provideLexer():t?pe.lex:pe.lexInline,s=o.hooks?o.hooks.provideParser():t?me.parse:me.parseInline;if(o.async)return Promise.resolve(o.hooks?o.hooks.preprocess(e):e).then((t=>a(t,o))).then((t=>o.hooks?o.hooks.processAllTokens(t):t)).then((t=>o.walkTokens?Promise.all(this.walkTokens(t,o.walkTokens)).then((()=>t)):t)).then((t=>s(t,o))).then((t=>o.hooks?o.hooks.postprocess(t):t)).catch(i);try{o.hooks&&(e=o.hooks.preprocess(e));let t=a(e,o);o.hooks&&(t=o.hooks.processAllTokens(t)),o.walkTokens&&this.walkTokens(t,o.walkTokens);let n=s(t,o);return o.hooks&&(n=o.hooks.postprocess(n)),n}catch(t){return i(t)}}}onError(t,e){return n=>{if(n.message+="\nPlease report this to https://github.com/markedjs/marked.",t){const t="<p>An error occurred:</p><pre>"+se(n.message+"",!0)+"</pre>";return e?Promise.resolve(t):t}if(e)return Promise.reject(n);throw n}}};function we(t,e){return ve.parse(t,e)}function be(t){return be="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},be(t)}function xe(){xe=function(){return e};var t,e={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(t,e,n){t[e]=n.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",s=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag";function u(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,n){return t[e]=n}}function l(t,e,n,r){var i=e&&e.prototype instanceof g?e:g,a=Object.create(i.prototype),s=new C(r||[]);return o(a,"_invoke",{value:S(t,n,s)}),a}function h(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}e.wrap=l;var f="suspendedStart",p="suspendedYield",d="executing",y="completed",m={};function g(){}function v(){}function w(){}var b={};u(b,a,(function(){return this}));var x=Object.getPrototypeOf,k=x&&x(x(P([])));k&&k!==n&&r.call(k,a)&&(b=k);var _=w.prototype=g.prototype=Object.create(b);function E(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function L(t,e){function n(o,i,a,s){var c=h(t[o],t,i);if("throw"!==c.type){var u=c.arg,l=u.value;return l&&"object"==be(l)&&r.call(l,"__await")?e.resolve(l.__await).then((function(t){n("next",t,a,s)}),(function(t){n("throw",t,a,s)})):e.resolve(l).then((function(t){u.value=t,a(u)}),(function(t){return n("throw",t,a,s)}))}s(c.arg)}var i;o(this,"_invoke",{value:function(t,r){function o(){return new e((function(e,o){n(t,r,e,o)}))}return i=i?i.then(o,o):o()}})}function S(e,n,r){var o=f;return function(i,a){if(o===d)throw Error("Generator is already running");if(o===y){if("throw"===i)throw a;return{value:t,done:!0}}for(r.method=i,r.arg=a;;){var s=r.delegate;if(s){var c=T(s,r);if(c){if(c===m)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===f)throw o=y,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=d;var u=h(e,n,r);if("normal"===u.type){if(o=r.done?y:p,u.arg===m)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=y,r.method="throw",r.arg=u.arg)}}}function T(e,n){var r=n.method,o=e.iterator[r];if(o===t)return n.delegate=null,"throw"===r&&e.iterator.return&&(n.method="return",n.arg=t,T(e,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),m;var i=h(o,e.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,m;var a=i.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,m):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function O(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function A(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function C(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(O,this),this.reset(!0)}function P(e){if(e||""===e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}throw new TypeError(be(e)+" is not iterable")}return v.prototype=w,o(_,"constructor",{value:w,configurable:!0}),o(w,"constructor",{value:v,configurable:!0}),v.displayName=u(w,c,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===v||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,w):(t.__proto__=w,u(t,c,"GeneratorFunction")),t.prototype=Object.create(_),t},e.awrap=function(t){return{__await:t}},E(L.prototype),u(L.prototype,s,(function(){return this})),e.AsyncIterator=L,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new L(l(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},E(_),u(_,c,"Generator"),u(_,a,(function(){return this})),u(_,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},e.values=P,C.prototype={constructor:C,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(A),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return s.type="throw",s.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var c=r.call(a,"catchLoc"),u=r.call(a,"finallyLoc");if(c&&u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,m):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),m},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),A(n),m}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;A(n)}return o}}throw Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:P(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),m}},e}function ke(t,e,n,r,o,i,a){try{var s=t[i](a),c=s.value}catch(t){return void n(t)}s.done?e(c):Promise.resolve(c).then(r,o)}function _e(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(t){ke(i,r,o,a,s,"next",t)}function s(t){ke(i,r,o,a,s,"throw",t)}a(void 0)}))}}function Ee(t){var e,n,r,o=2;for("undefined"!=typeof Symbol&&(n=Symbol.asyncIterator,r=Symbol.iterator);o--;){if(n&&null!=(e=t[n]))return e.call(t);if(r&&null!=(e=t[r]))return new Le(e.call(t));n="@@asyncIterator",r="@@iterator"}throw new TypeError("Object is not async iterable")}function Le(t){function e(t){if(Object(t)!==t)return Promise.reject(new TypeError(t+" is not an object."));var e=t.done;return Promise.resolve(t.value).then((function(t){return{value:t,done:e}}))}return Le=function(t){this.s=t,this.n=t.next},Le.prototype={s:null,n:null,next:function(){return e(this.n.apply(this.s,arguments))},return:function(t){var n=this.s.return;return void 0===n?Promise.resolve({value:t,done:!0}):e(n.apply(this.s,arguments))},throw:function(t){var n=this.s.return;return void 0===n?Promise.reject(t):e(n.apply(this.s,arguments))}},new Le(t)}function Se(t,e,n,r){return Te.apply(this,arguments)}function Te(){return(Te=_e(xe().mark((function t(e,n,r,o){var i,a,s,c,u,l,h,f,p,d,y,m,g,v,w;return xe().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:for(console.log("Creating detailed summary"),i=n.map((function(t){return t.titles})).flat(),a=i.map((function(t){return t.title})).join(", "),s=[],c=0;c<a.length;c+=2e3)s.push(a.slice(c,c+2e3));console.log(s.length),u=0,l=s;case 7:if(!(u<l.length)){t.next=62;break}return h=l[u],(f=document.createElement("p")).classList.add("basic-summary-contents"),e.appendChild(f),p=void 0,t.prev=13,t.next=16,B(A(h),r,o);case 16:p=t.sent,d=!1,y=!1,t.prev=19,g=Ee(p);case 21:return t.next=23,g.next();case 23:if(!(d=!(v=t.sent).done)){t.next=30;break}w=v.value,f.innerHTML=we.parse(w),_(e,[".widget-header",".basic-summary-contents"],60);case 27:d=!1,t.next=21;break;case 30:t.next=36;break;case 32:t.prev=32,t.t0=t.catch(19),y=!0,m=t.t0;case 36:if(t.prev=36,t.prev=37,!d||null==g.return){t.next=41;break}return t.next=41,g.return();case 41:if(t.prev=41,!y){t.next=44;break}throw m;case 44:return t.finish(41);case 45:return t.finish(36);case 46:t.next=59;break;case 48:if(t.prev=48,t.t1=t.catch(13),"AbortError"!==t.t1.name){t.next=57;break}for(console.log("Summarization task was aborted.");e.lastChild&&e.lastChild.className&&e.lastChild.className.includes("contents");)e.removeChild(e.lastChild);return _(e,[".widget-header"],20),t.abrupt("return");case 57:return console.log("Error during summarization:",t.t1),t.abrupt("continue",59);case 59:u++,t.next=7;break;case 62:case"end":return t.stop()}}),t,null,[[13,48],[19,32,36,46],[37,,41,45]])})))).apply(this,arguments)}function Oe(t,e,n,r){return Ae.apply(this,arguments)}function Ae(){return(Ae=_e(xe().mark((function t(e,n,r,o){var i,a,s,c,u,l,h,f,p,d,y,m,g,v,w;return xe().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:for(console.log("Creating brief summary"),i=n.map((function(t){return t.titles})).flat(),a=C(i),s=a.slice(0,100),c=s.map((function(t){return t.title})).join(", "),u=[],l=0;l<c.length;l+=2e3)u.push(c.slice(l,l+2e3));return console.log(u.length),(h=document.createElement("p")).classList.add("basic-summary-contents"),e.appendChild(h),f=u[0],t.prev=12,t.next=15,B(A(f),r,o);case 15:p=t.sent,d=!1,y=!1,t.prev=18,g=Ee(p);case 20:return t.next=22,g.next();case 22:if(!(d=!(v=t.sent).done)){t.next=29;break}w=v.value,h.innerHTML=we.parse(w),_(e,[".widget-header",".basic-summary-contents"],60);case 26:d=!1,t.next=20;break;case 29:t.next=35;break;case 31:t.prev=31,t.t0=t.catch(18),y=!0,m=t.t0;case 35:if(t.prev=35,t.prev=36,!d||null==g.return){t.next=40;break}return t.next=40,g.return();case 40:if(t.prev=40,!y){t.next=43;break}throw m;case 43:return t.finish(40);case 44:return t.finish(35);case 45:t.next=57;break;case 47:if(t.prev=47,t.t1=t.catch(12),"AbortError"!==t.t1.name){t.next=56;break}for(console.log("Summarization task was aborted.");e.lastChild&&e.lastChild.className&&e.lastChild.className.includes("contents");)e.removeChild(e.lastChild);return _(e,[".widget-header"],20),t.abrupt("return");case 56:console.log("Error during summarization:",t.t1);case 57:case"end":return t.stop()}}),t,null,[[12,47],[18,31,35,45],[36,,40,44]])})))).apply(this,arguments)}function Ce(t,e,n,r,o){return Pe.apply(this,arguments)}function Pe(){return(Pe=_e(xe().mark((function t(e,n,r,o,i){var a,s,c,u,l,h,f,p,d,y,m,g,v,w,b;return xe().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:for(console.log("Write about history"),a=n.map((function(t){return t.titles})).flat(),s=C(a),c=s.slice(0,100),u=c.map((function(t){return t.title})).join(", "),l=[],h=0;h<u.length;h+=1e3)l.push(u.slice(h,h+1e3));return console.log(l.length),(f=document.createElement("p")).classList.add("basic-summary-contents"),e.appendChild(f),p=l[0],p=o+"\n\n"+p,t.prev=13,t.next=16,et(A(p),r,i);case 16:d=t.sent,y=!1,m=!1,t.prev=19,v=Ee(d);case 21:return t.next=23,v.next();case 23:if(!(y=!(w=t.sent).done)){t.next=30;break}b=w.value,f.innerHTML=we.parse(b),_(e,[".widget-header",".basic-summary-contents"],60);case 27:y=!1,t.next=21;break;case 30:t.next=36;break;case 32:t.prev=32,t.t0=t.catch(19),m=!0,g=t.t0;case 36:if(t.prev=36,t.prev=37,!y||null==v.return){t.next=41;break}return t.next=41,v.return();case 41:if(t.prev=41,!m){t.next=44;break}throw g;case 44:return t.finish(41);case 45:return t.finish(36);case 46:t.next=58;break;case 48:if(t.prev=48,t.t1=t.catch(13),"AbortError"!==t.t1.name){t.next=57;break}for(console.log("Summarization task was aborted.");e.lastChild&&e.lastChild.className&&e.lastChild.className.includes("contents");)e.removeChild(e.lastChild);return _(e,[".widget-header"],20),t.abrupt("return");case 57:console.log("Error during summarization:",t.t1);case 58:case"end":return t.stop()}}),t,null,[[13,48],[19,32,36,46],[37,,41,45]])})))).apply(this,arguments)}function Ie(t,e,n,r,o){return ze.apply(this,arguments)}function ze(){return(ze=_e(xe().mark((function t(e,n,r,o,i){var a,s,c,u,l,h,f,p,d,y,m,g,v,w,b;return xe().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:for(console.log("Write using prompt API"),a=n.map((function(t){return t.titles})).flat(),s=C(a),c=s.slice(0,100),u=c.map((function(t){return t.title})).join(", "),l=[],h=0;h<u.length;h+=2e3)l.push(u.slice(h,h+2e3));return console.log(l.length),(f=document.createElement("p")).classList.add("basic-summary-contents"),e.appendChild(f),p=l[0],p=o+"\n\n"+p,t.prev=13,t.next=16,dt(A(p),r,i);case 16:d=t.sent,y=!1,m=!1,t.prev=19,v=Ee(d);case 21:return t.next=23,v.next();case 23:if(!(y=!(w=t.sent).done)){t.next=30;break}b=w.value,f.innerHTML=we.parse(b),_(e,[".widget-header",".basic-summary-contents"],60);case 27:y=!1,t.next=21;break;case 30:t.next=36;break;case 32:t.prev=32,t.t0=t.catch(19),m=!0,g=t.t0;case 36:if(t.prev=36,t.prev=37,!y||null==v.return){t.next=41;break}return t.next=41,v.return();case 41:if(t.prev=41,!m){t.next=44;break}throw g;case 44:return t.finish(41);case 45:return t.finish(36);case 46:t.next=58;break;case 48:if(t.prev=48,t.t1=t.catch(13),"AbortError"!==t.t1.name){t.next=57;break}for(console.log("Prompt API task was aborted.");e.lastChild&&e.lastChild.className&&e.lastChild.className.includes("contents");)e.removeChild(e.lastChild);return _(e,[".widget-header"],20),t.abrupt("return");case 57:console.log("Error during prompt API:",t.t1);case 58:case"end":return t.stop()}}),t,null,[[13,48],[19,32,36,46],[37,,41,45]])})))).apply(this,arguments)}function je(){}function Ne(t){return null==t?je:function(){return this.querySelector(t)}}function $e(){return[]}function Fe(t){return null==t?$e:function(){return this.querySelectorAll(t)}}function Re(t){return function(){return this.matches(t)}}function Me(t){return function(e){return e.matches(t)}}we.options=we.setOptions=function(t){return ve.setOptions(t),we.defaults=ve.defaults,gt(we.defaults),we},we.getDefaults=function(){return{async:!1,breaks:!1,extensions:null,gfm:!0,hooks:null,pedantic:!1,renderer:null,silent:!1,tokenizer:null,walkTokens:null}},we.defaults=mt,we.use=function(...t){return ve.use(...t),we.defaults=ve.defaults,gt(we.defaults),we},we.walkTokens=function(t,e){return ve.walkTokens(t,e)},we.parseInline=ve.parseInline,we.Parser=me,we.parser=me.parse,we.Renderer=de,we.TextRenderer=ye,we.Lexer=pe,we.lexer=pe.lex,we.Tokenizer=fe,we.Hooks=ge,we.parse=we,we.options,we.setOptions,we.use,we.walkTokens,we.parseInline,me.parse,pe.lex;var De=Array.prototype.find;function Ge(){return this.firstElementChild}var Be=Array.prototype.filter;function qe(){return Array.from(this.children)}function We(t){return new Array(t.length)}function He(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}function Ye(t,e,n,r,o,i){for(var a,s=0,c=e.length,u=i.length;s<u;++s)(a=e[s])?(a.__data__=i[s],r[s]=a):n[s]=new He(t,i[s]);for(;s<c;++s)(a=e[s])&&(o[s]=a)}function Ze(t,e,n,r,o,i,a){var s,c,u,l=new Map,h=e.length,f=i.length,p=new Array(h);for(s=0;s<h;++s)(c=e[s])&&(p[s]=u=a.call(c,c.__data__,s,e)+"",l.has(u)?o[s]=c:l.set(u,c));for(s=0;s<f;++s)u=a.call(t,i[s],s,i)+"",(c=l.get(u))?(r[s]=c,c.__data__=i[s],l.delete(u)):n[s]=new He(t,i[s]);for(s=0;s<h;++s)(c=e[s])&&l.get(p[s])===c&&(o[s]=c)}function Xe(t){return t.__data__}function Qe(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function Ue(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}He.prototype={constructor:He,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var Ve="http://www.w3.org/1999/xhtml";const Je={svg:"http://www.w3.org/2000/svg",xhtml:Ve,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function Ke(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),Je.hasOwnProperty(e)?{space:Je[e],local:t}:t}function tn(t){return function(){this.removeAttribute(t)}}function en(t){return function(){this.removeAttributeNS(t.space,t.local)}}function nn(t,e){return function(){this.setAttribute(t,e)}}function rn(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function on(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function an(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function sn(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function cn(t){return function(){this.style.removeProperty(t)}}function un(t,e,n){return function(){this.style.setProperty(t,e,n)}}function ln(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function hn(t,e){return t.style.getPropertyValue(e)||sn(t).getComputedStyle(t,null).getPropertyValue(e)}function fn(t){return function(){delete this[t]}}function pn(t,e){return function(){this[t]=e}}function dn(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function yn(t){return t.trim().split(/^|\s+/)}function mn(t){return t.classList||new gn(t)}function gn(t){this._node=t,this._names=yn(t.getAttribute("class")||"")}function vn(t,e){for(var n=mn(t),r=-1,o=e.length;++r<o;)n.add(e[r])}function wn(t,e){for(var n=mn(t),r=-1,o=e.length;++r<o;)n.remove(e[r])}function bn(t){return function(){vn(this,t)}}function xn(t){return function(){wn(this,t)}}function kn(t,e){return function(){(e.apply(this,arguments)?vn:wn)(this,t)}}function _n(){this.textContent=""}function En(t){return function(){this.textContent=t}}function Ln(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function Sn(){this.innerHTML=""}function Tn(t){return function(){this.innerHTML=t}}function On(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function An(){this.nextSibling&&this.parentNode.appendChild(this)}function Cn(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Pn(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===Ve&&e.documentElement.namespaceURI===Ve?e.createElement(t):e.createElementNS(n,t)}}function In(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function zn(t){var e=Ke(t);return(e.local?In:Pn)(e)}function jn(){return null}function Nn(){var t=this.parentNode;t&&t.removeChild(this)}function $n(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Fn(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Rn(t){return function(){var e=this.__on;if(e){for(var n,r=0,o=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++o]=n:this.removeEventListener(n.type,n.listener,n.options);++o?e.length=o:delete this.__on}}}function Mn(t,e,n){return function(){var r,o=this.__on,i=function(t){return function(e){t.call(this,e,this.__data__)}}(e);if(o)for(var a=0,s=o.length;a<s;++a)if((r=o[a]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=i,r.options=n),void(r.value=e);this.addEventListener(t.type,i,n),r={type:t.type,name:t.name,value:e,listener:i,options:n},o?o.push(r):this.__on=[r]}}function Dn(t,e,n){var r=sn(t),o=r.CustomEvent;"function"==typeof o?o=new o(e,n):(o=r.document.createEvent("Event"),n?(o.initEvent(e,n.bubbles,n.cancelable),o.detail=n.detail):o.initEvent(e,!1,!1)),t.dispatchEvent(o)}function Gn(t,e){return function(){return Dn(this,t,e)}}function Bn(t,e){return function(){return Dn(this,t,e.apply(this,arguments))}}gn.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var qn=[null];function Wn(t,e){this._groups=t,this._parents=e}function Hn(){return new Wn([[document.documentElement]],qn)}Wn.prototype=Hn.prototype={constructor:Wn,select:function(t){"function"!=typeof t&&(t=Ne(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,a,s=e[o],c=s.length,u=r[o]=new Array(c),l=0;l<c;++l)(i=s[l])&&(a=t.call(i,i.__data__,l,s))&&("__data__"in i&&(a.__data__=i.__data__),u[l]=a);return new Wn(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){return null==(e=t.apply(this,arguments))?[]:Array.isArray(e)?e:Array.from(e);var e}}(t):Fe(t);for(var e=this._groups,n=e.length,r=[],o=[],i=0;i<n;++i)for(var a,s=e[i],c=s.length,u=0;u<c;++u)(a=s[u])&&(r.push(t.call(a,a.__data__,u,s)),o.push(a));return new Wn(r,o)},selectChild:function(t){return this.select(null==t?Ge:function(t){return function(){return De.call(this.children,t)}}("function"==typeof t?t:Me(t)))},selectChildren:function(t){return this.selectAll(null==t?qe:function(t){return function(){return Be.call(this.children,t)}}("function"==typeof t?t:Me(t)))},filter:function(t){"function"!=typeof t&&(t=Re(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,a=e[o],s=a.length,c=r[o]=[],u=0;u<s;++u)(i=a[u])&&t.call(i,i.__data__,u,a)&&c.push(i);return new Wn(r,this._parents)},data:function(t,e){if(!arguments.length)return Array.from(this,Xe);var n,r=e?Ze:Ye,o=this._parents,i=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var a=i.length,s=new Array(a),c=new Array(a),u=new Array(a),l=0;l<a;++l){var h=o[l],f=i[l],p=f.length,d=Qe(t.call(h,h&&h.__data__,l,o)),y=d.length,m=c[l]=new Array(y),g=s[l]=new Array(y);r(h,f,m,g,u[l]=new Array(p),d,e);for(var v,w,b=0,x=0;b<y;++b)if(v=m[b]){for(b>=x&&(x=b+1);!(w=g[x])&&++x<y;);v._next=w||null}}return(s=new Wn(s,o))._enter=c,s._exit=u,s},enter:function(){return new Wn(this._enter||this._groups.map(We),this._parents)},exit:function(){return new Wn(this._exit||this._groups.map(We),this._parents)},join:function(t,e,n){var r=this.enter(),o=this,i=this.exit();return"function"==typeof t?(r=t(r))&&(r=r.selection()):r=r.append(t+""),null!=e&&(o=e(o))&&(o=o.selection()),null==n?i.remove():n(i),r&&o?r.merge(o).order():o},merge:function(t){for(var e=t.selection?t.selection():t,n=this._groups,r=e._groups,o=n.length,i=r.length,a=Math.min(o,i),s=new Array(o),c=0;c<a;++c)for(var u,l=n[c],h=r[c],f=l.length,p=s[c]=new Array(f),d=0;d<f;++d)(u=l[d]||h[d])&&(p[d]=u);for(;c<o;++c)s[c]=n[c];return new Wn(s,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,o=t[e],i=o.length-1,a=o[i];--i>=0;)(r=o[i])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=Ue);for(var n=this._groups,r=n.length,o=new Array(r),i=0;i<r;++i){for(var a,s=n[i],c=s.length,u=o[i]=new Array(c),l=0;l<c;++l)(a=s[l])&&(u[l]=a);u.sort(e)}return new Wn(o,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],o=0,i=r.length;o<i;++o){var a=r[o];if(a)return a}return null},size:function(){let t=0;for(const e of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var o,i=e[n],a=0,s=i.length;a<s;++a)(o=i[a])&&t.call(o,o.__data__,a,i);return this},attr:function(t,e){var n=Ke(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?en:tn:"function"==typeof e?n.local?an:on:n.local?rn:nn)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?cn:"function"==typeof e?ln:un)(t,e,null==n?"":n)):hn(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?fn:"function"==typeof e?dn:pn)(t,e)):this.node()[t]},classed:function(t,e){var n=yn(t+"");if(arguments.length<2){for(var r=mn(this.node()),o=-1,i=n.length;++o<i;)if(!r.contains(n[o]))return!1;return!0}return this.each(("function"==typeof e?kn:e?bn:xn)(n,e))},text:function(t){return arguments.length?this.each(null==t?_n:("function"==typeof t?Ln:En)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Sn:("function"==typeof t?On:Tn)(t)):this.node().innerHTML},raise:function(){return this.each(An)},lower:function(){return this.each(Cn)},append:function(t){var e="function"==typeof t?t:zn(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:zn(t),r=null==e?jn:"function"==typeof e?e:Ne(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Nn)},clone:function(t){return this.select(t?Fn:$n)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,o,i=function(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}(t+""),a=i.length;if(!(arguments.length<2)){for(s=e?Mn:Rn,r=0;r<a;++r)this.each(s(i[r],e,n));return this}var s=this.node().__on;if(s)for(var c,u=0,l=s.length;u<l;++u)for(r=0,c=s[u];r<a;++r)if((o=i[r]).type===c.type&&o.name===c.name)return c.value},dispatch:function(t,e){return this.each(("function"==typeof e?Bn:Gn)(t,e))},[Symbol.iterator]:function*(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r,o=t[e],i=0,a=o.length;i<a;++i)(r=o[i])&&(yield r)}};const Yn=Hn;var Zn={value:()=>{}};function Xn(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new Qn(r)}function Qn(t){this._=t}function Un(t,e){for(var n,r=0,o=t.length;r<o;++r)if((n=t[r]).name===e)return n.value}function Vn(t,e,n){for(var r=0,o=t.length;r<o;++r)if(t[r].name===e){t[r]=Zn,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}Qn.prototype=Xn.prototype={constructor:Qn,on:function(t,e){var n,r,o=this._,i=(r=o,(t+"").trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))),a=-1,s=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++a<s;)if(n=(t=i[a]).type)o[n]=Vn(o[n],t.name,e);else if(null==e)for(n in o)o[n]=Vn(o[n],t.name,null);return this}for(;++a<s;)if((n=(t=i[a]).type)&&(n=Un(o[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new Qn(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,o=new Array(n),i=0;i<n;++i)o[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(r=this._[t]).length;i<n;++i)r[i].value.apply(e,o)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],o=0,i=r.length;o<i;++o)r[o].value.apply(e,n)}};const Jn=Xn;var Kn,tr,er=0,nr=0,rr=0,or=0,ir=0,ar=0,sr="object"==typeof performance&&performance.now?performance:Date,cr="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function ur(){return ir||(cr(lr),ir=sr.now()+ar)}function lr(){ir=0}function hr(){this._call=this._time=this._next=null}function fr(t,e,n){var r=new hr;return r.restart(t,e,n),r}function pr(){ir=(or=sr.now())+ar,er=nr=0;try{!function(){ur(),++er;for(var t,e=Kn;e;)(t=ir-e._time)>=0&&e._call.call(void 0,t),e=e._next;--er}()}finally{er=0,function(){for(var t,e,n=Kn,r=1/0;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Kn=e);tr=t,yr(r)}(),ir=0}}function dr(){var t=sr.now(),e=t-or;e>1e3&&(ar-=e,or=t)}function yr(t){er||(nr&&(nr=clearTimeout(nr)),t-ir>24?(t<1/0&&(nr=setTimeout(pr,t-sr.now()-ar)),rr&&(rr=clearInterval(rr))):(rr||(or=sr.now(),rr=setInterval(dr,1e3)),er=1,cr(pr)))}function mr(t,e,n){var r=new hr;return e=null==e?0:+e,r.restart((n=>{r.stop(),t(n+e)}),e,n),r}hr.prototype=fr.prototype={constructor:hr,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?ur():+n)+(null==e?0:+e),this._next||tr===this||(tr?tr._next=this:Kn=this,tr=this),this._call=t,this._time=n,yr()},stop:function(){this._call&&(this._call=null,this._time=1/0,yr())}};var gr=Jn("start","end","cancel","interrupt"),vr=[];function wr(t,e,n,r,o,i){var a=t.__transition;if(a){if(n in a)return}else t.__transition={};!function(t,e,n){var r,o=t.__transition;function i(c){var u,l,h,f;if(1!==n.state)return s();for(u in o)if((f=o[u]).name===n.name){if(3===f.state)return mr(i);4===f.state?(f.state=6,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete o[u]):+u<e&&(f.state=6,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete o[u])}if(mr((function(){3===n.state&&(n.state=4,n.timer.restart(a,n.delay,n.time),a(c))})),n.state=2,n.on.call("start",t,t.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(h=n.tween.length),u=0,l=-1;u<h;++u)(f=n.tween[u].value.call(t,t.__data__,n.index,n.group))&&(r[++l]=f);r.length=l+1}}function a(e){for(var o=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(s),n.state=5,1),i=-1,a=r.length;++i<a;)r[i].call(t,o);5===n.state&&(n.on.call("end",t,t.__data__,n.index,n.group),s())}function s(){for(var r in n.state=6,n.timer.stop(),delete o[e],o)return;delete t.__transition}o[e]=n,n.timer=fr((function(t){n.state=1,n.timer.restart(i,n.delay,n.time),n.delay<=t&&i(t-n.delay)}),0,n.time)}(t,n,{name:e,index:r,group:o,on:gr,tween:vr,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:0})}function br(t,e){var n=kr(t,e);if(n.state>0)throw new Error("too late; already scheduled");return n}function xr(t,e){var n=kr(t,e);if(n.state>3)throw new Error("too late; already running");return n}function kr(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function _r(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}var Er,Lr=180/Math.PI,Sr={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Tr(t,e,n,r,o,i){var a,s,c;return(a=Math.sqrt(t*t+e*e))&&(t/=a,e/=a),(c=t*n+e*r)&&(n-=t*c,r-=e*c),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,c/=s),t*r<e*n&&(t=-t,e=-e,c=-c,a=-a),{translateX:o,translateY:i,rotate:Math.atan2(e,t)*Lr,skewX:Math.atan(c)*Lr,scaleX:a,scaleY:s}}function Or(t,e,n,r){function o(t){return t.length?t.pop()+" ":""}return function(i,a){var s=[],c=[];return i=t(i),a=t(a),function(t,r,o,i,a,s){if(t!==o||r!==i){var c=a.push("translate(",null,e,null,n);s.push({i:c-4,x:_r(t,o)},{i:c-2,x:_r(r,i)})}else(o||i)&&a.push("translate("+o+e+i+n)}(i.translateX,i.translateY,a.translateX,a.translateY,s,c),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(o(n)+"rotate(",null,r)-2,x:_r(t,e)})):e&&n.push(o(n)+"rotate("+e+r)}(i.rotate,a.rotate,s,c),function(t,e,n,i){t!==e?i.push({i:n.push(o(n)+"skewX(",null,r)-2,x:_r(t,e)}):e&&n.push(o(n)+"skewX("+e+r)}(i.skewX,a.skewX,s,c),function(t,e,n,r,i,a){if(t!==n||e!==r){var s=i.push(o(i)+"scale(",null,",",null,")");a.push({i:s-4,x:_r(t,n)},{i:s-2,x:_r(e,r)})}else 1===n&&1===r||i.push(o(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,a.scaleX,a.scaleY,s,c),i=a=null,function(t){for(var e,n=-1,r=c.length;++n<r;)s[(e=c[n]).i]=e.x(t);return s.join("")}}}var Ar=Or((function(t){const e=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return e.isIdentity?Sr:Tr(e.a,e.b,e.c,e.d,e.e,e.f)}),"px, ","px)","deg)"),Cr=Or((function(t){return null==t?Sr:(Er||(Er=document.createElementNS("http://www.w3.org/2000/svg","g")),Er.setAttribute("transform",t),(t=Er.transform.baseVal.consolidate())?Tr((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Sr)}),", ",")",")");function Pr(t,e){var n,r;return function(){var o=xr(this,t),i=o.tween;if(i!==n)for(var a=0,s=(r=n=i).length;a<s;++a)if(r[a].name===e){(r=r.slice()).splice(a,1);break}o.tween=r}}function Ir(t,e,n){var r,o;if("function"!=typeof n)throw new Error;return function(){var i=xr(this,t),a=i.tween;if(a!==r){o=(r=a).slice();for(var s={name:e,value:n},c=0,u=o.length;c<u;++c)if(o[c].name===e){o[c]=s;break}c===u&&o.push(s)}i.tween=o}}function zr(t,e,n){var r=t._id;return t.each((function(){var t=xr(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return kr(t,r).value[e]}}function jr(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function Nr(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function $r(){}var Fr=.7,Rr=1/Fr,Mr="\\s*([+-]?\\d+)\\s*",Dr="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",Gr="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Br=/^#([0-9a-f]{3,8})$/,qr=new RegExp(`^rgb\\(${Mr},${Mr},${Mr}\\)$`),Wr=new RegExp(`^rgb\\(${Gr},${Gr},${Gr}\\)$`),Hr=new RegExp(`^rgba\\(${Mr},${Mr},${Mr},${Dr}\\)$`),Yr=new RegExp(`^rgba\\(${Gr},${Gr},${Gr},${Dr}\\)$`),Zr=new RegExp(`^hsl\\(${Dr},${Gr},${Gr}\\)$`),Xr=new RegExp(`^hsla\\(${Dr},${Gr},${Gr},${Dr}\\)$`),Qr={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Ur(){return this.rgb().formatHex()}function Vr(){return this.rgb().formatRgb()}function Jr(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=Br.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?Kr(e):3===n?new no(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?to(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?to(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=qr.exec(t))?new no(e[1],e[2],e[3],1):(e=Wr.exec(t))?new no(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=Hr.exec(t))?to(e[1],e[2],e[3],e[4]):(e=Yr.exec(t))?to(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=Zr.exec(t))?co(e[1],e[2]/100,e[3]/100,1):(e=Xr.exec(t))?co(e[1],e[2]/100,e[3]/100,e[4]):Qr.hasOwnProperty(t)?Kr(Qr[t]):"transparent"===t?new no(NaN,NaN,NaN,0):null}function Kr(t){return new no(t>>16&255,t>>8&255,255&t,1)}function to(t,e,n,r){return r<=0&&(t=e=n=NaN),new no(t,e,n,r)}function eo(t,e,n,r){return 1===arguments.length?((o=t)instanceof $r||(o=Jr(o)),o?new no((o=o.rgb()).r,o.g,o.b,o.opacity):new no):new no(t,e,n,null==r?1:r);var o}function no(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function ro(){return`#${so(this.r)}${so(this.g)}${so(this.b)}`}function oo(){const t=io(this.opacity);return`${1===t?"rgb(":"rgba("}${ao(this.r)}, ${ao(this.g)}, ${ao(this.b)}${1===t?")":`, ${t})`}`}function io(t){return isNaN(t)?1:Math.max(0,Math.min(1,t))}function ao(t){return Math.max(0,Math.min(255,Math.round(t)||0))}function so(t){return((t=ao(t))<16?"0":"")+t.toString(16)}function co(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new lo(t,e,n,r)}function uo(t){if(t instanceof lo)return new lo(t.h,t.s,t.l,t.opacity);if(t instanceof $r||(t=Jr(t)),!t)return new lo;if(t instanceof lo)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,o=Math.min(e,n,r),i=Math.max(e,n,r),a=NaN,s=i-o,c=(i+o)/2;return s?(a=e===i?(n-r)/s+6*(n<r):n===i?(r-e)/s+2:(e-n)/s+4,s/=c<.5?i+o:2-i-o,a*=60):s=c>0&&c<1?0:a,new lo(a,s,c,t.opacity)}function lo(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function ho(t){return(t=(t||0)%360)<0?t+360:t}function fo(t){return Math.max(0,Math.min(1,t||0))}function po(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function yo(t,e,n,r,o){var i=t*t,a=i*t;return((1-3*t+3*i-a)*e+(4-6*i+3*a)*n+(1+3*t+3*i-3*a)*r+a*o)/6}jr($r,Jr,{copy(t){return Object.assign(new this.constructor,this,t)},displayable(){return this.rgb().displayable()},hex:Ur,formatHex:Ur,formatHex8:function(){return this.rgb().formatHex8()},formatHsl:function(){return uo(this).formatHsl()},formatRgb:Vr,toString:Vr}),jr(no,eo,Nr($r,{brighter(t){return t=null==t?Rr:Math.pow(Rr,t),new no(this.r*t,this.g*t,this.b*t,this.opacity)},darker(t){return t=null==t?Fr:Math.pow(Fr,t),new no(this.r*t,this.g*t,this.b*t,this.opacity)},rgb(){return this},clamp(){return new no(ao(this.r),ao(this.g),ao(this.b),io(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:ro,formatHex:ro,formatHex8:function(){return`#${so(this.r)}${so(this.g)}${so(this.b)}${so(255*(isNaN(this.opacity)?1:this.opacity))}`},formatRgb:oo,toString:oo})),jr(lo,(function(t,e,n,r){return 1===arguments.length?uo(t):new lo(t,e,n,null==r?1:r)}),Nr($r,{brighter(t){return t=null==t?Rr:Math.pow(Rr,t),new lo(this.h,this.s,this.l*t,this.opacity)},darker(t){return t=null==t?Fr:Math.pow(Fr,t),new lo(this.h,this.s,this.l*t,this.opacity)},rgb(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,o=2*n-r;return new no(po(t>=240?t-240:t+120,o,r),po(t,o,r),po(t<120?t+240:t-120,o,r),this.opacity)},clamp(){return new lo(ho(this.h),fo(this.s),fo(this.l),io(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){const t=io(this.opacity);return`${1===t?"hsl(":"hsla("}${ho(this.h)}, ${100*fo(this.s)}%, ${100*fo(this.l)}%${1===t?")":`, ${t})`}`}}));const mo=t=>()=>t;function go(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):mo(isNaN(t)?e:t)}const vo=function t(e){var n=function(t){return 1==(t=+t)?go:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):mo(isNaN(e)?n:e)}}(e);function r(t,e){var r=n((t=eo(t)).r,(e=eo(e)).r),o=n(t.g,e.g),i=n(t.b,e.b),a=go(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=o(e),t.b=i(e),t.opacity=a(e),t+""}}return r.gamma=t,r}(1);function wo(t){return function(e){var n,r,o=e.length,i=new Array(o),a=new Array(o),s=new Array(o);for(n=0;n<o;++n)r=eo(e[n]),i[n]=r.r||0,a[n]=r.g||0,s[n]=r.b||0;return i=t(i),a=t(a),s=t(s),r.opacity=1,function(t){return r.r=i(t),r.g=a(t),r.b=s(t),r+""}}}wo((function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),o=t[r],i=t[r+1],a=r>0?t[r-1]:2*o-i,s=r<e-1?t[r+2]:2*i-o;return yo((n-r/e)*e,a,o,i,s)}})),wo((function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),o=t[(r+e-1)%e],i=t[r%e],a=t[(r+1)%e],s=t[(r+2)%e];return yo((n-r/e)*e,o,i,a,s)}}));var bo=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,xo=new RegExp(bo.source,"g");function ko(t,e){var n,r,o,i=bo.lastIndex=xo.lastIndex=0,a=-1,s=[],c=[];for(t+="",e+="";(n=bo.exec(t))&&(r=xo.exec(e));)(o=r.index)>i&&(o=e.slice(i,o),s[a]?s[a]+=o:s[++a]=o),(n=n[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,c.push({i:a,x:_r(n,r)})),i=xo.lastIndex;return i<e.length&&(o=e.slice(i),s[a]?s[a]+=o:s[++a]=o),s.length<2?c[0]?function(t){return function(e){return t(e)+""}}(c[0].x):function(t){return function(){return t}}(e):(e=c.length,function(t){for(var n,r=0;r<e;++r)s[(n=c[r]).i]=n.x(t);return s.join("")})}function _o(t,e){var n;return("number"==typeof e?_r:e instanceof Jr?vo:(n=Jr(e))?(e=n,vo):ko)(t,e)}function Eo(t){return function(){this.removeAttribute(t)}}function Lo(t){return function(){this.removeAttributeNS(t.space,t.local)}}function So(t,e,n){var r,o,i=n+"";return function(){var a=this.getAttribute(t);return a===i?null:a===r?o:o=e(r=a,n)}}function To(t,e,n){var r,o,i=n+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===i?null:a===r?o:o=e(r=a,n)}}function Oo(t,e,n){var r,o,i;return function(){var a,s,c=n(this);if(null!=c)return(a=this.getAttribute(t))===(s=c+"")?null:a===r&&s===o?i:(o=s,i=e(r=a,c));this.removeAttribute(t)}}function Ao(t,e,n){var r,o,i;return function(){var a,s,c=n(this);if(null!=c)return(a=this.getAttributeNS(t.space,t.local))===(s=c+"")?null:a===r&&s===o?i:(o=s,i=e(r=a,c));this.removeAttributeNS(t.space,t.local)}}function Co(t,e){var n,r;function o(){var o=e.apply(this,arguments);return o!==r&&(n=(r=o)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}(t,o)),n}return o._value=e,o}function Po(t,e){var n,r;function o(){var o=e.apply(this,arguments);return o!==r&&(n=(r=o)&&function(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}(t,o)),n}return o._value=e,o}function Io(t,e){return function(){br(this,t).delay=+e.apply(this,arguments)}}function zo(t,e){return e=+e,function(){br(this,t).delay=e}}function jo(t,e){return function(){xr(this,t).duration=+e.apply(this,arguments)}}function No(t,e){return e=+e,function(){xr(this,t).duration=e}}var $o=Yn.prototype.constructor;function Fo(t){return function(){this.style.removeProperty(t)}}var Ro=0;function Mo(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function Do(){return++Ro}var Go=Yn.prototype;Mo.prototype=function(t){return Yn().transition(t)}.prototype={constructor:Mo,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Ne(t));for(var r=this._groups,o=r.length,i=new Array(o),a=0;a<o;++a)for(var s,c,u=r[a],l=u.length,h=i[a]=new Array(l),f=0;f<l;++f)(s=u[f])&&(c=t.call(s,s.__data__,f,u))&&("__data__"in s&&(c.__data__=s.__data__),h[f]=c,wr(h[f],e,n,f,h,kr(s,n)));return new Mo(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=Fe(t));for(var r=this._groups,o=r.length,i=[],a=[],s=0;s<o;++s)for(var c,u=r[s],l=u.length,h=0;h<l;++h)if(c=u[h]){for(var f,p=t.call(c,c.__data__,h,u),d=kr(c,n),y=0,m=p.length;y<m;++y)(f=p[y])&&wr(f,e,n,y,p,d);i.push(p),a.push(c)}return new Mo(i,a,e,n)},selectChild:Go.selectChild,selectChildren:Go.selectChildren,filter:function(t){"function"!=typeof t&&(t=Re(t));for(var e=this._groups,n=e.length,r=new Array(n),o=0;o<n;++o)for(var i,a=e[o],s=a.length,c=r[o]=[],u=0;u<s;++u)(i=a[u])&&t.call(i,i.__data__,u,a)&&c.push(i);return new Mo(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,o=n.length,i=Math.min(r,o),a=new Array(r),s=0;s<i;++s)for(var c,u=e[s],l=n[s],h=u.length,f=a[s]=new Array(h),p=0;p<h;++p)(c=u[p]||l[p])&&(f[p]=c);for(;s<r;++s)a[s]=e[s];return new Mo(a,this._parents,this._name,this._id)},selection:function(){return new $o(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Do(),r=this._groups,o=r.length,i=0;i<o;++i)for(var a,s=r[i],c=s.length,u=0;u<c;++u)if(a=s[u]){var l=kr(a,e);wr(a,t,n,u,s,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new Mo(r,this._parents,t,n)},call:Go.call,nodes:Go.nodes,node:Go.node,size:Go.size,empty:Go.empty,each:Go.each,on:function(t,e){var n=this._id;return arguments.length<2?kr(this.node(),n).on.on(t):this.each(function(t,e,n){var r,o,i=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?br:xr;return function(){var a=i(this,t),s=a.on;s!==r&&(o=(r=s).copy()).on(e,n),a.on=o}}(n,t,e))},attr:function(t,e){var n=Ke(t),r="transform"===n?Cr:_o;return this.attrTween(t,"function"==typeof e?(n.local?Ao:Oo)(n,r,zr(this,"attr."+t,e)):null==e?(n.local?Lo:Eo)(n):(n.local?To:So)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=Ke(t);return this.tween(n,(r.local?Co:Po)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?Ar:_o;return null==e?this.styleTween(t,function(t,e){var n,r,o;return function(){var i=hn(this,t),a=(this.style.removeProperty(t),hn(this,t));return i===a?null:i===n&&a===r?o:o=e(n=i,r=a)}}(t,r)).on("end.style."+t,Fo(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,o,i;return function(){var a=hn(this,t),s=n(this),c=s+"";return null==s&&(this.style.removeProperty(t),c=s=hn(this,t)),a===c?null:a===r&&c===o?i:(o=c,i=e(r=a,s))}}(t,r,zr(this,"style."+t,e))).each(function(t,e){var n,r,o,i,a="style."+e,s="end."+a;return function(){var c=xr(this,t),u=c.on,l=null==c.value[a]?i||(i=Fo(e)):void 0;u===n&&o===l||(r=(n=u).copy()).on(s,o=l),c.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,o,i=n+"";return function(){var a=hn(this,t);return a===i?null:a===r?o:o=e(r=a,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){var r,o;function i(){var i=e.apply(this,arguments);return i!==o&&(r=(o=i)&&function(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}(t,i,n)),r}return i._value=e,i}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(zr(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,function(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&function(t){return function(e){this.textContent=t.call(this,e)}}(r)),e}return r._value=t,r}(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,o=kr(this.node(),n).tween,i=0,a=o.length;i<a;++i)if((r=o[i]).name===t)return r.value;return null}return this.each((null==e?Pr:Ir)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Io:zo)(e,t)):kr(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?jo:No)(e,t)):kr(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){xr(this,t).ease=e}}(e,t)):kr(this.node(),e).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,e){return function(){var n=e.apply(this,arguments);if("function"!=typeof n)throw new Error;xr(this,t).ease=n}}(this._id,t))},end:function(){var t,e,n=this,r=n._id,o=n.size();return new Promise((function(i,a){var s={value:a},c={value:function(){0==--o&&i()}};n.each((function(){var n=xr(this,r),o=n.on;o!==t&&((e=(t=o).copy())._.cancel.push(s),e._.interrupt.push(s),e._.end.push(c)),n.on=e})),0===o&&i()}))},[Symbol.iterator]:Go[Symbol.iterator]};var Bo={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function qo(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))throw new Error(`transition ${e} not found`);return n}Yn.prototype.interrupt=function(t){return this.each((function(){!function(t,e){var n,r,o,i=t.__transition,a=!0;if(i){for(o in e=null==e?null:e+"",i)(n=i[o]).name===e?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete i[o]):a=!1;a&&delete t.__transition}}(this,t)}))},Yn.prototype.transition=function(t){var e,n;t instanceof Mo?(e=t._id,t=t._name):(e=Do(),(n=Bo).time=ur(),t=null==t?null:t+"");for(var r=this._groups,o=r.length,i=0;i<o;++i)for(var a,s=r[i],c=s.length,u=0;u<c;++u)(a=s[u])&&wr(a,t,e,u,s,n||qo(a,e));return new Mo(r,this._parents,t,e)};const{abs:Wo,max:Ho,min:Yo}=Math;function Zo(t){return{type:t}}["w","e"].map(Zo),["n","s"].map(Zo),["n","w","e","s","nw","ne","sw","se"].map(Zo);const Xo=function(t){for(var e=new Array(10),n=0;n<10;)e[n]="#"+t.slice(6*n,6*++n);return e}("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");function Qo(t){return"string"==typeof t?new Wn([[document.querySelector(t)]],[document.documentElement]):new Wn([[t]],qn)}function Uo(t,e,n){this.k=t,this.x=e,this.y=n}Uo.prototype={constructor:Uo,scale:function(t){return 1===t?this:new Uo(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new Uo(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}},new Uo(1,0,0),Uo.prototype;var Vo=n(84),Jo=n.n(Vo);function Ko(t){return Ko="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ko(t)}function ti(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=ri(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,s=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,i=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw i}}}}function ei(){ei=function(){return e};var t,e={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(t,e,n){t[e]=n.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",s=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag";function u(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,n){return t[e]=n}}function l(t,e,n,r){var i=e&&e.prototype instanceof g?e:g,a=Object.create(i.prototype),s=new C(r||[]);return o(a,"_invoke",{value:S(t,n,s)}),a}function h(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}e.wrap=l;var f="suspendedStart",p="suspendedYield",d="executing",y="completed",m={};function g(){}function v(){}function w(){}var b={};u(b,a,(function(){return this}));var x=Object.getPrototypeOf,k=x&&x(x(P([])));k&&k!==n&&r.call(k,a)&&(b=k);var _=w.prototype=g.prototype=Object.create(b);function E(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function L(t,e){function n(o,i,a,s){var c=h(t[o],t,i);if("throw"!==c.type){var u=c.arg,l=u.value;return l&&"object"==Ko(l)&&r.call(l,"__await")?e.resolve(l.__await).then((function(t){n("next",t,a,s)}),(function(t){n("throw",t,a,s)})):e.resolve(l).then((function(t){u.value=t,a(u)}),(function(t){return n("throw",t,a,s)}))}s(c.arg)}var i;o(this,"_invoke",{value:function(t,r){function o(){return new e((function(e,o){n(t,r,e,o)}))}return i=i?i.then(o,o):o()}})}function S(e,n,r){var o=f;return function(i,a){if(o===d)throw Error("Generator is already running");if(o===y){if("throw"===i)throw a;return{value:t,done:!0}}for(r.method=i,r.arg=a;;){var s=r.delegate;if(s){var c=T(s,r);if(c){if(c===m)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===f)throw o=y,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=d;var u=h(e,n,r);if("normal"===u.type){if(o=r.done?y:p,u.arg===m)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=y,r.method="throw",r.arg=u.arg)}}}function T(e,n){var r=n.method,o=e.iterator[r];if(o===t)return n.delegate=null,"throw"===r&&e.iterator.return&&(n.method="return",n.arg=t,T(e,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),m;var i=h(o,e.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,m;var a=i.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,m):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function O(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function A(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function C(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(O,this),this.reset(!0)}function P(e){if(e||""===e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}throw new TypeError(Ko(e)+" is not iterable")}return v.prototype=w,o(_,"constructor",{value:w,configurable:!0}),o(w,"constructor",{value:v,configurable:!0}),v.displayName=u(w,c,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===v||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,w):(t.__proto__=w,u(t,c,"GeneratorFunction")),t.prototype=Object.create(_),t},e.awrap=function(t){return{__await:t}},E(L.prototype),u(L.prototype,s,(function(){return this})),e.AsyncIterator=L,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new L(l(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},E(_),u(_,c,"Generator"),u(_,a,(function(){return this})),u(_,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},e.values=P,C.prototype={constructor:C,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(A),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return s.type="throw",s.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var c=r.call(a,"catchLoc"),u=r.call(a,"finallyLoc");if(c&&u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,m):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),m},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),A(n),m}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;A(n)}return o}}throw Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:P(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),m}},e}function ni(t){return function(t){if(Array.isArray(t))return oi(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||ri(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ri(t,e){if(t){if("string"==typeof t)return oi(t,e);var n={}.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?oi(t,e):void 0}}function oi(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=Array(e);n<e;n++)r[n]=t[n];return r}function ii(t,e,n,r,o,i,a){try{var s=t[i](a),c=s.value}catch(t){return void n(t)}s.done?e(c):Promise.resolve(c).then(r,o)}function si(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(t){ii(i,r,o,a,s,"next",t)}function s(t){ii(i,r,o,a,s,"throw",t)}a(void 0)}))}}function ci(t,e,n){return ui.apply(this,arguments)}function ui(){return(ui=si(ei().mark((function t(e,n,r){var o;return ei().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:for(o=k("wordcloud-main","Word Cloud");o.lastChild&&o.lastChild.className&&o.lastChild.className.includes("wordcloud-contents");)o.removeChild(o.lastChild);li(o,e,n,r);case 3:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function li(t,e,n,r){var o=document.createElement("div");o.className="wordcloud-contents",t.appendChild(o);var i=Qo(o).append("svg").attr("width",450).attr("height",450),a=null,s=Jo()().size([450,450]).words(e.map((function(t){return{text:t.text,size:t.size}}))).padding(5).rotate((function(){return 0})).font("Arial").fontSize((function(t){return function(t){var n=e.map((function(t){return t.size})),r=Math.min.apply(Math,ni(n));return(t-r)/(Math.max.apply(Math,ni(n))-r)*90+10}(t.size)})).on("end",(function(t){i.append("g").attr("transform","translate(".concat(225,",").concat(225,")")).selectAll("text").data(t).enter().append("text").each((function(t){t.originalColor=Xo[Math.floor(10*Math.random())]})).style("font-family","Arial").style("fill",(function(t){return t.originalColor})).style("font-size",(function(t){return"".concat(t.size,"px")})).attr("text-anchor","middle").attr("transform",(function(t){return"translate(".concat(t.x,",").concat(t.y,") rotate(").concat(t.rotate,")")})).text((function(t){return t.text})).style("cursor","pointer").on("click",(function(t,e){a===this?(Qo(this).classed("word-selected",!1),a=null,console.log("Word deselected: ".concat(e.text)),r(e.text)):(a&&Qo(a).classed("word-selected",!1),Qo(this).classed("word-selected",!0),a=this,console.log("Word selected: ".concat(e.text)),n(e.text))})).on("mouseover",(function(t,e){Qo(this).transition().duration(200).style("fill","orange")})).on("mouseout",(function(t,e){Qo(this).transition().duration(200).style("fill",e.originalColor),a===this&&Qo(this).style("fill","red")}))}));s.start(),_(t,[".wordcloud-contents"],100)}function hi(t,e,n,r){return fi.apply(this,arguments)}function fi(){return fi=si(ei().mark((function t(e,n,r,o){var i,a,s,c,u,l,h,f,p,d,m,g,v,w;return ei().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,y(e,n,50,r,o);case 2:i=t.sent,a=i.filteredHistoryItems,s=a.map((function(t){return t.tags})),c=new Map,u=new Set(["the","and","a","of","in","to","is","it","for","on"]),l=ti(s),t.prev=8,l.s();case 10:if((h=l.n()).done){t.next=33;break}f=h.value,p=ti(f),t.prev=13,p.s();case 15:if((d=p.n()).done){t.next=23;break}if(m=d.value,""!==(g=m.trim().toLowerCase())&&!u.has(g)){t.next=20;break}return t.abrupt("continue",21);case 20:c.set(g,(c.get(g)||0)+1);case 21:t.next=15;break;case 23:t.next=28;break;case 25:t.prev=25,t.t0=t.catch(13),p.e(t.t0);case 28:return t.prev=28,p.f(),t.finish(28);case 31:t.next=10;break;case 33:t.next=38;break;case 35:t.prev=35,t.t1=t.catch(8),l.e(t.t1);case 38:return t.prev=38,l.f(),t.finish(38);case 41:return(v=Array.from(c,(function(t){var e,n,r=(n=2,function(t){if(Array.isArray(t))return t}(e=t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,o,i,a,s=[],c=!0,u=!1;try{if(i=(n=n.call(t)).next,0===e){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=i.call(n)).done)&&(s.push(r.value),s.length!==e);c=!0);}catch(t){u=!0,o=t}finally{try{if(!c&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(u)throw o}}return s}}(e,n)||ri(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());return{text:r[0],size:r[1]}}))).sort((function(t,e){return e.size-t.size})),w=v.slice(0,100),t.abrupt("return",w);case 46:case"end":return t.stop()}}),t,null,[[8,35,38,41],[13,25,28,31]])}))),fi.apply(this,arguments)}function pi(t){return pi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},pi(t)}function di(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=Array(e);n<e;n++)r[n]=t[n];return r}function yi(){yi=function(){return e};var t,e={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(t,e,n){t[e]=n.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",s=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag";function u(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,n){return t[e]=n}}function l(t,e,n,r){var i=e&&e.prototype instanceof g?e:g,a=Object.create(i.prototype),s=new C(r||[]);return o(a,"_invoke",{value:S(t,n,s)}),a}function h(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}e.wrap=l;var f="suspendedStart",p="suspendedYield",d="executing",y="completed",m={};function g(){}function v(){}function w(){}var b={};u(b,a,(function(){return this}));var x=Object.getPrototypeOf,k=x&&x(x(P([])));k&&k!==n&&r.call(k,a)&&(b=k);var _=w.prototype=g.prototype=Object.create(b);function E(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function L(t,e){function n(o,i,a,s){var c=h(t[o],t,i);if("throw"!==c.type){var u=c.arg,l=u.value;return l&&"object"==pi(l)&&r.call(l,"__await")?e.resolve(l.__await).then((function(t){n("next",t,a,s)}),(function(t){n("throw",t,a,s)})):e.resolve(l).then((function(t){u.value=t,a(u)}),(function(t){return n("throw",t,a,s)}))}s(c.arg)}var i;o(this,"_invoke",{value:function(t,r){function o(){return new e((function(e,o){n(t,r,e,o)}))}return i=i?i.then(o,o):o()}})}function S(e,n,r){var o=f;return function(i,a){if(o===d)throw Error("Generator is already running");if(o===y){if("throw"===i)throw a;return{value:t,done:!0}}for(r.method=i,r.arg=a;;){var s=r.delegate;if(s){var c=T(s,r);if(c){if(c===m)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===f)throw o=y,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=d;var u=h(e,n,r);if("normal"===u.type){if(o=r.done?y:p,u.arg===m)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=y,r.method="throw",r.arg=u.arg)}}}function T(e,n){var r=n.method,o=e.iterator[r];if(o===t)return n.delegate=null,"throw"===r&&e.iterator.return&&(n.method="return",n.arg=t,T(e,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),m;var i=h(o,e.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,m;var a=i.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,m):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function O(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function A(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function C(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(O,this),this.reset(!0)}function P(e){if(e||""===e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}throw new TypeError(pi(e)+" is not iterable")}return v.prototype=w,o(_,"constructor",{value:w,configurable:!0}),o(w,"constructor",{value:v,configurable:!0}),v.displayName=u(w,c,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===v||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,w):(t.__proto__=w,u(t,c,"GeneratorFunction")),t.prototype=Object.create(_),t},e.awrap=function(t){return{__await:t}},E(L.prototype),u(L.prototype,s,(function(){return this})),e.AsyncIterator=L,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new L(l(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},E(_),u(_,c,"Generator"),u(_,a,(function(){return this})),u(_,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},e.values=P,C.prototype={constructor:C,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(A),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return s.type="throw",s.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var c=r.call(a,"catchLoc"),u=r.call(a,"finallyLoc");if(c&&u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,m):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),m},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),A(n),m}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;A(n)}return o}}throw Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:P(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),m}},e}function mi(t,e,n,r,o,i,a){try{var s=t[i](a),c=s.value}catch(t){return void n(t)}s.done?e(c):Promise.resolve(c).then(r,o)}function gi(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(t){mi(i,r,o,a,s,"next",t)}function s(t){mi(i,r,o,a,s,"throw",t)}a(void 0)}))}}var vi={startDate:null,endDate:null,selectedFilters:[],tempSelectedFilters:null,excludeFilters:[],enableBasicSummary:!0,enableWordCloud:!0,summaryAbortController:null,selectedFeature:E[0]};function wi(t){var e=document.querySelector(".date-range-container");[{label:"Last 24 Hours",range:"24h"},{label:"Last Week",range:"1w"},{label:"Last Month",range:"1m"},{label:"Last 3 Months",range:"3m"},{label:"Last 6 Months",range:"6m"},{label:"January",range:"jan"},{label:"February",range:"feb"},{label:"March",range:"mar"}].forEach((function(n){var r=document.createElement("button");r.className="date-range-button",r.textContent=n.label,r.setAttribute("data-range",n.range),n.range===t&&r.classList.add("selected"),r.addEventListener("click",(function(){bi(n.range,vi),Li(),document.querySelectorAll(".date-range-button").forEach((function(t){t.classList.remove("selected")})),r.classList.add("selected")})),e.appendChild(r)}))}function bi(t,e){var n,r,o=new Date;switch(t){case"24h":(n=new Date(o)).setDate(o.getDate()-1),r=o;break;case"1w":(n=new Date(o)).setDate(o.getDate()-7),r=o;break;case"1m":(n=new Date(o)).setMonth(o.getMonth()-1),r=o;break;case"3m":(n=new Date(o)).setMonth(o.getMonth()-3),r=o;break;case"6m":(n=new Date(o)).setMonth(o.getMonth()-6),r=o;break;case"jan":case"feb":case"mar":var i={jan:0,feb:1,mar:2};n=new Date(o.getFullYear(),i[t],1),r=new Date(o.getFullYear(),i[t]+1,0);break;default:n=new Date(o),r=o}return document.getElementById("display-start-date").textContent=n.toLocaleDateString(),document.getElementById("display-end-date").textContent=r.toLocaleDateString(),e.startDate=n,e.endDate=r,{startDate:n,endDate:r}}function xi(t,e){return ki.apply(this,arguments)}function ki(){return(ki=gi(yi().mark((function t(e,n){var r;return yi().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:for(r=k("recent-history","Recent History");r.lastChild&&r.lastChild.id&&r.lastChild.id.includes("recent-history-contents");)r.removeChild(r.lastChild);Oi(e,n).then((function(t){r.appendChild(t),console.log("adjusting size of newWidget"),_(r,[".widget-header",".history-container"],50)}));case 3:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function _i(t,e,n){return Ei.apply(this,arguments)}function Ei(){return(Ei=gi(yi().mark((function t(e,n,r){var o,i,a,s;return yi().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:for(o=k("basic-summary",vi.selectedFeature.feature),null===(i=o.querySelector(".widget-header")).querySelector(".dropdown")&&O(i,Ti);o.lastChild&&o.lastChild.className&&o.lastChild.className.includes("contents");)o.removeChild(o.lastChild);return t.next=6,y(e,n,50,vi.selectedFilters,vi.excludeFilters);case 6:if(a=t.sent,s=a.topNHostnamesWithTitles,"Detailed Summary"!==vi.selectedFeature.feature){t.next=13;break}return t.next=11,Se(o,s,vi.selectedFeature.context,r);case 11:case 16:case 21:t.next=26;break;case 13:if("summarizer"!==vi.selectedFeature.model){t.next=18;break}return t.next=16,Oe(o,s,vi.selectedFeature.context,r);case 18:if("writer"!==vi.selectedFeature.model){t.next=23;break}return t.next=21,Ce(o,s,vi.selectedFeature.context,vi.selectedFeature.seed_prompt,r);case 23:if("prompt"!==vi.selectedFeature.model){t.next=26;break}return t.next=26,Ie(o,s,vi.selectedFeature.context,vi.selectedFeature.seed_prompt,r);case 26:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function Li(){return Si.apply(this,arguments)}function Si(){return Si=gi(yi().mark((function t(){var e,n,r,o,i=arguments;return yi().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e=!(i.length>0&&void 0!==i[0])||i[0],n=!(i.length>1&&void 0!==i[1])||i[1],r=!(i.length>2&&void 0!==i[2])||i[2],console.log("Selected Filters:",vi.selectedFilters),console.log("Exclude Filters:",vi.excludeFilters),vi.summaryAbortController&&(vi.summaryAbortController.abort(),console.log("Previous summarization aborted.")),vi.summaryAbortController=new AbortController,o=vi.summaryAbortController.signal,!vi.enableWordCloud||!e){t.next=13;break}return t.next=11,hi(vi.startDate,vi.endDate,vi.selectedFilters,vi.excludeFilters);case 11:ci(t.sent,Zi,Xi);case 13:n&&xi(vi.startDate,vi.endDate),vi.enableBasicSummary&&r&&_i(vi.startDate,vi.endDate,o);case 15:case"end":return t.stop()}}),t)}))),Si.apply(this,arguments)}function Ti(t){vi.selectedFeature=t,chrome.storage.local.set({selectedFeature:vi.selectedFeature},(function(){console.log("Selected feature saved:",vi.selectedFeature)})),Li(!1,!1,!0)}function Oi(t,e){return Ai.apply(this,arguments)}function Ai(){return(Ai=gi(yi().mark((function t(e,n){var r,o,i;return yi().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,y(e,n,10,vi.selectedFilters,vi.excludeFilters);case 2:return r=t.sent,o=r.topNHostnamesWithTitles,(i=document.createElement("div")).className="history-container",i.id="recent-history-contents",o.forEach((function(t){var e=document.createElement("div");e.className="history-box";var n=document.createElement("div");n.className="history-header";var r=document.createElement("h3");r.innerHTML='<i class="fas fa-globe-americas"></i> '.concat(t.hostname);var o=document.createElement("p");o.innerHTML='<i class="fas fa-chart-line"></i> Hit Count: '.concat(t.count),n.appendChild(r),n.appendChild(o);var a=document.createElement("div");a.className="titles-container";var s=document.createElement("ul");if(t.titles.slice(0,10).forEach((function(t){var e=document.createElement("li"),n=document.createElement("a");n.href=t.url,n.textContent=t.title,n.target="_blank",e.appendChild(n),s.appendChild(e)})),a.appendChild(s),t.titles.length>10){var c=document.createElement("button");c.className="more-button",c.textContent="and ".concat(t.titles.length-10," more..."),c.dataset.hostname=t.hostname,c.addEventListener("click",(function(){Ci(t,s,c,0,20)})),a.appendChild(c)}e.appendChild(n),e.appendChild(a),i.appendChild(e)})),t.abrupt("return",i);case 9:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function Ci(t,e,n,r,o){var i=e.querySelectorAll("li").length,a=i+o;t.titles.slice(i,a).forEach((function(t){var n=document.createElement("li"),r=document.createElement("a");r.href=t.url,r.textContent=t.title,r.target="_blank",n.appendChild(r),e.appendChild(n)}));var s=t.titles.length-a;s>0?n.textContent="and ".concat(s," more..."):n.remove()}function Pi(){return Ii.apply(this,arguments)}function Ii(){return(Ii=gi(yi().mark((function t(){return yi().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,zi();case 2:return t.next=4,Ni();case 4:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function zi(){return ji.apply(this,arguments)}function ji(){return ji=gi(yi().mark((function t(){var e,n;return yi().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=["Code","Productivity","AI","Entertainment","Social"],t.next=3,Fi();case 3:return n=t.sent,[].concat(e,(r=n,function(t){if(Array.isArray(t))return di(t)}(r)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(r)||function(t,e){if(t){if("string"==typeof t)return di(t,e);var n={}.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?di(t,e):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())).forEach((function(t){qi(t,!1,"category-filters")})),t.next=8,new Promise((function(t){chrome.storage.local.get(["selectedFilters"],(function(e){t(e.selectedFilters||[])}))}));case 8:vi.selectedFilters=t.sent,Yi("category-filters");case 10:case"end":return t.stop()}var r}),t)}))),ji.apply(this,arguments)}function Ni(){return $i.apply(this,arguments)}function $i(){return $i=gi(yi().mark((function t(){return yi().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Di();case 2:return t.sent.forEach((function(t){qi(t,!1,"exclude-filters")})),t.next=6,new Promise((function(t){chrome.storage.local.get(["selectedExcludeFilters"],(function(e){t(e.selectedExcludeFilters||[])}))}));case 6:vi.excludeFilters=t.sent,Yi("exclude-filters");case 8:case"end":return t.stop()}}),t)}))),$i.apply(this,arguments)}function Fi(){return new Promise((function(t){chrome.storage.local.get(["customFilters"],(function(e){t(e.customFilters||[])}))}))}function Ri(){chrome.storage.local.set({selectedFilters:vi.selectedFilters},(function(){console.log("Selected filters saved:",vi.selectedFilters)}))}function Mi(t){chrome.storage.local.set({customFilters:t},(function(){console.log("Custom filters saved:",t)}))}function Di(){return new Promise((function(t){chrome.storage.local.get(["customExcludeFilters"],(function(e){t(e.customExcludeFilters||[])}))}))}function Gi(){chrome.storage.local.set({selectedExcludeFilters:vi.excludeFilters},(function(){console.log("Selected exclude filters saved:",vi.excludeFilters)}))}function Bi(t){chrome.storage.local.set({customExcludeFilters:t},(function(){console.log("Custom exclude filters saved:",t)}))}function qi(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"category-filters",r="exclude-filters"===n?"exclude-filters":"category-filters",o=document.getElementById(r),i=document.createElement("button");if(i.className="category-toggle-button",i.textContent=t,i.dataset.label=t,i.dataset.default=e,!e){i.classList.add("custom");var a=document.createElement("button");a.className="remove-btn",a.textContent="✕",a.title="Remove filter",a.addEventListener("click",function(){var e=gi(yi().mark((function e(r){return yi().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r.stopPropagation(),e.next=3,Wi(t,n);case 3:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),i.appendChild(a)}"exclude-filters"===n?vi.excludeFilters.includes(t)&&i.classList.add("active"):vi.selectedFilters.includes(t)&&i.classList.add("active"),i.addEventListener("click",(function(){if("exclude-filters"===n){var e=vi.excludeFilters.indexOf(t);e>-1?(vi.excludeFilters.splice(e,1),i.classList.remove("active")):(vi.excludeFilters.push(t),i.classList.add("active")),Gi()}else if(null===vi.tempSelectedFilters){var r=vi.selectedFilters.indexOf(t);r>-1?(vi.selectedFilters.splice(r,1),i.classList.remove("active")):(vi.selectedFilters.push(t),i.classList.add("active")),Ri()}else vi.selectedFilters=vi.tempSelectedFilters,vi.tempSelectedFilters=null;Li()})),o.appendChild(i)}function Wi(t,e){return Hi.apply(this,arguments)}function Hi(){return(Hi=gi(yi().mark((function t(e,n){var r,o,i,a,s,c,u,l;return yi().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if("exclude-filters"!==n){t.next=12;break}return(r=vi.excludeFilters.indexOf(e))>-1&&(vi.excludeFilters.splice(r,1),Gi()),t.next=5,Di();case 5:o=t.sent,(i=o.indexOf(e))>-1&&(o.splice(i,1),Bi(o)),(a=document.querySelector('.category-toggle-button[data-label="'.concat(e,'"]')))&&a.remove(),t.next=21;break;case 12:return(s=vi.selectedFilters.indexOf(e))>-1&&(vi.selectedFilters.splice(s,1),Ri()),t.next=16,Fi();case 16:c=t.sent,(u=c.indexOf(e))>-1&&(c.splice(u,1),Mi(c)),(l=document.querySelector('.category-toggle-button[data-label="'.concat(e,'"]')))&&l.remove();case 21:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function Yi(){"exclude-filters"===(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"category-filters")?document.querySelectorAll("#exclude-filters .category-toggle-button").forEach((function(t){var e=t.dataset.label;vi.excludeFilters.includes(e)?t.classList.add("active"):t.classList.remove("active")})):document.querySelectorAll("#category-filters .category-toggle-button").forEach((function(t){var e=t.dataset.label;vi.selectedFilters.includes(e)?t.classList.add("active"):t.classList.remove("active")}))}function Zi(t){null===vi.tempSelectedFilters&&(vi.tempSelectedFilters=vi.selectedFilters),vi.selectedFilters=[t],Li(!1)}function Xi(t){return Qi.apply(this,arguments)}function Qi(){return(Qi=gi(yi().mark((function t(e){return yi().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:vi.tempSelectedFilters&&(vi.selectedFilters=vi.tempSelectedFilters,vi.tempSelectedFilters=null,Li(!1));case 1:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function Ui(){return Vi.apply(this,arguments)}function Vi(){return(Vi=gi(yi().mark((function t(){return yi().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:vi.tempSelectedFilters&&(vi.selectedFilters=vi.tempSelectedFilters,vi.tempSelectedFilters=null,Li(!1));case 1:case"end":return t.stop()}}),t)})))).apply(this,arguments)}document.addEventListener("DOMContentLoaded",gi(yi().mark((function t(){var e,n;return yi().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return wi("1w"),r=void 0,(r=document.createElement("button")).id="refresh-button",r.textContent="Refresh",document.querySelector(".date-range-container").appendChild(r),(e=bi("1w",vi)).startDate,e.endDate,t.next=6,Pi();case 6:return t.next=8,new Promise((function(t){chrome.storage.local.get(["selectedFeature"],(function(e){t(e.selectedFeature||null)}))}));case 8:return(n=t.sent)&&(vi.selectedFeature=n),void 0,o=document.querySelector(".widget-container"),window.masonryInstance=new(x())(o,{itemSelector:".widget",columnWidth:".grid-sizer",percentPosition:!0,gutter:10,horizontalOrder:!0}),t.next=13,Li();case 13:document.getElementById("refresh-button").addEventListener("click",gi(yi().mark((function t(){return yi().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Ui();case 2:Li();case 3:case"end":return t.stop()}}),t)}))));case 14:case"end":return t.stop()}var r,o}),t)})))),document.getElementById("add-filter-form").addEventListener("submit",function(){var t=gi(yi().mark((function t(e){var n,r,o;return yi().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e.preventDefault(),n=document.getElementById("new-filter-input"),!(r=n.value.trim())||vi.selectedFilters.includes(r)){t.next=11;break}return qi(r,!1,"category-filters"),t.next=7,Fi();case 7:(o=t.sent).push(r),Mi(o),n.value="";case 11:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),document.getElementById("add-exclude-filter-form").addEventListener("submit",function(){var t=gi(yi().mark((function t(e){var n,r,o;return yi().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e.preventDefault(),n=document.getElementById("new-exclude-filter-input"),!(r=n.value.trim())||vi.excludeFilters.includes(r)){t.next=11;break}return qi(r,!1,"exclude-filters"),t.next=7,Di();case 7:(o=t.sent).push(r),Bi(o),n.value="";case 11:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,