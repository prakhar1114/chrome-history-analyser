/*! For license information please see popup.bundle.js.LICENSE.txt */
(()=>{"use strict";function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t(e)}function e(){e=function(){return r};var n,r={},o=Object.prototype,i=o.hasOwnProperty,a=Object.defineProperty||function(t,e,n){t[e]=n.value},c="function"==typeof Symbol?Symbol:{},u=c.iterator||"@@iterator",s=c.asyncIterator||"@@asyncIterator",l=c.toStringTag||"@@toStringTag";function f(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{f({},"")}catch(n){f=function(t,e,n){return t[e]=n}}function h(t,e,n,r){var o=e&&e.prototype instanceof w?e:w,i=Object.create(o.prototype),c=new S(r||[]);return a(i,"_invoke",{value:j(t,n,c)}),i}function d(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}r.wrap=h;var y="suspendedStart",p="suspendedYield",m="executing",v="completed",g={};function w(){}function x(){}function E(){}var L={};f(L,u,(function(){return this}));var b=Object.getPrototypeOf,I=b&&b(b(T([])));I&&I!==o&&i.call(I,u)&&(L=I);var k=E.prototype=w.prototype=Object.create(L);function C(t){["next","throw","return"].forEach((function(e){f(t,e,(function(t){return this._invoke(e,t)}))}))}function O(e,n){function r(o,a,c,u){var s=d(e[o],e,a);if("throw"!==s.type){var l=s.arg,f=l.value;return f&&"object"==t(f)&&i.call(f,"__await")?n.resolve(f.__await).then((function(t){r("next",t,c,u)}),(function(t){r("throw",t,c,u)})):n.resolve(f).then((function(t){l.value=t,c(l)}),(function(t){return r("throw",t,c,u)}))}u(s.arg)}var o;a(this,"_invoke",{value:function(t,e){function i(){return new n((function(n,o){r(t,e,n,o)}))}return o=o?o.then(i,i):i()}})}function j(t,e,r){var o=y;return function(i,a){if(o===m)throw Error("Generator is already running");if(o===v){if("throw"===i)throw a;return{value:n,done:!0}}for(r.method=i,r.arg=a;;){var c=r.delegate;if(c){var u=P(c,r);if(u){if(u===g)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===y)throw o=v,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=m;var s=d(t,e,r);if("normal"===s.type){if(o=r.done?v:p,s.arg===g)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(o=v,r.method="throw",r.arg=s.arg)}}}function P(t,e){var r=e.method,o=t.iterator[r];if(o===n)return e.delegate=null,"throw"===r&&t.iterator.return&&(e.method="return",e.arg=n,P(t,e),"throw"===e.method)||"return"!==r&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var i=d(o,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,g;var a=i.arg;return a?a.done?(e[t.resultName]=a.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,g):a:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,g)}function _(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function B(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function S(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(_,this),this.reset(!0)}function T(e){if(e||""===e){var r=e[u];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,a=function t(){for(;++o<e.length;)if(i.call(e,o))return t.value=e[o],t.done=!1,t;return t.value=n,t.done=!0,t};return a.next=a}}throw new TypeError(t(e)+" is not iterable")}return x.prototype=E,a(k,"constructor",{value:E,configurable:!0}),a(E,"constructor",{value:x,configurable:!0}),x.displayName=f(E,l,"GeneratorFunction"),r.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===x||"GeneratorFunction"===(e.displayName||e.name))},r.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,E):(t.__proto__=E,f(t,l,"GeneratorFunction")),t.prototype=Object.create(k),t},r.awrap=function(t){return{__await:t}},C(O.prototype),f(O.prototype,s,(function(){return this})),r.AsyncIterator=O,r.async=function(t,e,n,o,i){void 0===i&&(i=Promise);var a=new O(h(t,e,n,o),i);return r.isGeneratorFunction(e)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},C(k),f(k,l,"Generator"),f(k,u,(function(){return this})),f(k,"toString",(function(){return"[object Generator]"})),r.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},r.values=T,S.prototype={constructor:S,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(B),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,o){return c.type="throw",c.arg=t,e.next=r,o&&(e.method="next",e.arg=n),!!o}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],c=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var u=i.call(a,"catchLoc"),s=i.call(a,"finallyLoc");if(u&&s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!s)throw Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),g},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),B(n),g}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;B(n)}return o}}throw Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:T(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),g}},r}function n(t,e,n,r,o,i,a){try{var c=t[i](a),u=c.value}catch(t){return void n(t)}c.done?e(u):Promise.resolve(u).then(r,o)}var r,o;function i(){return(t=e().mark((function t(){return e().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",new Promise((function(t,e){if(r)t(r);else{var n=indexedDB.open("HistoryIndexerDB",1);n.onerror=function(t){console.error("Database error:",t.target.errorCode),e(t.target.errorCode)},n.onupgradeneeded=function(t){var e=(r=t.target.result).createObjectStore("history",{keyPath:"id"});e.createIndex("url","url",{unique:!1}),e.createIndex("title","title",{unique:!1}),e.createIndex("tags","tags",{unique:!1,multiEntry:!0}),e.createIndex("summary","summary",{unique:!1}),e.createIndex("lastVisitTime","lastVisitTime",{unique:!0}),console.log("Database upgraded")},n.onsuccess=function(e){r=e.target.result,t(r)}}})));case 1:case"end":return t.stop()}}),t)})),i=function(){var e=this,r=arguments;return new Promise((function(o,i){var a=t.apply(e,r);function c(t){n(a,o,i,c,u,"next",t)}function u(t){n(a,o,i,c,u,"throw",t)}c(void 0)}))}).apply(this,arguments);var t}function a(){chrome.storage.local.get("indexPercentage",(function(t){document.getElementById("indexPercentage").textContent="Indexed ".concat(t.indexPercentage,"% of history")}))}document.addEventListener("DOMContentLoaded",(function(){(function(){return i.apply(this,arguments)})().then((function(t){o=t})),document.getElementById("indexOldDataBtn").addEventListener("click",(function(){chrome.runtime.sendMessage({action:"indexOldData"},(function(t){console.log(t.status),alert("Indexing old data started. This may take a while.")}))})),document.getElementById("refreshBtn").addEventListener("click",(function(){chrome.runtime.sendMessage({action:"refreshIndexPercentage"},(function(t){console.log(t.status),a()}))})),document.getElementById("continueIndexing").addEventListener("click",(function(){chrome.runtime.sendMessage({action:"continueIndexing"},(function(t){console.log(t.status),alert("Indexing old data continued.")}))})),document.getElementById("searchBtn").addEventListener("click",(function(){var t=document.getElementById("searchInput").value.trim().toLowerCase();if(""!==t){var e=o.transaction(["history"],"readonly").objectStore("history"),n=[];e.openCursor().onsuccess=function(e){var r=e.target.result;if(r){var o=r.value;(o.title&&o.title.toLowerCase().includes(t)||o.summary&&o.summary.toLowerCase().includes(t)||o.tags&&Array.isArray(o.tags)&&o.tags.some((function(e){return e.toLowerCase().includes(t)})))&&n.push(o),r.continue()}else!function(t){var e=document.getElementById("results");if(e.innerHTML="",0!==t.length){var n=document.createElement("div");n.className="scrollable-container",t.forEach((function(t){var e=document.createElement("div");e.className="result-item";var r=document.createElement("a");r.href=t.url,r.textContent=t.title||t.url,r.target="_blank";var o=document.createElement("p");o.textContent="Tags: ".concat(t.tags.join(", "));var i=document.createElement("p");i.textContent="Summary: ".concat(t.summary),e.appendChild(r),e.appendChild(o),e.appendChild(i),n.appendChild(e)})),e.appendChild(n),document.addEventListener("click",(function(t){e.contains(t.target)||(e.innerHTML="",document.getElementById("searchInput").value="")}))}else e.textContent="No results found."}(n)}}else alert("Please enter a search term.")})),document.getElementById("showDashboardBtn").addEventListener("click",(function(){chrome.runtime.sendMessage({action:"displaySummary"})})),a()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,