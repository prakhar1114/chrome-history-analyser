/*! For license information please see popup.bundle.js.LICENSE.txt */
(()=>{"use strict";function t(t){return Array.isArray?Array.isArray(t):"[object Array]"===c(t)}function e(t){return"string"==typeof t}function r(t){return"number"==typeof t}function n(t){return"object"==typeof t}function o(t){return null!=t}function i(t){return!t.trim().length}function c(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":Object.prototype.toString.call(t)}const a=Object.prototype.hasOwnProperty;class s{constructor(t){this._keys=[],this._keyMap={};let e=0;t.forEach((t=>{let r=u(t);this._keys.push(r),this._keyMap[r.id]=r,e+=r.weight})),this._keys.forEach((t=>{t.weight/=e}))}get(t){return this._keyMap[t]}keys(){return this._keys}toJSON(){return JSON.stringify(this._keys)}}function u(r){let n=null,o=null,i=null,c=1,s=null;if(e(r)||t(r))i=r,n=h(r),o=l(r);else{if(!a.call(r,"name"))throw new Error("Missing name property in key");const t=r.name;if(i=t,a.call(r,"weight")&&(c=r.weight,c<=0))throw new Error((t=>`Property 'weight' in key '${t}' must be a positive integer`)(t));n=h(t),o=l(t),s=r.getFn}return{path:n,id:o,weight:c,src:i,getFn:s}}function h(e){return t(e)?e:e.split(".")}function l(e){return t(e)?e.join("."):e}var f={isCaseSensitive:!1,includeScore:!1,keys:[],shouldSort:!0,sortFn:(t,e)=>t.score===e.score?t.idx<e.idx?-1:1:t.score<e.score?-1:1,includeMatches:!1,findAllMatches:!1,minMatchCharLength:1,location:0,threshold:.6,distance:100,useExtendedSearch:!1,getFn:function(i,a){let s=[],u=!1;const h=(i,a,l)=>{if(o(i))if(a[l]){const f=i[a[l]];if(!o(f))return;if(l===a.length-1&&(e(f)||r(f)||function(t){return!0===t||!1===t||function(t){return n(t)&&null!==t}(t)&&"[object Boolean]"==c(t)}(f)))s.push(function(t){return null==t?"":function(t){if("string"==typeof t)return t;let e=t+"";return"0"==e&&1/t==-1/0?"-0":e}(t)}(f));else if(t(f)){u=!0;for(let t=0,e=f.length;t<e;t+=1)h(f[t],a,l+1)}else a.length&&h(f,a,l+1)}else s.push(i)};return h(i,e(a)?a.split("."):a,0),u?s:s[0]},ignoreLocation:!1,ignoreFieldNorm:!1,fieldNormWeight:1};const d=/[^ ]+/g;class p{constructor({getFn:t=f.getFn,fieldNormWeight:e=f.fieldNormWeight}={}){this.norm=function(t=1,e=3){const r=new Map,n=Math.pow(10,e);return{get(e){const o=e.match(d).length;if(r.has(o))return r.get(o);const i=1/Math.pow(o,.5*t),c=parseFloat(Math.round(i*n)/n);return r.set(o,c),c},clear(){r.clear()}}}(e,3),this.getFn=t,this.isCreated=!1,this.setIndexRecords()}setSources(t=[]){this.docs=t}setIndexRecords(t=[]){this.records=t}setKeys(t=[]){this.keys=t,this._keysMap={},t.forEach(((t,e)=>{this._keysMap[t.id]=e}))}create(){!this.isCreated&&this.docs.length&&(this.isCreated=!0,e(this.docs[0])?this.docs.forEach(((t,e)=>{this._addString(t,e)})):this.docs.forEach(((t,e)=>{this._addObject(t,e)})),this.norm.clear())}add(t){const r=this.size();e(t)?this._addString(t,r):this._addObject(t,r)}removeAt(t){this.records.splice(t,1);for(let e=t,r=this.size();e<r;e+=1)this.records[e].i-=1}getValueForItemAtKeyId(t,e){return t[this._keysMap[e]]}size(){return this.records.length}_addString(t,e){if(!o(t)||i(t))return;let r={v:t,i:e,n:this.norm.get(t)};this.records.push(r)}_addObject(r,n){let c={i:n,$:{}};this.keys.forEach(((n,a)=>{let s=n.getFn?n.getFn(r):this.getFn(r,n.path);if(o(s))if(t(s)){let r=[];const n=[{nestedArrIndex:-1,value:s}];for(;n.length;){const{nestedArrIndex:c,value:a}=n.pop();if(o(a))if(e(a)&&!i(a)){let t={v:a,i:c,n:this.norm.get(a)};r.push(t)}else t(a)&&a.forEach(((t,e)=>{n.push({nestedArrIndex:e,value:t})}))}c.$[a]=r}else if(e(s)&&!i(s)){let t={v:s,n:this.norm.get(s)};c.$[a]=t}})),this.records.push(c)}toJSON(){return{keys:this.keys,records:this.records}}}function g(t,e,{getFn:r=f.getFn,fieldNormWeight:n=f.fieldNormWeight}={}){const o=new p({getFn:r,fieldNormWeight:n});return o.setKeys(t.map(u)),o.setSources(e),o.create(),o}function y(t,{errors:e=0,currentLocation:r=0,expectedLocation:n=0,distance:o=f.distance,ignoreLocation:i=f.ignoreLocation}={}){const c=e/t.length;if(i)return c;const a=Math.abs(n-r);return o?c+a/o:a?1:c}const m=32;function v(t){let e={};for(let r=0,n=t.length;r<n;r+=1){const o=t.charAt(r);e[o]=(e[o]||0)|1<<n-r-1}return e}class x{constructor(t,{location:e=f.location,threshold:r=f.threshold,distance:n=f.distance,includeMatches:o=f.includeMatches,findAllMatches:i=f.findAllMatches,minMatchCharLength:c=f.minMatchCharLength,isCaseSensitive:a=f.isCaseSensitive,ignoreLocation:s=f.ignoreLocation}={}){if(this.options={location:e,threshold:r,distance:n,includeMatches:o,findAllMatches:i,minMatchCharLength:c,isCaseSensitive:a,ignoreLocation:s},this.pattern=a?t:t.toLowerCase(),this.chunks=[],!this.pattern.length)return;const u=(t,e)=>{this.chunks.push({pattern:t,alphabet:v(t),startIndex:e})},h=this.pattern.length;if(h>m){let t=0;const e=h%m,r=h-e;for(;t<r;)u(this.pattern.substr(t,m),t),t+=m;if(e){const t=h-m;u(this.pattern.substr(t),t)}}else u(this.pattern,0)}searchIn(t){const{isCaseSensitive:e,includeMatches:r}=this.options;if(e||(t=t.toLowerCase()),this.pattern===t){let e={isMatch:!0,score:0};return r&&(e.indices=[[0,t.length-1]]),e}const{location:n,distance:o,threshold:i,findAllMatches:c,minMatchCharLength:a,ignoreLocation:s}=this.options;let u=[],h=0,l=!1;this.chunks.forEach((({pattern:e,alphabet:d,startIndex:p})=>{const{isMatch:g,score:v,indices:x}=function(t,e,r,{location:n=f.location,distance:o=f.distance,threshold:i=f.threshold,findAllMatches:c=f.findAllMatches,minMatchCharLength:a=f.minMatchCharLength,includeMatches:s=f.includeMatches,ignoreLocation:u=f.ignoreLocation}={}){if(e.length>m)throw new Error("Pattern length exceeds max of 32.");const h=e.length,l=t.length,d=Math.max(0,Math.min(n,l));let p=i,g=d;const v=a>1||s,x=v?Array(l):[];let w;for(;(w=t.indexOf(e,g))>-1;){let t=y(e,{currentLocation:w,expectedLocation:d,distance:o,ignoreLocation:u});if(p=Math.min(t,p),g=w+h,v){let t=0;for(;t<h;)x[w+t]=1,t+=1}}g=-1;let L=[],b=1,E=h+l;const M=1<<h-1;for(let n=0;n<h;n+=1){let i=0,a=E;for(;i<a;)y(e,{errors:n,currentLocation:d+a,expectedLocation:d,distance:o,ignoreLocation:u})<=p?i=a:E=a,a=Math.floor((E-i)/2+i);E=a;let s=Math.max(1,d-a+1),f=c?l:Math.min(d+a,l)+h,m=Array(f+2);m[f+1]=(1<<n)-1;for(let i=f;i>=s;i-=1){let c=i-1,a=r[t.charAt(c)];if(v&&(x[c]=+!!a),m[i]=(m[i+1]<<1|1)&a,n&&(m[i]|=(L[i+1]|L[i])<<1|1|L[i+1]),m[i]&M&&(b=y(e,{errors:n,currentLocation:c,expectedLocation:d,distance:o,ignoreLocation:u}),b<=p)){if(p=b,g=c,g<=d)break;s=Math.max(1,2*d-g)}}if(y(e,{errors:n+1,currentLocation:d,expectedLocation:d,distance:o,ignoreLocation:u})>p)break;L=m}const _={isMatch:g>=0,score:Math.max(.001,b)};if(v){const t=function(t=[],e=f.minMatchCharLength){let r=[],n=-1,o=-1,i=0;for(let c=t.length;i<c;i+=1){let c=t[i];c&&-1===n?n=i:c||-1===n||(o=i-1,o-n+1>=e&&r.push([n,o]),n=-1)}return t[i-1]&&i-n>=e&&r.push([n,i-1]),r}(x,a);t.length?s&&(_.indices=t):_.isMatch=!1}return _}(t,e,d,{location:n+p,distance:o,threshold:i,findAllMatches:c,minMatchCharLength:a,includeMatches:r,ignoreLocation:s});g&&(l=!0),h+=v,g&&x&&(u=[...u,...x])}));let d={isMatch:l,score:l?h/this.chunks.length:1};return l&&r&&(d.indices=u),d}}class w{constructor(t){this.pattern=t}static isMultiMatch(t){return L(t,this.multiRegex)}static isSingleMatch(t){return L(t,this.singleRegex)}search(){}}function L(t,e){const r=t.match(e);return r?r[1]:null}class b extends w{constructor(t,{location:e=f.location,threshold:r=f.threshold,distance:n=f.distance,includeMatches:o=f.includeMatches,findAllMatches:i=f.findAllMatches,minMatchCharLength:c=f.minMatchCharLength,isCaseSensitive:a=f.isCaseSensitive,ignoreLocation:s=f.ignoreLocation}={}){super(t),this._bitapSearch=new x(t,{location:e,threshold:r,distance:n,includeMatches:o,findAllMatches:i,minMatchCharLength:c,isCaseSensitive:a,ignoreLocation:s})}static get type(){return"fuzzy"}static get multiRegex(){return/^"(.*)"$/}static get singleRegex(){return/^(.*)$/}search(t){return this._bitapSearch.searchIn(t)}}class E extends w{constructor(t){super(t)}static get type(){return"include"}static get multiRegex(){return/^'"(.*)"$/}static get singleRegex(){return/^'(.*)$/}search(t){let e,r=0;const n=[],o=this.pattern.length;for(;(e=t.indexOf(this.pattern,r))>-1;)r=e+o,n.push([e,r-1]);const i=!!n.length;return{isMatch:i,score:i?0:1,indices:n}}}const M=[class extends w{constructor(t){super(t)}static get type(){return"exact"}static get multiRegex(){return/^="(.*)"$/}static get singleRegex(){return/^=(.*)$/}search(t){const e=t===this.pattern;return{isMatch:e,score:e?0:1,indices:[0,this.pattern.length-1]}}},E,class extends w{constructor(t){super(t)}static get type(){return"prefix-exact"}static get multiRegex(){return/^\^"(.*)"$/}static get singleRegex(){return/^\^(.*)$/}search(t){const e=t.startsWith(this.pattern);return{isMatch:e,score:e?0:1,indices:[0,this.pattern.length-1]}}},class extends w{constructor(t){super(t)}static get type(){return"inverse-prefix-exact"}static get multiRegex(){return/^!\^"(.*)"$/}static get singleRegex(){return/^!\^(.*)$/}search(t){const e=!t.startsWith(this.pattern);return{isMatch:e,score:e?0:1,indices:[0,t.length-1]}}},class extends w{constructor(t){super(t)}static get type(){return"inverse-suffix-exact"}static get multiRegex(){return/^!"(.*)"\$$/}static get singleRegex(){return/^!(.*)\$$/}search(t){const e=!t.endsWith(this.pattern);return{isMatch:e,score:e?0:1,indices:[0,t.length-1]}}},class extends w{constructor(t){super(t)}static get type(){return"suffix-exact"}static get multiRegex(){return/^"(.*)"\$$/}static get singleRegex(){return/^(.*)\$$/}search(t){const e=t.endsWith(this.pattern);return{isMatch:e,score:e?0:1,indices:[t.length-this.pattern.length,t.length-1]}}},class extends w{constructor(t){super(t)}static get type(){return"inverse-exact"}static get multiRegex(){return/^!"(.*)"$/}static get singleRegex(){return/^!(.*)$/}search(t){const e=-1===t.indexOf(this.pattern);return{isMatch:e,score:e?0:1,indices:[0,t.length-1]}}},b],_=M.length,k=/ +(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/,S=new Set([b.type,E.type]);const I=[];function O(t,e){for(let r=0,n=I.length;r<n;r+=1){let n=I[r];if(n.condition(t,e))return new n(t,e)}return new x(t,e)}const j="$and",C="$path",N=t=>!(!t[j]&&!t.$or),A=t=>({[j]:Object.keys(t).map((e=>({[e]:t[e]})))});function F(r,o,{auto:i=!0}={}){const c=r=>{let a=Object.keys(r);const s=(t=>!!t[C])(r);if(!s&&a.length>1&&!N(r))return c(A(r));if((e=>!t(e)&&n(e)&&!N(e))(r)){const t=s?r[C]:a[0],n=s?r.$val:r[t];if(!e(n))throw new Error((t=>`Invalid value for key ${t}`)(t));const c={keyId:l(t),pattern:n};return i&&(c.searcher=O(n,o)),c}let u={children:[],operator:a[0]};return a.forEach((e=>{const n=r[e];t(n)&&n.forEach((t=>{u.children.push(c(t))}))})),u};return N(r)||(r=A(r)),c(r)}function P(t,e){const r=t.matches;e.matches=[],o(r)&&r.forEach((t=>{if(!o(t.indices)||!t.indices.length)return;const{indices:r,value:n}=t;let i={indices:r,value:n};t.key&&(i.key=t.key.src),t.idx>-1&&(i.refIndex=t.idx),e.matches.push(i)}))}function $(t,e){e.score=t.score}class G{constructor(t,e={},r){this.options={...f,...e},this.options.useExtendedSearch,this._keyStore=new s(this.options.keys),this.setCollection(t,r)}setCollection(t,e){if(this._docs=t,e&&!(e instanceof p))throw new Error("Incorrect 'index' type");this._myIndex=e||g(this.options.keys,this._docs,{getFn:this.options.getFn,fieldNormWeight:this.options.fieldNormWeight})}add(t){o(t)&&(this._docs.push(t),this._myIndex.add(t))}remove(t=()=>!1){const e=[];for(let r=0,n=this._docs.length;r<n;r+=1){const o=this._docs[r];t(o,r)&&(this.removeAt(r),r-=1,n-=1,e.push(o))}return e}removeAt(t){this._docs.splice(t,1),this._myIndex.removeAt(t)}getIndex(){return this._myIndex}search(t,{limit:n=-1}={}){const{includeMatches:o,includeScore:i,shouldSort:c,sortFn:a,ignoreFieldNorm:s}=this.options;let u=e(t)?e(this._docs[0])?this._searchStringList(t):this._searchObjectList(t):this._searchLogical(t);return function(t,{ignoreFieldNorm:e=f.ignoreFieldNorm}){t.forEach((t=>{let r=1;t.matches.forEach((({key:t,norm:n,score:o})=>{const i=t?t.weight:null;r*=Math.pow(0===o&&i?Number.EPSILON:o,(i||1)*(e?1:n))})),t.score=r}))}(u,{ignoreFieldNorm:s}),c&&u.sort(a),r(n)&&n>-1&&(u=u.slice(0,n)),function(t,e,{includeMatches:r=f.includeMatches,includeScore:n=f.includeScore}={}){const o=[];return r&&o.push(P),n&&o.push($),t.map((t=>{const{idx:r}=t,n={item:e[r],refIndex:r};return o.length&&o.forEach((e=>{e(t,n)})),n}))}(u,this._docs,{includeMatches:o,includeScore:i})}_searchStringList(t){const e=O(t,this.options),{records:r}=this._myIndex,n=[];return r.forEach((({v:t,i:r,n:i})=>{if(!o(t))return;const{isMatch:c,score:a,indices:s}=e.searchIn(t);c&&n.push({item:t,idx:r,matches:[{score:a,value:t,norm:i,indices:s}]})})),n}_searchLogical(t){const e=F(t,this.options),r=(t,e,n)=>{if(!t.children){const{keyId:r,searcher:o}=t,i=this._findMatches({key:this._keyStore.get(r),value:this._myIndex.getValueForItemAtKeyId(e,r),searcher:o});return i&&i.length?[{idx:n,item:e,matches:i}]:[]}const o=[];for(let i=0,c=t.children.length;i<c;i+=1){const c=t.children[i],a=r(c,e,n);if(a.length)o.push(...a);else if(t.operator===j)return[]}return o},n=this._myIndex.records,i={},c=[];return n.forEach((({$:t,i:n})=>{if(o(t)){let o=r(e,t,n);o.length&&(i[n]||(i[n]={idx:n,item:t,matches:[]},c.push(i[n])),o.forEach((({matches:t})=>{i[n].matches.push(...t)})))}})),c}_searchObjectList(t){const e=O(t,this.options),{keys:r,records:n}=this._myIndex,i=[];return n.forEach((({$:t,i:n})=>{if(!o(t))return;let c=[];r.forEach(((r,n)=>{c.push(...this._findMatches({key:r,value:t[n],searcher:e}))})),c.length&&i.push({idx:n,item:t,matches:c})})),i}_findMatches({key:e,value:r,searcher:n}){if(!o(r))return[];let i=[];if(t(r))r.forEach((({v:t,i:r,n:c})=>{if(!o(t))return;const{isMatch:a,score:s,indices:u}=n.searchIn(t);a&&i.push({score:s,key:e,value:t,idx:r,norm:c,indices:u})}));else{const{v:t,n:o}=r,{isMatch:c,score:a,indices:s}=n.searchIn(t);c&&i.push({score:a,key:e,value:t,norm:o,indices:s})}return i}}function T(t){return T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},T(t)}function R(){R=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(t,e,r){t[e]=r.value},i="function"==typeof Symbol?Symbol:{},c=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function u(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,r){return t[e]=r}}function h(t,e,r,n){var i=e&&e.prototype instanceof m?e:m,c=Object.create(i.prototype),a=new j(n||[]);return o(c,"_invoke",{value:k(t,r,a)}),c}function l(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=h;var f="suspendedStart",d="suspendedYield",p="executing",g="completed",y={};function m(){}function v(){}function x(){}var w={};u(w,c,(function(){return this}));var L=Object.getPrototypeOf,b=L&&L(L(C([])));b&&b!==r&&n.call(b,c)&&(w=b);var E=x.prototype=m.prototype=Object.create(w);function M(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(o,i,c,a){var s=l(t[o],t,i);if("throw"!==s.type){var u=s.arg,h=u.value;return h&&"object"==T(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){r("next",t,c,a)}),(function(t){r("throw",t,c,a)})):e.resolve(h).then((function(t){u.value=t,c(u)}),(function(t){return r("throw",t,c,a)}))}a(s.arg)}var i;o(this,"_invoke",{value:function(t,n){function o(){return new e((function(e,o){r(t,n,e,o)}))}return i=i?i.then(o,o):o()}})}function k(e,r,n){var o=f;return function(i,c){if(o===p)throw Error("Generator is already running");if(o===g){if("throw"===i)throw c;return{value:t,done:!0}}for(n.method=i,n.arg=c;;){var a=n.delegate;if(a){var s=S(a,n);if(s){if(s===y)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===f)throw o=g,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=p;var u=l(e,r,n);if("normal"===u.type){if(o=n.done?g:d,u.arg===y)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(o=g,n.method="throw",n.arg=u.arg)}}}function S(e,r){var n=r.method,o=e.iterator[n];if(o===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,S(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var i=l(o,e.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,y;var c=i.arg;return c?c.done?(r[e.resultName]=c.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):c:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function I(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function j(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(I,this),this.reset(!0)}function C(e){if(e||""===e){var r=e[c];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function r(){for(;++o<e.length;)if(n.call(e,o))return r.value=e[o],r.done=!1,r;return r.value=t,r.done=!0,r};return i.next=i}}throw new TypeError(T(e)+" is not iterable")}return v.prototype=x,o(E,"constructor",{value:x,configurable:!0}),o(x,"constructor",{value:v,configurable:!0}),v.displayName=u(x,s,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===v||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,x):(t.__proto__=x,u(t,s,"GeneratorFunction")),t.prototype=Object.create(E),t},e.awrap=function(t){return{__await:t}},M(_.prototype),u(_.prototype,a,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var c=new _(h(t,r,n,o),i);return e.isGeneratorFunction(r)?c:c.next().then((function(t){return t.done?t.value:c.next()}))},M(E),u(E,s,"Generator"),u(E,c,(function(){return this})),u(E,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=C,j.prototype={constructor:j,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(O),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function o(n,o){return a.type="throw",a.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var c=this.tryEntries[i],a=c.completion;if("root"===c.tryLoc)return o("end");if(c.tryLoc<=this.prev){var s=n.call(c,"catchLoc"),u=n.call(c,"finallyLoc");if(s&&u){if(this.prev<c.catchLoc)return o(c.catchLoc,!0);if(this.prev<c.finallyLoc)return o(c.finallyLoc)}else if(s){if(this.prev<c.catchLoc)return o(c.catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<c.finallyLoc)return o(c.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var c=i?i.completion:{};return c.type=t,c.arg=e,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(c)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),O(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;O(r)}return o}}throw Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:C(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function W(t,e,r,n,o,i,c){try{var a=t[i](c),s=a.value}catch(t){return void r(t)}a.done?e(s):Promise.resolve(s).then(n,o)}function B(t){return function(){var e=this,r=arguments;return new Promise((function(n,o){var i=t.apply(e,r);function c(t){W(i,n,o,c,a,"next",t)}function a(t){W(i,n,o,c,a,"throw",t)}c(void 0)}))}}var q;function D(){return Y.apply(this,arguments)}function Y(){return(Y=B(R().mark((function t(){return R().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",new Promise((function(t,e){if(q)t(q);else{var r=indexedDB.open("HistoryIndexerDB",1);r.onerror=function(t){console.error("Database error:",t.target.errorCode),e(t.target.errorCode)},r.onupgradeneeded=function(t){var e=(q=t.target.result).createObjectStore("history",{keyPath:"id"});e.createIndex("url","url",{unique:!1}),e.createIndex("title","title",{unique:!1}),e.createIndex("tags","tags",{unique:!1,multiEntry:!0}),e.createIndex("summary","summary",{unique:!1}),e.createIndex("lastVisitTime","lastVisitTime",{unique:!0}),console.log("Database upgraded")},r.onsuccess=function(e){q=e.target.result,t(q)}}})));case 1:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function z(){return K.apply(this,arguments)}function K(){return(K=B(R().mark((function t(){return R().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,D();case 2:return t.abrupt("return",new Promise((function(t,e){var r=q.transaction(["history"],"readonly").objectStore("history").getAll();r.onsuccess=function(e){t(e.target.result),console.log("All history items fetched")},r.onerror=function(t){e(t.target.errorCode),console.error("Error fetching all history items:",t.target.errorCode)}})));case 3:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function V(t){return V="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},V(t)}function H(){H=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(t,e,r){t[e]=r.value},i="function"==typeof Symbol?Symbol:{},c=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function u(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,r){return t[e]=r}}function h(t,e,r,n){var i=e&&e.prototype instanceof m?e:m,c=Object.create(i.prototype),a=new j(n||[]);return o(c,"_invoke",{value:k(t,r,a)}),c}function l(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=h;var f="suspendedStart",d="suspendedYield",p="executing",g="completed",y={};function m(){}function v(){}function x(){}var w={};u(w,c,(function(){return this}));var L=Object.getPrototypeOf,b=L&&L(L(C([])));b&&b!==r&&n.call(b,c)&&(w=b);var E=x.prototype=m.prototype=Object.create(w);function M(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(o,i,c,a){var s=l(t[o],t,i);if("throw"!==s.type){var u=s.arg,h=u.value;return h&&"object"==V(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){r("next",t,c,a)}),(function(t){r("throw",t,c,a)})):e.resolve(h).then((function(t){u.value=t,c(u)}),(function(t){return r("throw",t,c,a)}))}a(s.arg)}var i;o(this,"_invoke",{value:function(t,n){function o(){return new e((function(e,o){r(t,n,e,o)}))}return i=i?i.then(o,o):o()}})}function k(e,r,n){var o=f;return function(i,c){if(o===p)throw Error("Generator is already running");if(o===g){if("throw"===i)throw c;return{value:t,done:!0}}for(n.method=i,n.arg=c;;){var a=n.delegate;if(a){var s=S(a,n);if(s){if(s===y)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===f)throw o=g,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=p;var u=l(e,r,n);if("normal"===u.type){if(o=n.done?g:d,u.arg===y)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(o=g,n.method="throw",n.arg=u.arg)}}}function S(e,r){var n=r.method,o=e.iterator[n];if(o===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,S(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var i=l(o,e.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,y;var c=i.arg;return c?c.done?(r[e.resultName]=c.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):c:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function I(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function j(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(I,this),this.reset(!0)}function C(e){if(e||""===e){var r=e[c];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function r(){for(;++o<e.length;)if(n.call(e,o))return r.value=e[o],r.done=!1,r;return r.value=t,r.done=!0,r};return i.next=i}}throw new TypeError(V(e)+" is not iterable")}return v.prototype=x,o(E,"constructor",{value:x,configurable:!0}),o(x,"constructor",{value:v,configurable:!0}),v.displayName=u(x,s,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===v||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,x):(t.__proto__=x,u(t,s,"GeneratorFunction")),t.prototype=Object.create(E),t},e.awrap=function(t){return{__await:t}},M(_.prototype),u(_.prototype,a,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var c=new _(h(t,r,n,o),i);return e.isGeneratorFunction(r)?c:c.next().then((function(t){return t.done?t.value:c.next()}))},M(E),u(E,s,"Generator"),u(E,c,(function(){return this})),u(E,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=C,j.prototype={constructor:j,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(O),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function o(n,o){return a.type="throw",a.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var c=this.tryEntries[i],a=c.completion;if("root"===c.tryLoc)return o("end");if(c.tryLoc<=this.prev){var s=n.call(c,"catchLoc"),u=n.call(c,"finallyLoc");if(s&&u){if(this.prev<c.catchLoc)return o(c.catchLoc,!0);if(this.prev<c.finallyLoc)return o(c.finallyLoc)}else if(s){if(this.prev<c.catchLoc)return o(c.catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<c.finallyLoc)return o(c.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var c=i?i.completion:{};return c.type=t,c.arg=e,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(c)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),O(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;O(r)}return o}}throw Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:C(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function J(t,e,r,n,o,i,c){try{var a=t[i](c),s=a.value}catch(t){return void r(t)}a.done?e(s):Promise.resolve(s).then(n,o)}function Q(t){return U.apply(this,arguments)}function U(){var t;return t=H().mark((function t(e){var r,n,o,i;return H().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.trim().toLowerCase(),t.next=3,z();case 3:return n=t.sent,o=new G(n,{keys:["title","summary",{name:"tags",weight:.5}],threshold:.2}),i=o.search(r),t.abrupt("return",i);case 7:case"end":return t.stop()}}),t)})),U=function(){var e=this,r=arguments;return new Promise((function(n,o){var i=t.apply(e,r);function c(t){J(i,n,o,c,a,"next",t)}function a(t){J(i,n,o,c,a,"throw",t)}c(void 0)}))},U.apply(this,arguments)}function X(t){return X="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},X(t)}function Z(){Z=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(t,e,r){t[e]=r.value},i="function"==typeof Symbol?Symbol:{},c=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function u(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,r){return t[e]=r}}function h(t,e,r,n){var i=e&&e.prototype instanceof m?e:m,c=Object.create(i.prototype),a=new j(n||[]);return o(c,"_invoke",{value:k(t,r,a)}),c}function l(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=h;var f="suspendedStart",d="suspendedYield",p="executing",g="completed",y={};function m(){}function v(){}function x(){}var w={};u(w,c,(function(){return this}));var L=Object.getPrototypeOf,b=L&&L(L(C([])));b&&b!==r&&n.call(b,c)&&(w=b);var E=x.prototype=m.prototype=Object.create(w);function M(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function _(t,e){function r(o,i,c,a){var s=l(t[o],t,i);if("throw"!==s.type){var u=s.arg,h=u.value;return h&&"object"==X(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){r("next",t,c,a)}),(function(t){r("throw",t,c,a)})):e.resolve(h).then((function(t){u.value=t,c(u)}),(function(t){return r("throw",t,c,a)}))}a(s.arg)}var i;o(this,"_invoke",{value:function(t,n){function o(){return new e((function(e,o){r(t,n,e,o)}))}return i=i?i.then(o,o):o()}})}function k(e,r,n){var o=f;return function(i,c){if(o===p)throw Error("Generator is already running");if(o===g){if("throw"===i)throw c;return{value:t,done:!0}}for(n.method=i,n.arg=c;;){var a=n.delegate;if(a){var s=S(a,n);if(s){if(s===y)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===f)throw o=g,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=p;var u=l(e,r,n);if("normal"===u.type){if(o=n.done?g:d,u.arg===y)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(o=g,n.method="throw",n.arg=u.arg)}}}function S(e,r){var n=r.method,o=e.iterator[n];if(o===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,S(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var i=l(o,e.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,y;var c=i.arg;return c?c.done?(r[e.resultName]=c.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):c:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function I(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function j(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(I,this),this.reset(!0)}function C(e){if(e||""===e){var r=e[c];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function r(){for(;++o<e.length;)if(n.call(e,o))return r.value=e[o],r.done=!1,r;return r.value=t,r.done=!0,r};return i.next=i}}throw new TypeError(X(e)+" is not iterable")}return v.prototype=x,o(E,"constructor",{value:x,configurable:!0}),o(x,"constructor",{value:v,configurable:!0}),v.displayName=u(x,s,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===v||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,x):(t.__proto__=x,u(t,s,"GeneratorFunction")),t.prototype=Object.create(E),t},e.awrap=function(t){return{__await:t}},M(_.prototype),u(_.prototype,a,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var c=new _(h(t,r,n,o),i);return e.isGeneratorFunction(r)?c:c.next().then((function(t){return t.done?t.value:c.next()}))},M(E),u(E,s,"Generator"),u(E,c,(function(){return this})),u(E,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=C,j.prototype={constructor:j,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(O),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function o(n,o){return a.type="throw",a.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var c=this.tryEntries[i],a=c.completion;if("root"===c.tryLoc)return o("end");if(c.tryLoc<=this.prev){var s=n.call(c,"catchLoc"),u=n.call(c,"finallyLoc");if(s&&u){if(this.prev<c.catchLoc)return o(c.catchLoc,!0);if(this.prev<c.finallyLoc)return o(c.finallyLoc)}else if(s){if(this.prev<c.catchLoc)return o(c.catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<c.finallyLoc)return o(c.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var c=i?i.completion:{};return c.type=t,c.arg=e,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(c)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),O(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;O(r)}return o}}throw Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:C(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function tt(t,e,r,n,o,i,c){try{var a=t[i](c),s=a.value}catch(t){return void r(t)}a.done?e(s):Promise.resolve(s).then(n,o)}function et(t){return function(){var e=this,r=arguments;return new Promise((function(n,o){var i=t.apply(e,r);function c(t){tt(i,n,o,c,a,"next",t)}function a(t){tt(i,n,o,c,a,"throw",t)}c(void 0)}))}}function rt(t){var e=document.getElementById("results");if(e.innerHTML="",0!==t.length){var r=document.createElement("div");r.className="scrollable-container",t.forEach((function(t){var e=t.item,n=document.createElement("div");n.className="result-item";var o=document.createElement("a");o.href=e.url,o.textContent=e.title||e.url,o.target="_blank";var i=document.createElement("p");i.textContent="Tags: ".concat(Array.isArray(e.tags)&&e.tags.length>0?e.tags.join(", "):"None"),n.appendChild(o),n.appendChild(i),r.appendChild(n)})),e.appendChild(r),document.addEventListener("click",(function(t){e.contains(t.target)||(e.innerHTML="",document.getElementById("searchInput").value="")}))}else e.textContent="No results found."}function nt(){chrome.storage.local.get("indexPercentage",(function(t){document.getElementById("indexPercentage").textContent="Indexed ".concat(t.indexPercentage,"% of history")}))}G.version="7.0.0",G.createIndex=g,G.parseIndex=function(t,{getFn:e=f.getFn,fieldNormWeight:r=f.fieldNormWeight}={}){const{keys:n,records:o}=t,i=new p({getFn:e,fieldNormWeight:r});return i.setKeys(n),i.setIndexRecords(o),i},G.config=f,G.parseQuery=F,function(...t){I.push(...t)}(class{constructor(t,{isCaseSensitive:e=f.isCaseSensitive,includeMatches:r=f.includeMatches,minMatchCharLength:n=f.minMatchCharLength,ignoreLocation:o=f.ignoreLocation,findAllMatches:i=f.findAllMatches,location:c=f.location,threshold:a=f.threshold,distance:s=f.distance}={}){this.query=null,this.options={isCaseSensitive:e,includeMatches:r,minMatchCharLength:n,findAllMatches:i,ignoreLocation:o,location:c,threshold:a,distance:s},this.pattern=e?t:t.toLowerCase(),this.query=function(t,e={}){return t.split("|").map((t=>{let r=t.trim().split(k).filter((t=>t&&!!t.trim())),n=[];for(let t=0,o=r.length;t<o;t+=1){const o=r[t];let i=!1,c=-1;for(;!i&&++c<_;){const t=M[c];let r=t.isMultiMatch(o);r&&(n.push(new t(r,e)),i=!0)}if(!i)for(c=-1;++c<_;){const t=M[c];let r=t.isSingleMatch(o);if(r){n.push(new t(r,e));break}}}return n}))}(this.pattern,this.options)}static condition(t,e){return e.useExtendedSearch}searchIn(t){const e=this.query;if(!e)return{isMatch:!1,score:1};const{includeMatches:r,isCaseSensitive:n}=this.options;t=n?t:t.toLowerCase();let o=0,i=[],c=0;for(let n=0,a=e.length;n<a;n+=1){const a=e[n];i.length=0,o=0;for(let e=0,n=a.length;e<n;e+=1){const n=a[e],{isMatch:s,indices:u,score:h}=n.search(t);if(!s){c=0,o=0,i.length=0;break}if(o+=1,c+=h,r){const t=n.constructor.type;S.has(t)?i=[...i,...u]:i.push(u)}}if(o){let t={isMatch:!0,score:c/o};return r&&(t.indices=i),t}}return{isMatch:!1,score:1}}}),document.addEventListener("DOMContentLoaded",et(Z().mark((function t(){return Z().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:document.getElementById("refreshBtn").addEventListener("click",(function(){chrome.runtime.sendMessage({action:"refreshIndexPercentage"},(function(t){console.log(t.status),nt()}))})),document.getElementById("continueIndexing").addEventListener("click",(function(){chrome.runtime.sendMessage({action:"pauseIndexing"},(function(t){console.log(t.status),alert("Pausing Indexing")}))})),document.getElementById("searchBtn").addEventListener("click",et(Z().mark((function t(){var e;return Z().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=document.getElementById("searchInput").value,t.next=3,Q(e);case 3:rt(t.sent);case 5:case"end":return t.stop()}}),t)})))),document.getElementById("showDashboardBtn").addEventListener("click",(function(){chrome.runtime.sendMessage({action:"displaySummary"})})),nt();case 5:case"end":return t.stop()}}),t)}))))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,